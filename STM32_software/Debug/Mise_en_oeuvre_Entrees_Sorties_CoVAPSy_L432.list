
Mise_en_oeuvre_Entrees_Sorties_CoVAPSy_L432.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b1f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cb0  0800b388  0800b388  0001b388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c038  0800c038  00020084  2**0
                  CONTENTS
  4 .ARM          00000008  0800c038  0800c038  0001c038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c040  0800c040  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c040  0800c040  0001c040  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c044  0800c044  0001c044  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  0800c048  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000084  0800c0cc  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200006b0  0800c0cc  000206b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000266b3  00000000  00000000  000200f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004edc  00000000  00000000  000467aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e58  00000000  00000000  0004b688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001738  00000000  00000000  0004d4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026586  00000000  00000000  0004ec18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023852  00000000  00000000  0007519e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e5873  00000000  00000000  000989f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00008674  00000000  00000000  0017e264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000083  00000000  00000000  001868d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b370 	.word	0x0800b370

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800b370 	.word	0x0800b370

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <bno055_init>:
#include <CoVAPSy_bno055.h>
#include "i2c.h"
#include "data.h"

// Initialisation du BNO055
enum State bno055_init(void) {
 800056c:	b580      	push	{r7, lr}
 800056e:	b088      	sub	sp, #32
 8000570:	af02      	add	r7, sp, #8
		uint8_t donnees_Tx_i2c[8];
		uint8_t donnees_Rx_i2c[8];
		enum State bno055_state = OK;
 8000572:	2300      	movs	r3, #0
 8000574:	75fb      	strb	r3, [r7, #23]

		donnees_Tx_i2c[0] = 0x3F;
 8000576:	233f      	movs	r3, #63	; 0x3f
 8000578:	733b      	strb	r3, [r7, #12]
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 800057a:	bf00      	nop
 800057c:	4888      	ldr	r0, [pc, #544]	; (80007a0 <bno055_init+0x234>)
 800057e:	f003 ff9d 	bl	80044bc <HAL_I2C_GetState>
 8000582:	4603      	mov	r3, r0
 8000584:	2b20      	cmp	r3, #32
 8000586:	d1f9      	bne.n	800057c <bno055_init+0x10>
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 1, 1000);
 8000588:	f107 020c 	add.w	r2, r7, #12
 800058c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	2150      	movs	r1, #80	; 0x50
 8000596:	4882      	ldr	r0, [pc, #520]	; (80007a0 <bno055_init+0x234>)
 8000598:	f003 fc92 	bl	8003ec0 <HAL_I2C_Master_Transmit>
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800059c:	bf00      	nop
 800059e:	4880      	ldr	r0, [pc, #512]	; (80007a0 <bno055_init+0x234>)
 80005a0:	f003 ff8c 	bl	80044bc <HAL_I2C_GetState>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b20      	cmp	r3, #32
 80005a8:	d1f9      	bne.n	800059e <bno055_init+0x32>
		HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	1, 1);
 80005aa:	1d3a      	adds	r2, r7, #4
 80005ac:	2301      	movs	r3, #1
 80005ae:	9300      	str	r3, [sp, #0]
 80005b0:	2301      	movs	r3, #1
 80005b2:	2150      	movs	r1, #80	; 0x50
 80005b4:	487a      	ldr	r0, [pc, #488]	; (80007a0 <bno055_init+0x234>)
 80005b6:	f003 fd77 	bl	80040a8 <HAL_I2C_Master_Receive>

		HAL_Delay(500); //delai 500 ms
 80005ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005be:	f001 fe21 	bl	8002204 <HAL_Delay>

		donnees_Tx_i2c[1] = 32;
 80005c2:	2320      	movs	r3, #32
 80005c4:	737b      	strb	r3, [r7, #13]
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 80005c6:	bf00      	nop
 80005c8:	4875      	ldr	r0, [pc, #468]	; (80007a0 <bno055_init+0x234>)
 80005ca:	f003 ff77 	bl	80044bc <HAL_I2C_GetState>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b20      	cmp	r3, #32
 80005d2:	d1f9      	bne.n	80005c8 <bno055_init+0x5c>
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 80005d4:	f107 020c 	add.w	r2, r7, #12
 80005d8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	2302      	movs	r3, #2
 80005e0:	2150      	movs	r1, #80	; 0x50
 80005e2:	486f      	ldr	r0, [pc, #444]	; (80007a0 <bno055_init+0x234>)
 80005e4:	f003 fc6c 	bl	8003ec0 <HAL_I2C_Master_Transmit>

		HAL_Delay(2000); //delai 2000 ms
 80005e8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005ec:	f001 fe0a 	bl	8002204 <HAL_Delay>

		// A envoyer lors du premier test
		donnees_Tx_i2c[0] = PAGE_SWAP; // change page : page 0 = data, page 1 = configuration. Here we go to page 1 to configure the IMU
 80005f0:	2307      	movs	r3, #7
 80005f2:	733b      	strb	r3, [r7, #12]
		donnees_Tx_i2c[1] = 1;
 80005f4:	2301      	movs	r3, #1
 80005f6:	737b      	strb	r3, [r7, #13]
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 80005f8:	bf00      	nop
 80005fa:	4869      	ldr	r0, [pc, #420]	; (80007a0 <bno055_init+0x234>)
 80005fc:	f003 ff5e 	bl	80044bc <HAL_I2C_GetState>
 8000600:	4603      	mov	r3, r0
 8000602:	2b20      	cmp	r3, #32
 8000604:	d1f9      	bne.n	80005fa <bno055_init+0x8e>
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000606:	f107 020c 	add.w	r2, r7, #12
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	9300      	str	r3, [sp, #0]
 8000610:	2302      	movs	r3, #2
 8000612:	2150      	movs	r1, #80	; 0x50
 8000614:	4862      	ldr	r0, [pc, #392]	; (80007a0 <bno055_init+0x234>)
 8000616:	f003 fc53 	bl	8003ec0 <HAL_I2C_Master_Transmit>

		donnees_Tx_i2c[0] = ACC_CONF; // Range : +/- 2G, Bandwidth : 31.25 Hz, Power mode : NORMAL
 800061a:	2308      	movs	r3, #8
 800061c:	733b      	strb	r3, [r7, #12]
		donnees_Tx_i2c[1] = 0x08;
 800061e:	2308      	movs	r3, #8
 8000620:	737b      	strb	r3, [r7, #13]
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000622:	bf00      	nop
 8000624:	485e      	ldr	r0, [pc, #376]	; (80007a0 <bno055_init+0x234>)
 8000626:	f003 ff49 	bl	80044bc <HAL_I2C_GetState>
 800062a:	4603      	mov	r3, r0
 800062c:	2b20      	cmp	r3, #32
 800062e:	d1f9      	bne.n	8000624 <bno055_init+0xb8>
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000630:	f107 020c 	add.w	r2, r7, #12
 8000634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000638:	9300      	str	r3, [sp, #0]
 800063a:	2302      	movs	r3, #2
 800063c:	2150      	movs	r1, #80	; 0x50
 800063e:	4858      	ldr	r0, [pc, #352]	; (80007a0 <bno055_init+0x234>)
 8000640:	f003 fc3e 	bl	8003ec0 <HAL_I2C_Master_Transmit>

		donnees_Tx_i2c[0] = GYR_CONF_0; // Range : 250dps, Bandwidth : 23 Hz
 8000644:	230a      	movs	r3, #10
 8000646:	733b      	strb	r3, [r7, #12]
		donnees_Tx_i2c[1] = 0x23;
 8000648:	2323      	movs	r3, #35	; 0x23
 800064a:	737b      	strb	r3, [r7, #13]
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 800064c:	bf00      	nop
 800064e:	4854      	ldr	r0, [pc, #336]	; (80007a0 <bno055_init+0x234>)
 8000650:	f003 ff34 	bl	80044bc <HAL_I2C_GetState>
 8000654:	4603      	mov	r3, r0
 8000656:	2b20      	cmp	r3, #32
 8000658:	d1f9      	bne.n	800064e <bno055_init+0xe2>
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 800065a:	f107 020c 	add.w	r2, r7, #12
 800065e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2302      	movs	r3, #2
 8000666:	2150      	movs	r1, #80	; 0x50
 8000668:	484d      	ldr	r0, [pc, #308]	; (80007a0 <bno055_init+0x234>)
 800066a:	f003 fc29 	bl	8003ec0 <HAL_I2C_Master_Transmit>

		donnees_Tx_i2c[0] = GYR_CONF_1; // Power mode : NORMAL
 800066e:	230b      	movs	r3, #11
 8000670:	733b      	strb	r3, [r7, #12]
		donnees_Tx_i2c[1] = 0;
 8000672:	2300      	movs	r3, #0
 8000674:	737b      	strb	r3, [r7, #13]
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) ;
 8000676:	bf00      	nop
 8000678:	4849      	ldr	r0, [pc, #292]	; (80007a0 <bno055_init+0x234>)
 800067a:	f003 ff1f 	bl	80044bc <HAL_I2C_GetState>
 800067e:	4603      	mov	r3, r0
 8000680:	2b20      	cmp	r3, #32
 8000682:	d1f9      	bne.n	8000678 <bno055_init+0x10c>
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000684:	f107 020c 	add.w	r2, r7, #12
 8000688:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800068c:	9300      	str	r3, [sp, #0]
 800068e:	2302      	movs	r3, #2
 8000690:	2150      	movs	r1, #80	; 0x50
 8000692:	4843      	ldr	r0, [pc, #268]	; (80007a0 <bno055_init+0x234>)
 8000694:	f003 fc14 	bl	8003ec0 <HAL_I2C_Master_Transmit>

		donnees_Tx_i2c[0] = MAG_CONF; // Bandwidth : 10Hz, Operation Mode : High accuracy; Power mode : NORMAL
 8000698:	2309      	movs	r3, #9
 800069a:	733b      	strb	r3, [r7, #12]
		donnees_Tx_i2c[1] = 0x1B;
 800069c:	231b      	movs	r3, #27
 800069e:	737b      	strb	r3, [r7, #13]
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 80006a0:	bf00      	nop
 80006a2:	483f      	ldr	r0, [pc, #252]	; (80007a0 <bno055_init+0x234>)
 80006a4:	f003 ff0a 	bl	80044bc <HAL_I2C_GetState>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b20      	cmp	r3, #32
 80006ac:	d1f9      	bne.n	80006a2 <bno055_init+0x136>
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 80006ae:	f107 020c 	add.w	r2, r7, #12
 80006b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2302      	movs	r3, #2
 80006ba:	2150      	movs	r1, #80	; 0x50
 80006bc:	4838      	ldr	r0, [pc, #224]	; (80007a0 <bno055_init+0x234>)
 80006be:	f003 fbff 	bl	8003ec0 <HAL_I2C_Master_Transmit>

		donnees_Tx_i2c[0] = PAGE_SWAP; // Change page, we go back to the data page
 80006c2:	2307      	movs	r3, #7
 80006c4:	733b      	strb	r3, [r7, #12]
		donnees_Tx_i2c[1] = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	737b      	strb	r3, [r7, #13]
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 80006ca:	bf00      	nop
 80006cc:	4834      	ldr	r0, [pc, #208]	; (80007a0 <bno055_init+0x234>)
 80006ce:	f003 fef5 	bl	80044bc <HAL_I2C_GetState>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b20      	cmp	r3, #32
 80006d6:	d1f9      	bne.n	80006cc <bno055_init+0x160>
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 80006d8:	f107 020c 	add.w	r2, r7, #12
 80006dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2302      	movs	r3, #2
 80006e4:	2150      	movs	r1, #80	; 0x50
 80006e6:	482e      	ldr	r0, [pc, #184]	; (80007a0 <bno055_init+0x234>)
 80006e8:	f003 fbea 	bl	8003ec0 <HAL_I2C_Master_Transmit>

		donnees_Tx_i2c[0] = TEMP_SOURCE;
 80006ec:	2340      	movs	r3, #64	; 0x40
 80006ee:	733b      	strb	r3, [r7, #12]
		donnees_Tx_i2c[1] = 0x01;
 80006f0:	2301      	movs	r3, #1
 80006f2:	737b      	strb	r3, [r7, #13]
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 80006f4:	bf00      	nop
 80006f6:	482a      	ldr	r0, [pc, #168]	; (80007a0 <bno055_init+0x234>)
 80006f8:	f003 fee0 	bl	80044bc <HAL_I2C_GetState>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b20      	cmp	r3, #32
 8000700:	d1f9      	bne.n	80006f6 <bno055_init+0x18a>
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000702:	f107 020c 	add.w	r2, r7, #12
 8000706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2302      	movs	r3, #2
 800070e:	2150      	movs	r1, #80	; 0x50
 8000710:	4823      	ldr	r0, [pc, #140]	; (80007a0 <bno055_init+0x234>)
 8000712:	f003 fbd5 	bl	8003ec0 <HAL_I2C_Master_Transmit>

		donnees_Tx_i2c[0] = UNIT_SEL; // Acceleration : m/s^2; Angular rate : Rps; Euler angles: radians; Temp : °C
 8000716:	233b      	movs	r3, #59	; 0x3b
 8000718:	733b      	strb	r3, [r7, #12]
		donnees_Tx_i2c[1] = 0x06;
 800071a:	2306      	movs	r3, #6
 800071c:	737b      	strb	r3, [r7, #13]
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 800071e:	bf00      	nop
 8000720:	481f      	ldr	r0, [pc, #124]	; (80007a0 <bno055_init+0x234>)
 8000722:	f003 fecb 	bl	80044bc <HAL_I2C_GetState>
 8000726:	4603      	mov	r3, r0
 8000728:	2b20      	cmp	r3, #32
 800072a:	d1f9      	bne.n	8000720 <bno055_init+0x1b4>
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 800072c:	f107 020c 	add.w	r2, r7, #12
 8000730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000734:	9300      	str	r3, [sp, #0]
 8000736:	2302      	movs	r3, #2
 8000738:	2150      	movs	r1, #80	; 0x50
 800073a:	4819      	ldr	r0, [pc, #100]	; (80007a0 <bno055_init+0x234>)
 800073c:	f003 fbc0 	bl	8003ec0 <HAL_I2C_Master_Transmit>

		donnees_Tx_i2c[0] = PWR_MODE; // Normal Mode
 8000740:	233e      	movs	r3, #62	; 0x3e
 8000742:	733b      	strb	r3, [r7, #12]
		donnees_Tx_i2c[1] = 0x00;
 8000744:	2300      	movs	r3, #0
 8000746:	737b      	strb	r3, [r7, #13]
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 8000748:	bf00      	nop
 800074a:	4815      	ldr	r0, [pc, #84]	; (80007a0 <bno055_init+0x234>)
 800074c:	f003 feb6 	bl	80044bc <HAL_I2C_GetState>
 8000750:	4603      	mov	r3, r0
 8000752:	2b20      	cmp	r3, #32
 8000754:	d1f9      	bne.n	800074a <bno055_init+0x1de>
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000756:	f107 020c 	add.w	r2, r7, #12
 800075a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800075e:	9300      	str	r3, [sp, #0]
 8000760:	2302      	movs	r3, #2
 8000762:	2150      	movs	r1, #80	; 0x50
 8000764:	480e      	ldr	r0, [pc, #56]	; (80007a0 <bno055_init+0x234>)
 8000766:	f003 fbab 	bl	8003ec0 <HAL_I2C_Master_Transmit>

		donnees_Tx_i2c[0] = MODE_REG;
 800076a:	233d      	movs	r3, #61	; 0x3d
 800076c:	733b      	strb	r3, [r7, #12]
		donnees_Tx_i2c[1] = FUSION_MODE;
 800076e:	230c      	movs	r3, #12
 8000770:	737b      	strb	r3, [r7, #13]
		while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY)	;
 8000772:	bf00      	nop
 8000774:	480a      	ldr	r0, [pc, #40]	; (80007a0 <bno055_init+0x234>)
 8000776:	f003 fea1 	bl	80044bc <HAL_I2C_GetState>
 800077a:	4603      	mov	r3, r0
 800077c:	2b20      	cmp	r3, #32
 800077e:	d1f9      	bne.n	8000774 <bno055_init+0x208>
		HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 2, 1000);
 8000780:	f107 020c 	add.w	r2, r7, #12
 8000784:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2302      	movs	r3, #2
 800078c:	2150      	movs	r1, #80	; 0x50
 800078e:	4804      	ldr	r0, [pc, #16]	; (80007a0 <bno055_init+0x234>)
 8000790:	f003 fb96 	bl	8003ec0 <HAL_I2C_Master_Transmit>

		return bno055_state;
 8000794:	7dfb      	ldrb	r3, [r7, #23]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3718      	adds	r7, #24
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	2000014c 	.word	0x2000014c

080007a4 <bno055_lecture_16bits>:

int16_t bno055_lecture_16bits(uint8_t num_registre) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af02      	add	r7, sp, #8
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
	uint8_t donnees_Tx_i2c[8];
	uint8_t donnees_Rx_i2c[8];
	donnees_Tx_i2c[0] = num_registre;
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	743b      	strb	r3, [r7, #16]
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80007b2:	bf00      	nop
 80007b4:	4816      	ldr	r0, [pc, #88]	; (8000810 <bno055_lecture_16bits+0x6c>)
 80007b6:	f003 fe81 	bl	80044bc <HAL_I2C_GetState>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b20      	cmp	r3, #32
 80007be:	d1f9      	bne.n	80007b4 <bno055_lecture_16bits+0x10>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Tx_i2c, 1, 1000);
 80007c0:	f107 0210 	add.w	r2, r7, #16
 80007c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2301      	movs	r3, #1
 80007cc:	2150      	movs	r1, #80	; 0x50
 80007ce:	4810      	ldr	r0, [pc, #64]	; (8000810 <bno055_lecture_16bits+0x6c>)
 80007d0:	f003 fb76 	bl	8003ec0 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80007d4:	bf00      	nop
 80007d6:	480e      	ldr	r0, [pc, #56]	; (8000810 <bno055_lecture_16bits+0x6c>)
 80007d8:	f003 fe70 	bl	80044bc <HAL_I2C_GetState>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b20      	cmp	r3, #32
 80007e0:	d1f9      	bne.n	80007d6 <bno055_lecture_16bits+0x32>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t) ADRESSE_BNO << 1, donnees_Rx_i2c,	2, 1);
 80007e2:	f107 0208 	add.w	r2, r7, #8
 80007e6:	2301      	movs	r3, #1
 80007e8:	9300      	str	r3, [sp, #0]
 80007ea:	2302      	movs	r3, #2
 80007ec:	2150      	movs	r1, #80	; 0x50
 80007ee:	4808      	ldr	r0, [pc, #32]	; (8000810 <bno055_lecture_16bits+0x6c>)
 80007f0:	f003 fc5a 	bl	80040a8 <HAL_I2C_Master_Receive>
	return ((uint16_t)(donnees_Rx_i2c[1]<<8) + donnees_Rx_i2c[0]);
 80007f4:	7a7b      	ldrb	r3, [r7, #9]
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	021b      	lsls	r3, r3, #8
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	7a3b      	ldrb	r3, [r7, #8]
 80007fe:	b29b      	uxth	r3, r3
 8000800:	4413      	add	r3, r2
 8000802:	b29b      	uxth	r3, r3
 8000804:	b21b      	sxth	r3, r3
}
 8000806:	4618      	mov	r0, r3
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	2000014c 	.word	0x2000014c

08000814 <buzzer_start_frequency_Hz>:


#include "CoVAPSy_buzzer.h"

//Periode max 65 535 µs => Frequence entre 15 et 1 MHz
void buzzer_start_frequency_Hz(float frequency_Hz){
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
 800081a:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t periode_buzzer;
	periode_buzzer = FREQ_TIMER_6/frequency_Hz;
 800081e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000878 <buzzer_start_frequency_Hz+0x64>
 8000822:	ed97 7a01 	vldr	s14, [r7, #4]
 8000826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800082a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800082e:	ee17 3a90 	vmov	r3, s15
 8000832:	60fb      	str	r3, [r7, #12]
	HAL_TIM_Base_Stop_IT(&htim6);
 8000834:	4811      	ldr	r0, [pc, #68]	; (800087c <buzzer_start_frequency_Hz+0x68>)
 8000836:	f006 fa03 	bl	8006c40 <HAL_TIM_Base_Stop_IT>
	htim6.Instance = TIM6;
 800083a:	4b10      	ldr	r3, [pc, #64]	; (800087c <buzzer_start_frequency_Hz+0x68>)
 800083c:	4a10      	ldr	r2, [pc, #64]	; (8000880 <buzzer_start_frequency_Hz+0x6c>)
 800083e:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 31;
 8000840:	4b0e      	ldr	r3, [pc, #56]	; (800087c <buzzer_start_frequency_Hz+0x68>)
 8000842:	221f      	movs	r2, #31
 8000844:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000846:	4b0d      	ldr	r3, [pc, #52]	; (800087c <buzzer_start_frequency_Hz+0x68>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = periode_buzzer;
 800084c:	4a0b      	ldr	r2, [pc, #44]	; (800087c <buzzer_start_frequency_Hz+0x68>)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	60d3      	str	r3, [r2, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <buzzer_start_frequency_Hz+0x68>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000858:	4808      	ldr	r0, [pc, #32]	; (800087c <buzzer_start_frequency_Hz+0x68>)
 800085a:	f006 f945 	bl	8006ae8 <HAL_TIM_Base_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <buzzer_start_frequency_Hz+0x54>
	{
	    Error_Handler();
 8000864:	f000 ff58 	bl	8001718 <Error_Handler>
	}
	HAL_TIM_Base_Start_IT(&htim6);
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <buzzer_start_frequency_Hz+0x68>)
 800086a:	f006 f995 	bl	8006b98 <HAL_TIM_Base_Start_IT>
}
 800086e:	bf00      	nop
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	49742400 	.word	0x49742400
 800087c:	20000410 	.word	0x20000410
 8000880:	40001000 	.word	0x40001000

08000884 <buzzer_start>:

void buzzer_start(void){
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0

	HAL_TIM_Base_Start_IT(&htim6);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <buzzer_start+0x10>)
 800088a:	f006 f985 	bl	8006b98 <HAL_TIM_Base_Start_IT>
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000410 	.word	0x20000410

08000898 <buzzer_stop>:

void buzzer_stop(void){
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim6);
 800089c:	4802      	ldr	r0, [pc, #8]	; (80008a8 <buzzer_stop+0x10>)
 800089e:	f006 f9cf 	bl	8006c40 <HAL_TIM_Base_Stop_IT>
}
 80008a2:	bf00      	nop
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000410 	.word	0x20000410

080008ac <buzzer_gamme>:

void buzzer_gamme(void){
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	HAL_Delay(200);
	buzzer_start_frequency_Hz(NOTE_DO4);
	HAL_Delay(200);
	buzzer_stop();
*/
	buzzer_start_frequency_Hz(NOTE_E4);
 80008b0:	ed9f 0a44 	vldr	s0, [pc, #272]	; 80009c4 <buzzer_gamme+0x118>
 80008b4:	f7ff ffae 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 80008b8:	20c8      	movs	r0, #200	; 0xc8
 80008ba:	f001 fca3 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_G4);
 80008be:	ed9f 0a42 	vldr	s0, [pc, #264]	; 80009c8 <buzzer_gamme+0x11c>
 80008c2:	f7ff ffa7 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 80008c6:	20c8      	movs	r0, #200	; 0xc8
 80008c8:	f001 fc9c 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_A4);
 80008cc:	ed9f 0a3f 	vldr	s0, [pc, #252]	; 80009cc <buzzer_gamme+0x120>
 80008d0:	f7ff ffa0 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 80008d4:	20c8      	movs	r0, #200	; 0xc8
 80008d6:	f001 fc95 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_A4);
 80008da:	ed9f 0a3c 	vldr	s0, [pc, #240]	; 80009cc <buzzer_gamme+0x120>
 80008de:	f7ff ff99 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 80008e2:	20c8      	movs	r0, #200	; 0xc8
 80008e4:	f001 fc8e 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(0);
 80008e8:	ed9f 0a39 	vldr	s0, [pc, #228]	; 80009d0 <buzzer_gamme+0x124>
 80008ec:	f7ff ff92 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 80008f0:	20c8      	movs	r0, #200	; 0xc8
 80008f2:	f001 fc87 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_A4);
 80008f6:	ed9f 0a35 	vldr	s0, [pc, #212]	; 80009cc <buzzer_gamme+0x120>
 80008fa:	f7ff ff8b 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 80008fe:	20c8      	movs	r0, #200	; 0xc8
 8000900:	f001 fc80 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_B4);
 8000904:	ed9f 0a33 	vldr	s0, [pc, #204]	; 80009d4 <buzzer_gamme+0x128>
 8000908:	f7ff ff84 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 800090c:	20c8      	movs	r0, #200	; 0xc8
 800090e:	f001 fc79 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_C5);
 8000912:	ed9f 0a31 	vldr	s0, [pc, #196]	; 80009d8 <buzzer_gamme+0x12c>
 8000916:	f7ff ff7d 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 800091a:	20c8      	movs	r0, #200	; 0xc8
 800091c:	f001 fc72 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_C5);
 8000920:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 80009d8 <buzzer_gamme+0x12c>
 8000924:	f7ff ff76 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 8000928:	20c8      	movs	r0, #200	; 0xc8
 800092a:	f001 fc6b 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(0);
 800092e:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80009d0 <buzzer_gamme+0x124>
 8000932:	f7ff ff6f 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 8000936:	20c8      	movs	r0, #200	; 0xc8
 8000938:	f001 fc64 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_C5);
 800093c:	ed9f 0a26 	vldr	s0, [pc, #152]	; 80009d8 <buzzer_gamme+0x12c>
 8000940:	f7ff ff68 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 8000944:	20c8      	movs	r0, #200	; 0xc8
 8000946:	f001 fc5d 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_D5);
 800094a:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80009dc <buzzer_gamme+0x130>
 800094e:	f7ff ff61 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 8000952:	20c8      	movs	r0, #200	; 0xc8
 8000954:	f001 fc56 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_B4);
 8000958:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 80009d4 <buzzer_gamme+0x128>
 800095c:	f7ff ff5a 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 8000960:	20c8      	movs	r0, #200	; 0xc8
 8000962:	f001 fc4f 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_B4);
 8000966:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 80009d4 <buzzer_gamme+0x128>
 800096a:	f7ff ff53 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 800096e:	20c8      	movs	r0, #200	; 0xc8
 8000970:	f001 fc48 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(0);
 8000974:	ed9f 0a16 	vldr	s0, [pc, #88]	; 80009d0 <buzzer_gamme+0x124>
 8000978:	f7ff ff4c 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 800097c:	20c8      	movs	r0, #200	; 0xc8
 800097e:	f001 fc41 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_A4);
 8000982:	ed9f 0a12 	vldr	s0, [pc, #72]	; 80009cc <buzzer_gamme+0x120>
 8000986:	f7ff ff45 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 800098a:	20c8      	movs	r0, #200	; 0xc8
 800098c:	f001 fc3a 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_G4);
 8000990:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80009c8 <buzzer_gamme+0x11c>
 8000994:	f7ff ff3e 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 8000998:	20c8      	movs	r0, #200	; 0xc8
 800099a:	f001 fc33 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(NOTE_A4);
 800099e:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80009cc <buzzer_gamme+0x120>
 80009a2:	f7ff ff37 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 80009a6:	20c8      	movs	r0, #200	; 0xc8
 80009a8:	f001 fc2c 	bl	8002204 <HAL_Delay>
	buzzer_start_frequency_Hz(0);
 80009ac:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80009d0 <buzzer_gamme+0x124>
 80009b0:	f7ff ff30 	bl	8000814 <buzzer_start_frequency_Hz>
	HAL_Delay(200);
 80009b4:	20c8      	movs	r0, #200	; 0xc8
 80009b6:	f001 fc25 	bl	8002204 <HAL_Delay>
				buzzer_start_frequency_Hz(NOTE_B4);
				HAL_Delay(200);
				buzzer_start_frequency_Hz(0);
				HAL_Delay(200);
*/
	buzzer_stop();
 80009ba:	f7ff ff6d 	bl	8000898 <buzzer_stop>

}
 80009be:	bf00      	nop
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	43a50000 	.word	0x43a50000
 80009c8:	43c40000 	.word	0x43c40000
 80009cc:	43dc0000 	.word	0x43dc0000
 80009d0:	00000000 	.word	0x00000000
 80009d4:	43f70000 	.word	0x43f70000
 80009d8:	4402c000 	.word	0x4402c000
 80009dc:	4412c000 	.word	0x4412c000

080009e0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009e6:	463b      	mov	r3, r7
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
 80009f4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009f6:	4b37      	ldr	r3, [pc, #220]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 80009f8:	4a37      	ldr	r2, [pc, #220]	; (8000ad8 <MX_ADC1_Init+0xf8>)
 80009fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80009fc:	4b35      	ldr	r3, [pc, #212]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a02:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a08:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000a0e:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000a14:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a16:	2208      	movs	r2, #8
 8000a18:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a20:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 8000a26:	4b2b      	ldr	r3, [pc, #172]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a28:	2203      	movs	r2, #3
 8000a2a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a2c:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a34:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a3a:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a40:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000a48:	4b22      	ldr	r3, [pc, #136]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a4e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a50:	4b20      	ldr	r3, [pc, #128]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a58:	481e      	ldr	r0, [pc, #120]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a5a:	f001 fdbf 	bl	80025dc <HAL_ADC_Init>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8000a64:	f000 fe58 	bl	8001718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000a68:	4b1c      	ldr	r3, [pc, #112]	; (8000adc <MX_ADC1_Init+0xfc>)
 8000a6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a6c:	2306      	movs	r3, #6
 8000a6e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a74:	237f      	movs	r3, #127	; 0x7f
 8000a76:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000a86:	f001 ff93 	bl	80029b0 <HAL_ADC_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8000a90:	f000 fe42 	bl	8001718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000a94:	4b12      	ldr	r3, [pc, #72]	; (8000ae0 <MX_ADC1_Init+0x100>)
 8000a96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000a98:	230c      	movs	r3, #12
 8000a9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000aa2:	f001 ff85 	bl	80029b0 <HAL_ADC_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8000aac:	f000 fe34 	bl	8001718 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_ADC1_Init+0x104>)
 8000ab2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8000ab4:	2312      	movs	r3, #18
 8000ab6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_ADC1_Init+0xf4>)
 8000abe:	f001 ff77 	bl	80029b0 <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0xec>
  {
    Error_Handler();
 8000ac8:	f000 fe26 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3718      	adds	r7, #24
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	200000a0 	.word	0x200000a0
 8000ad8:	50040000 	.word	0x50040000
 8000adc:	19200040 	.word	0x19200040
 8000ae0:	21800100 	.word	0x21800100
 8000ae4:	25b00200 	.word	0x25b00200

08000ae8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b09e      	sub	sp, #120	; 0x78
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b00:	f107 0310 	add.w	r3, r7, #16
 8000b04:	2254      	movs	r2, #84	; 0x54
 8000b06:	2100      	movs	r1, #0
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f009 fc17 	bl	800a33c <memset>
  if(adcHandle->Instance==ADC1)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4a3b      	ldr	r2, [pc, #236]	; (8000c00 <HAL_ADC_MspInit+0x118>)
 8000b14:	4293      	cmp	r3, r2
 8000b16:	d16e      	bne.n	8000bf6 <HAL_ADC_MspInit+0x10e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b22:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b24:	2301      	movs	r3, #1
 8000b26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000b2c:	2310      	movs	r3, #16
 8000b2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b30:	2307      	movs	r3, #7
 8000b32:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b34:	2302      	movs	r3, #2
 8000b36:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b42:	f107 0310 	add.w	r3, r7, #16
 8000b46:	4618      	mov	r0, r3
 8000b48:	f004 fed6 	bl	80058f8 <HAL_RCCEx_PeriphCLKConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000b52:	f000 fde1 	bl	8001718 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b56:	4b2b      	ldr	r3, [pc, #172]	; (8000c04 <HAL_ADC_MspInit+0x11c>)
 8000b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5a:	4a2a      	ldr	r2, [pc, #168]	; (8000c04 <HAL_ADC_MspInit+0x11c>)
 8000b5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b62:	4b28      	ldr	r3, [pc, #160]	; (8000c04 <HAL_ADC_MspInit+0x11c>)
 8000b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b25      	ldr	r3, [pc, #148]	; (8000c04 <HAL_ADC_MspInit+0x11c>)
 8000b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b72:	4a24      	ldr	r2, [pc, #144]	; (8000c04 <HAL_ADC_MspInit+0x11c>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7a:	4b22      	ldr	r3, [pc, #136]	; (8000c04 <HAL_ADC_MspInit+0x11c>)
 8000b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4;
 8000b86:	231a      	movs	r3, #26
 8000b88:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b8a:	230b      	movs	r3, #11
 8000b8c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b96:	4619      	mov	r1, r3
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f002 ff4c 	bl	8003a38 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ba0:	4b19      	ldr	r3, [pc, #100]	; (8000c08 <HAL_ADC_MspInit+0x120>)
 8000ba2:	4a1a      	ldr	r2, [pc, #104]	; (8000c0c <HAL_ADC_MspInit+0x124>)
 8000ba4:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <HAL_ADC_MspInit+0x120>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <HAL_ADC_MspInit+0x120>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <HAL_ADC_MspInit+0x120>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bb8:	4b13      	ldr	r3, [pc, #76]	; (8000c08 <HAL_ADC_MspInit+0x120>)
 8000bba:	2280      	movs	r2, #128	; 0x80
 8000bbc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_ADC_MspInit+0x120>)
 8000bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bc4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_ADC_MspInit+0x120>)
 8000bc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bcc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bce:	4b0e      	ldr	r3, [pc, #56]	; (8000c08 <HAL_ADC_MspInit+0x120>)
 8000bd0:	2220      	movs	r2, #32
 8000bd2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_ADC_MspInit+0x120>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bda:	480b      	ldr	r0, [pc, #44]	; (8000c08 <HAL_ADC_MspInit+0x120>)
 8000bdc:	f002 fcf4 	bl	80035c8 <HAL_DMA_Init>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000be6:	f000 fd97 	bl	8001718 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4a06      	ldr	r2, [pc, #24]	; (8000c08 <HAL_ADC_MspInit+0x120>)
 8000bee:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bf0:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <HAL_ADC_MspInit+0x120>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000bf6:	bf00      	nop
 8000bf8:	3778      	adds	r7, #120	; 0x78
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	50040000 	.word	0x50040000
 8000c04:	40021000 	.word	0x40021000
 8000c08:	20000104 	.word	0x20000104
 8000c0c:	40020008 	.word	0x40020008

08000c10 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c16:	4b1a      	ldr	r3, [pc, #104]	; (8000c80 <MX_DMA_Init+0x70>)
 8000c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c1a:	4a19      	ldr	r2, [pc, #100]	; (8000c80 <MX_DMA_Init+0x70>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	6493      	str	r3, [r2, #72]	; 0x48
 8000c22:	4b17      	ldr	r3, [pc, #92]	; (8000c80 <MX_DMA_Init+0x70>)
 8000c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	607b      	str	r3, [r7, #4]
 8000c2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c2e:	4b14      	ldr	r3, [pc, #80]	; (8000c80 <MX_DMA_Init+0x70>)
 8000c30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <MX_DMA_Init+0x70>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6493      	str	r3, [r2, #72]	; 0x48
 8000c3a:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <MX_DMA_Init+0x70>)
 8000c3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	200b      	movs	r0, #11
 8000c4c:	f002 fc85 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000c50:	200b      	movs	r0, #11
 8000c52:	f002 fc9e 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000c56:	2200      	movs	r2, #0
 8000c58:	2100      	movs	r1, #0
 8000c5a:	2038      	movs	r0, #56	; 0x38
 8000c5c:	f002 fc7d 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000c60:	2038      	movs	r0, #56	; 0x38
 8000c62:	f002 fc96 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel2_IRQn, 0, 0);
 8000c66:	2200      	movs	r2, #0
 8000c68:	2100      	movs	r1, #0
 8000c6a:	2039      	movs	r0, #57	; 0x39
 8000c6c:	f002 fc75 	bl	800355a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel2_IRQn);
 8000c70:	2039      	movs	r0, #57	; 0x39
 8000c72:	f002 fc8e 	bl	8003592 <HAL_NVIC_EnableIRQ>

}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40021000 	.word	0x40021000

08000c84 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15 (JTDI)   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8a:	f107 030c 	add.w	r3, r7, #12
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	60da      	str	r2, [r3, #12]
 8000c98:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c9a:	4b3e      	ldr	r3, [pc, #248]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9e:	4a3d      	ldr	r2, [pc, #244]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000ca0:	f043 0304 	orr.w	r3, r3, #4
 8000ca4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca6:	4b3b      	ldr	r3, [pc, #236]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000caa:	f003 0304 	and.w	r3, r3, #4
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cb2:	4b38      	ldr	r3, [pc, #224]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb6:	4a37      	ldr	r2, [pc, #220]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000cb8:	f043 0301 	orr.w	r3, r3, #1
 8000cbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cbe:	4b35      	ldr	r3, [pc, #212]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	607b      	str	r3, [r7, #4]
 8000cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cca:	4b32      	ldr	r3, [pc, #200]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cce:	4a31      	ldr	r2, [pc, #196]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000cd0:	f043 0302 	orr.w	r3, r3, #2
 8000cd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd6:	4b2f      	ldr	r3, [pc, #188]	; (8000d94 <MX_GPIO_Init+0x110>)
 8000cd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cda:	f003 0302 	and.w	r3, r3, #2
 8000cde:	603b      	str	r3, [r7, #0]
 8000ce0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2184      	movs	r1, #132	; 0x84
 8000ce6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cea:	f003 f827 	bl	8003d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUZZER_GPIO_Port, BUZZER_Pin, GPIO_PIN_RESET);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2102      	movs	r1, #2
 8000cf2:	4829      	ldr	r0, [pc, #164]	; (8000d98 <MX_GPIO_Init+0x114>)
 8000cf4:	f003 f822 	bl	8003d3c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED4_Pin;
 8000cf8:	2384      	movs	r3, #132	; 0x84
 8000cfa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d12:	f002 fe91 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP2_Pin;
 8000d16:	2301      	movs	r3, #1
 8000d18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BP2_GPIO_Port, &GPIO_InitStruct);
 8000d22:	f107 030c 	add.w	r3, r7, #12
 8000d26:	4619      	mov	r1, r3
 8000d28:	481b      	ldr	r0, [pc, #108]	; (8000d98 <MX_GPIO_Init+0x114>)
 8000d2a:	f002 fe85 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 030c 	add.w	r3, r7, #12
 8000d42:	4619      	mov	r1, r3
 8000d44:	4814      	ldr	r0, [pc, #80]	; (8000d98 <MX_GPIO_Init+0x114>)
 8000d46:	f002 fe77 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BP1_Pin;
 8000d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d50:	2300      	movs	r3, #0
 8000d52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BP1_GPIO_Port, &GPIO_InitStruct);
 8000d58:	f107 030c 	add.w	r3, r7, #12
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d62:	f002 fe69 	bl	8003a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000d66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d6a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	4619      	mov	r1, r3
 8000d82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d86:	f002 fe57 	bl	8003a38 <HAL_GPIO_Init>

}
 8000d8a:	bf00      	nop
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40021000 	.word	0x40021000
 8000d98:	48000400 	.word	0x48000400

08000d9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000da0:	4b1b      	ldr	r3, [pc, #108]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000da2:	4a1c      	ldr	r2, [pc, #112]	; (8000e14 <MX_I2C1_Init+0x78>)
 8000da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000da6:	4b1a      	ldr	r3, [pc, #104]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000da8:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <MX_I2C1_Init+0x7c>)
 8000daa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000dac:	4b18      	ldr	r3, [pc, #96]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db2:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000db8:	4b15      	ldr	r3, [pc, #84]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000dbe:	4b14      	ldr	r3, [pc, #80]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dca:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd0:	4b0f      	ldr	r3, [pc, #60]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd6:	480e      	ldr	r0, [pc, #56]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dd8:	f002 ffe2 	bl	8003da0 <HAL_I2C_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000de2:	f000 fc99 	bl	8001718 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000de6:	2100      	movs	r1, #0
 8000de8:	4809      	ldr	r0, [pc, #36]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dea:	f003 fe41 	bl	8004a70 <HAL_I2CEx_ConfigAnalogFilter>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000df4:	f000 fc90 	bl	8001718 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4805      	ldr	r0, [pc, #20]	; (8000e10 <MX_I2C1_Init+0x74>)
 8000dfc:	f003 fe83 	bl	8004b06 <HAL_I2CEx_ConfigDigitalFilter>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000e06:	f000 fc87 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	2000014c 	.word	0x2000014c
 8000e14:	40005400 	.word	0x40005400
 8000e18:	00707cbb 	.word	0x00707cbb

08000e1c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b09e      	sub	sp, #120	; 0x78
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	605a      	str	r2, [r3, #4]
 8000e2e:	609a      	str	r2, [r3, #8]
 8000e30:	60da      	str	r2, [r3, #12]
 8000e32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e34:	f107 0310 	add.w	r3, r7, #16
 8000e38:	2254      	movs	r2, #84	; 0x54
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f009 fa7d 	bl	800a33c <memset>
  if(i2cHandle->Instance==I2C1)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a1e      	ldr	r2, [pc, #120]	; (8000ec0 <HAL_I2C_MspInit+0xa4>)
 8000e48:	4293      	cmp	r3, r2
 8000e4a:	d135      	bne.n	8000eb8 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000e4c:	2340      	movs	r3, #64	; 0x40
 8000e4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e54:	f107 0310 	add.w	r3, r7, #16
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f004 fd4d 	bl	80058f8 <HAL_RCCEx_PeriphCLKConfig>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000e64:	f000 fc58 	bl	8001718 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b16      	ldr	r3, [pc, #88]	; (8000ec4 <HAL_I2C_MspInit+0xa8>)
 8000e6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6c:	4a15      	ldr	r2, [pc, #84]	; (8000ec4 <HAL_I2C_MspInit+0xa8>)
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e74:	4b13      	ldr	r3, [pc, #76]	; (8000ec4 <HAL_I2C_MspInit+0xa8>)
 8000e76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e80:	23c0      	movs	r3, #192	; 0xc0
 8000e82:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e84:	2312      	movs	r3, #18
 8000e86:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8c:	2303      	movs	r3, #3
 8000e8e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e90:	2304      	movs	r3, #4
 8000e92:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e94:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480b      	ldr	r0, [pc, #44]	; (8000ec8 <HAL_I2C_MspInit+0xac>)
 8000e9c:	f002 fdcc 	bl	8003a38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea0:	4b08      	ldr	r3, [pc, #32]	; (8000ec4 <HAL_I2C_MspInit+0xa8>)
 8000ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_I2C_MspInit+0xa8>)
 8000ea6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <HAL_I2C_MspInit+0xa8>)
 8000eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000eb8:	bf00      	nop
 8000eba:	3778      	adds	r7, #120	; 0x78
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	40005400 	.word	0x40005400
 8000ec4:	40021000 	.word	0x40021000
 8000ec8:	48000400 	.word	0x48000400

08000ecc <u8g_Delay>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t control = 0;
void u8g_Delay(uint16_t val) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	80fb      	strh	r3, [r7, #6]
    HAL_Delay(val);
 8000ed6:	88fb      	ldrh	r3, [r7, #6]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f001 f993 	bl	8002204 <HAL_Delay>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <u8g_xMicroDelay>:
void u8g_xMicroDelay(uint16_t val) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	4603      	mov	r3, r0
 8000ef0:	80fb      	strh	r3, [r7, #6]
    static uint32_t i, j;
    static uint32_t freq;
    freq = HAL_RCC_GetSysClockFreq() / 1000000;
 8000ef2:	f004 fbdd 	bl	80056b0 <HAL_RCC_GetSysClockFreq>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <u8g_xMicroDelay+0x6c>)
 8000efa:	fba2 2303 	umull	r2, r3, r2, r3
 8000efe:	0c9b      	lsrs	r3, r3, #18
 8000f00:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <u8g_xMicroDelay+0x70>)
 8000f02:	6013      	str	r3, [r2, #0]

    for (i = 0; i < val;) {
 8000f04:	4b15      	ldr	r3, [pc, #84]	; (8000f5c <u8g_xMicroDelay+0x74>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	e018      	b.n	8000f3e <u8g_xMicroDelay+0x56>
        for (j = 0; j < freq; ++j) {
 8000f0c:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <u8g_xMicroDelay+0x78>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	e009      	b.n	8000f28 <u8g_xMicroDelay+0x40>
            ++j;
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <u8g_xMicroDelay+0x78>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	4a11      	ldr	r2, [pc, #68]	; (8000f60 <u8g_xMicroDelay+0x78>)
 8000f1c:	6013      	str	r3, [r2, #0]
        for (j = 0; j < freq; ++j) {
 8000f1e:	4b10      	ldr	r3, [pc, #64]	; (8000f60 <u8g_xMicroDelay+0x78>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	3301      	adds	r3, #1
 8000f24:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <u8g_xMicroDelay+0x78>)
 8000f26:	6013      	str	r3, [r2, #0]
 8000f28:	4b0d      	ldr	r3, [pc, #52]	; (8000f60 <u8g_xMicroDelay+0x78>)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <u8g_xMicroDelay+0x70>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d3ef      	bcc.n	8000f14 <u8g_xMicroDelay+0x2c>
        }
        ++i;
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <u8g_xMicroDelay+0x74>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	3301      	adds	r3, #1
 8000f3a:	4a08      	ldr	r2, [pc, #32]	; (8000f5c <u8g_xMicroDelay+0x74>)
 8000f3c:	6013      	str	r3, [r2, #0]
    for (i = 0; i < val;) {
 8000f3e:	88fa      	ldrh	r2, [r7, #6]
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <u8g_xMicroDelay+0x74>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d8e1      	bhi.n	8000f0c <u8g_xMicroDelay+0x24>
    }
}
 8000f48:	bf00      	nop
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	431bde83 	.word	0x431bde83
 8000f58:	20000220 	.word	0x20000220
 8000f5c:	20000224 	.word	0x20000224
 8000f60:	20000228 	.word	0x20000228

08000f64 <u8g_MicroDelay>:
void u8g_MicroDelay(void) {
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
    u8g_xMicroDelay(1);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f7ff ffbd 	bl	8000ee8 <u8g_xMicroDelay>
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <u8g_10MicroDelay>:
void u8g_10MicroDelay(void) {
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0
    u8g_xMicroDelay(10);
 8000f76:	200a      	movs	r0, #10
 8000f78:	f7ff ffb6 	bl	8000ee8 <u8g_xMicroDelay>
}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <u8g_com_arm_stm32_sh_i2c_fn>:

uint8_t u8g_com_arm_stm32_sh_i2c_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b088      	sub	sp, #32
 8000f84:	af04      	add	r7, sp, #16
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	72fb      	strb	r3, [r7, #11]
 8000f8e:	4613      	mov	r3, r2
 8000f90:	72bb      	strb	r3, [r7, #10]
    switch (msg) {
 8000f92:	7afb      	ldrb	r3, [r7, #11]
 8000f94:	2b07      	cmp	r3, #7
 8000f96:	d845      	bhi.n	8001024 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>
 8000f98:	a201      	add	r2, pc, #4	; (adr r2, 8000fa0 <u8g_com_arm_stm32_sh_i2c_fn+0x20>)
 8000f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f9e:	bf00      	nop
 8000fa0:	08001025 	.word	0x08001025
 8000fa4:	08000fc1 	.word	0x08000fc1
 8000fa8:	08000fc7 	.word	0x08000fc7
 8000fac:	08001025 	.word	0x08001025
 8000fb0:	08001025 	.word	0x08001025
 8000fb4:	08000fe1 	.word	0x08000fe1
 8000fb8:	08001003 	.word	0x08001003
 8000fbc:	08001003 	.word	0x08001003
    case U8G_COM_MSG_STOP:
        break;

    case U8G_COM_MSG_INIT:
        u8g_MicroDelay();
 8000fc0:	f7ff ffd0 	bl	8000f64 <u8g_MicroDelay>
        break;
 8000fc4:	e02e      	b.n	8001024 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_ADDRESS:
        if (arg_val == 0) {
 8000fc6:	7abb      	ldrb	r3, [r7, #10]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <u8g_com_arm_stm32_sh_i2c_fn+0x54>
            control = 0;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e002      	b.n	8000fda <u8g_com_arm_stm32_sh_i2c_fn+0x5a>
        } else {
            control = 0x40;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8000fd6:	2240      	movs	r2, #64	; 0x40
 8000fd8:	701a      	strb	r2, [r3, #0]
        }
        u8g_10MicroDelay();
 8000fda:	f7ff ffca 	bl	8000f72 <u8g_10MicroDelay>
        break;
 8000fde:	e021      	b.n	8001024 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_WRITE_BYTE: {
        HAL_I2C_Mem_Write(&hi2c1, ADDRESS_TF051<<1, control, 1, &arg_val, 1, 10000);
 8000fe0:	4b13      	ldr	r3, [pc, #76]	; (8001030 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b29a      	uxth	r2, r3
 8000fe6:	f242 7310 	movw	r3, #10000	; 0x2710
 8000fea:	9302      	str	r3, [sp, #8]
 8000fec:	2301      	movs	r3, #1
 8000fee:	9301      	str	r3, [sp, #4]
 8000ff0:	f107 030a 	add.w	r3, r7, #10
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	2178      	movs	r1, #120	; 0x78
 8000ffa:	480e      	ldr	r0, [pc, #56]	; (8001034 <u8g_com_arm_stm32_sh_i2c_fn+0xb4>)
 8000ffc:	f003 f94a 	bl	8004294 <HAL_I2C_Mem_Write>
    }
        break;
 8001000:	e010      	b.n	8001024 <u8g_com_arm_stm32_sh_i2c_fn+0xa4>

    case U8G_COM_MSG_WRITE_SEQ:
    case U8G_COM_MSG_WRITE_SEQ_P: {
        HAL_I2C_Mem_Write(&hi2c1, ADDRESS_TF051<<1, control, 1, arg_ptr, arg_val, 10000);
 8001002:	4b0b      	ldr	r3, [pc, #44]	; (8001030 <u8g_com_arm_stm32_sh_i2c_fn+0xb0>)
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	b29a      	uxth	r2, r3
 8001008:	7abb      	ldrb	r3, [r7, #10]
 800100a:	b29b      	uxth	r3, r3
 800100c:	f242 7110 	movw	r1, #10000	; 0x2710
 8001010:	9102      	str	r1, [sp, #8]
 8001012:	9301      	str	r3, [sp, #4]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2301      	movs	r3, #1
 800101a:	2178      	movs	r1, #120	; 0x78
 800101c:	4805      	ldr	r0, [pc, #20]	; (8001034 <u8g_com_arm_stm32_sh_i2c_fn+0xb4>)
 800101e:	f003 f939 	bl	8004294 <HAL_I2C_Mem_Write>
    }

        break;
 8001022:	bf00      	nop
    }
    return 1;
 8001024:	2301      	movs	r3, #1
}
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	2000021c 	.word	0x2000021c
 8001034:	2000014c 	.word	0x2000014c

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b098      	sub	sp, #96	; 0x60
 800103c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	uint32_t bp1,bp2,bp1_old=0,bp2_old=0;
 800103e:	2300      	movs	r3, #0
 8001040:	657b      	str	r3, [r7, #84]	; 0x54
 8001042:	2300      	movs	r3, #0
 8001044:	653b      	str	r3, [r7, #80]	; 0x50
	uint8_t donnees_Tx_i2c[8];
	uint8_t donnees_Rx_i2c[8];
	char text[50];
	enum State Init_state = OK;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800104c:	f001 f865 	bl	800211a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001050:	f000 fa2a 	bl	80014a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001054:	f7ff fe16 	bl	8000c84 <MX_GPIO_Init>
  MX_DMA_Init();
 8001058:	f7ff fdda 	bl	8000c10 <MX_DMA_Init>
  MX_ADC1_Init();
 800105c:	f7ff fcc0 	bl	80009e0 <MX_ADC1_Init>
  MX_SPI3_Init();
 8001060:	f000 fb60 	bl	8001724 <MX_SPI3_Init>
  MX_TIM1_Init();
 8001064:	f000 fd98 	bl	8001b98 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001068:	f000 ffa6 	bl	8001fb8 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800106c:	f000 fe4e 	bl	8001d0c <MX_TIM2_Init>
  MX_I2C1_Init();
 8001070:	f7ff fe94 	bl	8000d9c <MX_I2C1_Init>
  MX_TIM6_Init();
 8001074:	f000 feba 	bl	8001dec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8001078:	48bc      	ldr	r0, [pc, #752]	; (800136c <main+0x334>)
 800107a:	f005 fd8d 	bl	8006b98 <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 800107e:	2100      	movs	r1, #0
 8001080:	48ba      	ldr	r0, [pc, #744]	; (800136c <main+0x334>)
 8001082:	f005 ffad 	bl	8006fe0 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001086:	2100      	movs	r1, #0
 8001088:	48b9      	ldr	r0, [pc, #740]	; (8001370 <main+0x338>)
 800108a:	f005 fe69 	bl	8006d60 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800108e:	210c      	movs	r1, #12
 8001090:	48b7      	ldr	r0, [pc, #732]	; (8001370 <main+0x338>)
 8001092:	f005 fe65 	bl	8006d60 <HAL_TIM_PWM_Start>


  // Buzzer starting sequence (Pirate des caraibes)
  buzzer_start();
 8001096:	f7ff fbf5 	bl	8000884 <buzzer_start>
  buzzer_gamme();
 800109a:	f7ff fc07 	bl	80008ac <buzzer_gamme>

  // Initialization of the IMU sensor
  Init_state = bno055_init();
 800109e:	f7ff fa65 	bl	800056c <bno055_init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if(Init_state == KO){
 80010a8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d11c      	bne.n	80010ea <main+0xb2>
	  u8g_FirstPage(&u8g);
 80010b0:	48b0      	ldr	r0, [pc, #704]	; (8001374 <main+0x33c>)
 80010b2:	f008 fd68 	bl	8009b86 <u8g_FirstPage>
		  do {
			  u8g_SetFont(&u8g, u8g_font_profont12);
 80010b6:	49b0      	ldr	r1, [pc, #704]	; (8001378 <main+0x340>)
 80010b8:	48ae      	ldr	r0, [pc, #696]	; (8001374 <main+0x33c>)
 80010ba:	f008 fbe1 	bl	8009880 <u8g_SetFont>
			  u8g_DrawStr(&u8g, 0, 24, "Sorbonne Bolide 1");
 80010be:	4baf      	ldr	r3, [pc, #700]	; (800137c <main+0x344>)
 80010c0:	2218      	movs	r2, #24
 80010c2:	2100      	movs	r1, #0
 80010c4:	48ab      	ldr	r0, [pc, #684]	; (8001374 <main+0x33c>)
 80010c6:	f008 fb15 	bl	80096f4 <u8g_DrawStr>
			  u8g_DrawStr(&u8g, 0, 36, "!!! Bad Init IMU !!!");
 80010ca:	4bad      	ldr	r3, [pc, #692]	; (8001380 <main+0x348>)
 80010cc:	2224      	movs	r2, #36	; 0x24
 80010ce:	2100      	movs	r1, #0
 80010d0:	48a8      	ldr	r0, [pc, #672]	; (8001374 <main+0x33c>)
 80010d2:	f008 fb0f 	bl	80096f4 <u8g_DrawStr>
		     } while (u8g_NextPage(&u8g));
 80010d6:	48a7      	ldr	r0, [pc, #668]	; (8001374 <main+0x33c>)
 80010d8:	f008 fd63 	bl	8009ba2 <u8g_NextPage>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1e9      	bne.n	80010b6 <main+0x7e>
		  HAL_Delay(3000);
 80010e2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80010e6:	f001 f88d 	bl	8002204 <HAL_Delay>
  	  }

  // Initialization of the screen
  u8g_InitComFn(&u8g, &u8g_dev_sh1106_128x64_i2c, u8g_com_arm_stm32_sh_i2c_fn);
 80010ea:	4aa6      	ldr	r2, [pc, #664]	; (8001384 <main+0x34c>)
 80010ec:	49a6      	ldr	r1, [pc, #664]	; (8001388 <main+0x350>)
 80010ee:	48a1      	ldr	r0, [pc, #644]	; (8001374 <main+0x33c>)
 80010f0:	f008 fd31 	bl	8009b56 <u8g_InitComFn>
  u8g_Begin(&u8g);
 80010f4:	489f      	ldr	r0, [pc, #636]	; (8001374 <main+0x33c>)
 80010f6:	f008 fd17 	bl	8009b28 <u8g_Begin>

  if(Init_state == OK){
 80010fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d11c      	bne.n	800113c <main+0x104>
		u8g_FirstPage(&u8g);
 8001102:	489c      	ldr	r0, [pc, #624]	; (8001374 <main+0x33c>)
 8001104:	f008 fd3f 	bl	8009b86 <u8g_FirstPage>
		  do {
			  u8g_SetFont(&u8g, u8g_font_profont12);
 8001108:	499b      	ldr	r1, [pc, #620]	; (8001378 <main+0x340>)
 800110a:	489a      	ldr	r0, [pc, #616]	; (8001374 <main+0x33c>)
 800110c:	f008 fbb8 	bl	8009880 <u8g_SetFont>
			  u8g_DrawStr(&u8g, 0, 24, "Sorbonne Bolide 1");
 8001110:	4b9a      	ldr	r3, [pc, #616]	; (800137c <main+0x344>)
 8001112:	2218      	movs	r2, #24
 8001114:	2100      	movs	r1, #0
 8001116:	4897      	ldr	r0, [pc, #604]	; (8001374 <main+0x33c>)
 8001118:	f008 faec 	bl	80096f4 <u8g_DrawStr>
			  u8g_DrawStr(&u8g, 0, 36, "Initialisation OK");
 800111c:	4b9b      	ldr	r3, [pc, #620]	; (800138c <main+0x354>)
 800111e:	2224      	movs	r2, #36	; 0x24
 8001120:	2100      	movs	r1, #0
 8001122:	4894      	ldr	r0, [pc, #592]	; (8001374 <main+0x33c>)
 8001124:	f008 fae6 	bl	80096f4 <u8g_DrawStr>
		  } while (u8g_NextPage(&u8g));
 8001128:	4892      	ldr	r0, [pc, #584]	; (8001374 <main+0x33c>)
 800112a:	f008 fd3a 	bl	8009ba2 <u8g_NextPage>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1e9      	bne.n	8001108 <main+0xd0>
		HAL_Delay(3000);
 8001134:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001138:	f001 f864 	bl	8002204 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //démarrage de la conversion ADC des 3 canaux
	  HAL_ADC_Start_DMA(&hadc1, lectures_ADC, 3);
 800113c:	2203      	movs	r2, #3
 800113e:	4994      	ldr	r1, [pc, #592]	; (8001390 <main+0x358>)
 8001140:	4894      	ldr	r0, [pc, #592]	; (8001394 <main+0x35c>)
 8001142:	f001 fb93 	bl	800286c <HAL_ADC_Start_DMA>

	  //lecture des boutons
	  bp1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8001146:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800114a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800114e:	f002 fddd 	bl	8003d0c <HAL_GPIO_ReadPin>
 8001152:	4603      	mov	r3, r0
 8001154:	64bb      	str	r3, [r7, #72]	; 0x48
	  bp2 = HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin);
 8001156:	2101      	movs	r1, #1
 8001158:	488f      	ldr	r0, [pc, #572]	; (8001398 <main+0x360>)
 800115a:	f002 fdd7 	bl	8003d0c <HAL_GPIO_ReadPin>
 800115e:	4603      	mov	r3, r0
 8001160:	647b      	str	r3, [r7, #68]	; 0x44

	  //détection front descendant sur bp1
	  if((bp1 == BP_ENFONCE) && (bp1_old == BP_RELACHE))
 8001162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001164:	2b00      	cmp	r3, #0
 8001166:	d10c      	bne.n	8001182 <main+0x14a>
 8001168:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800116a:	2b01      	cmp	r3, #1
 800116c:	d109      	bne.n	8001182 <main+0x14a>
	  {
		  buzzer_start_frequency_Hz(1760);
 800116e:	ed9f 0a8b 	vldr	s0, [pc, #556]	; 800139c <main+0x364>
 8001172:	f7ff fb4f 	bl	8000814 <buzzer_start_frequency_Hz>
		  HAL_Delay(500);
 8001176:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800117a:	f001 f843 	bl	8002204 <HAL_Delay>
		  buzzer_stop();
 800117e:	f7ff fb8b 	bl	8000898 <buzzer_stop>
	  }

	  //détection front descendant sur bp2
	  if((bp2 == BP_ENFONCE) && (bp2_old == BP_RELACHE))
 8001182:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001184:	2b00      	cmp	r3, #0
 8001186:	d107      	bne.n	8001198 <main+0x160>
 8001188:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800118a:	2b01      	cmp	r3, #1
 800118c:	d104      	bne.n	8001198 <main+0x160>
	  {
		  //changement d'état de la Led4
		  HAL_GPIO_TogglePin(LED4_GPIO_Port, LED4_Pin);
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001194:	f002 fdea 	bl	8003d6c <HAL_GPIO_TogglePin>
	  }
	  //lecture ultrason
	donnees_Tx_i2c[0]=0x02;
 8001198:	2302      	movs	r3, #2
 800119a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800119e:	bf00      	nop
 80011a0:	487f      	ldr	r0, [pc, #508]	; (80013a0 <main+0x368>)
 80011a2:	f003 f98b 	bl	80044bc <HAL_I2C_GetState>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b20      	cmp	r3, #32
 80011aa:	d1f9      	bne.n	80011a0 <main+0x168>
	HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 1, 1000);
 80011ac:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80011b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	2301      	movs	r3, #1
 80011b8:	21e0      	movs	r1, #224	; 0xe0
 80011ba:	4879      	ldr	r0, [pc, #484]	; (80013a0 <main+0x368>)
 80011bc:	f002 fe80 	bl	8003ec0 <HAL_I2C_Master_Transmit>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80011c0:	bf00      	nop
 80011c2:	4877      	ldr	r0, [pc, #476]	; (80013a0 <main+0x368>)
 80011c4:	f003 f97a 	bl	80044bc <HAL_I2C_GetState>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b20      	cmp	r3, #32
 80011cc:	d1f9      	bne.n	80011c2 <main+0x18a>
	HAL_I2C_Master_Receive(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Rx_i2c, 2, 1);
 80011ce:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80011d2:	2301      	movs	r3, #1
 80011d4:	9300      	str	r3, [sp, #0]
 80011d6:	2302      	movs	r3, #2
 80011d8:	21e0      	movs	r1, #224	; 0xe0
 80011da:	4871      	ldr	r0, [pc, #452]	; (80013a0 <main+0x368>)
 80011dc:	f002 ff64 	bl	80040a8 <HAL_I2C_Master_Receive>
	distance_US = (uint16_t)(donnees_Rx_i2c[0]<<8) + donnees_Rx_i2c[1];
 80011e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	021b      	lsls	r3, r3, #8
 80011e8:	b29a      	uxth	r2, r3
 80011ea:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80011ee:	b29b      	uxth	r3, r3
 80011f0:	4413      	add	r3, r2
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	b21a      	sxth	r2, r3
 80011f6:	4b6b      	ldr	r3, [pc, #428]	; (80013a4 <main+0x36c>)
 80011f8:	801a      	strh	r2, [r3, #0]

	  roll = bno055_lecture_16bits(EULER_ROLL_16bits);
 80011fa:	201c      	movs	r0, #28
 80011fc:	f7ff fad2 	bl	80007a4 <bno055_lecture_16bits>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	4b68      	ldr	r3, [pc, #416]	; (80013a8 <main+0x370>)
 8001206:	801a      	strh	r2, [r3, #0]
	  yaw = bno055_lecture_16bits(EULER_YAW_16bits);
 8001208:	201a      	movs	r0, #26
 800120a:	f7ff facb 	bl	80007a4 <bno055_lecture_16bits>
 800120e:	4603      	mov	r3, r0
 8001210:	461a      	mov	r2, r3
 8001212:	4b66      	ldr	r3, [pc, #408]	; (80013ac <main+0x374>)
 8001214:	801a      	strh	r2, [r3, #0]
	  pitch = bno055_lecture_16bits(EULER_PITCH_16bits);
 8001216:	201e      	movs	r0, #30
 8001218:	f7ff fac4 	bl	80007a4 <bno055_lecture_16bits>
 800121c:	4603      	mov	r3, r0
 800121e:	461a      	mov	r2, r3
 8001220:	4b63      	ldr	r3, [pc, #396]	; (80013b0 <main+0x378>)
 8001222:	801a      	strh	r2, [r3, #0]

	  acc_x = bno055_lecture_16bits(ACC_X_16bits);
 8001224:	2008      	movs	r0, #8
 8001226:	f7ff fabd 	bl	80007a4 <bno055_lecture_16bits>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	4b61      	ldr	r3, [pc, #388]	; (80013b4 <main+0x37c>)
 8001230:	801a      	strh	r2, [r3, #0]
	  acc_y = bno055_lecture_16bits(ACC_Y_16bits);
 8001232:	200a      	movs	r0, #10
 8001234:	f7ff fab6 	bl	80007a4 <bno055_lecture_16bits>
 8001238:	4603      	mov	r3, r0
 800123a:	461a      	mov	r2, r3
 800123c:	4b5e      	ldr	r3, [pc, #376]	; (80013b8 <main+0x380>)
 800123e:	801a      	strh	r2, [r3, #0]

	  lia_x = bno055_lecture_16bits(LIA_X_16bits);
 8001240:	2028      	movs	r0, #40	; 0x28
 8001242:	f7ff faaf 	bl	80007a4 <bno055_lecture_16bits>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	4b5c      	ldr	r3, [pc, #368]	; (80013bc <main+0x384>)
 800124c:	801a      	strh	r2, [r3, #0]
	  lia_y = bno055_lecture_16bits(LIA_Y_16bits);
 800124e:	202a      	movs	r0, #42	; 0x2a
 8001250:	f7ff faa8 	bl	80007a4 <bno055_lecture_16bits>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b59      	ldr	r3, [pc, #356]	; (80013c0 <main+0x388>)
 800125a:	801a      	strh	r2, [r3, #0]

	  // si il n'y a pas eu de lecture de la vitesse récemment
	  if(drapeau==0)
 800125c:	4b59      	ldr	r3, [pc, #356]	; (80013c4 <main+0x38c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d106      	bne.n	8001272 <main+0x23a>
	  {
		  vitesse_mesuree_mm_s = 0;
 8001264:	4b58      	ldr	r3, [pc, #352]	; (80013c8 <main+0x390>)
 8001266:	2200      	movs	r2, #0
 8001268:	801a      	strh	r2, [r3, #0]
		  vitesse_mesuree_m_s = 0;
 800126a:	4b58      	ldr	r3, [pc, #352]	; (80013cc <main+0x394>)
 800126c:	f04f 0200 	mov.w	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
	  }
	  drapeau = 0;
 8001272:	4b54      	ldr	r3, [pc, #336]	; (80013c4 <main+0x38c>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

	  u8g_FirstPage(&u8g);
 8001278:	483e      	ldr	r0, [pc, #248]	; (8001374 <main+0x33c>)
 800127a:	f008 fc84 	bl	8009b86 <u8g_FirstPage>
		do {
			u8g_SetFont(&u8g, u8g_font_profont12);
 800127e:	493e      	ldr	r1, [pc, #248]	; (8001378 <main+0x340>)
 8001280:	483c      	ldr	r0, [pc, #240]	; (8001374 <main+0x33c>)
 8001282:	f008 fafd 	bl	8009880 <u8g_SetFont>
			sprintf(text,"Sorbonne Bolide 1");
 8001286:	463b      	mov	r3, r7
 8001288:	493c      	ldr	r1, [pc, #240]	; (800137c <main+0x344>)
 800128a:	4618      	mov	r0, r3
 800128c:	f008 ff62 	bl	800a154 <siprintf>
			u8g_DrawStr(&u8g, 0, 12,  text);
 8001290:	463b      	mov	r3, r7
 8001292:	220c      	movs	r2, #12
 8001294:	2100      	movs	r1, #0
 8001296:	4837      	ldr	r0, [pc, #220]	; (8001374 <main+0x33c>)
 8001298:	f008 fa2c 	bl	80096f4 <u8g_DrawStr>
			sprintf(text,"vitesse %5u mm/s", (unsigned int)vitesse_mesuree_mm_s);
 800129c:	4b4a      	ldr	r3, [pc, #296]	; (80013c8 <main+0x390>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	461a      	mov	r2, r3
 80012a2:	463b      	mov	r3, r7
 80012a4:	494a      	ldr	r1, [pc, #296]	; (80013d0 <main+0x398>)
 80012a6:	4618      	mov	r0, r3
 80012a8:	f008 ff54 	bl	800a154 <siprintf>
			u8g_DrawStr(&u8g, 0, 24,  text);
 80012ac:	463b      	mov	r3, r7
 80012ae:	2218      	movs	r2, #24
 80012b0:	2100      	movs	r1, #0
 80012b2:	4830      	ldr	r0, [pc, #192]	; (8001374 <main+0x33c>)
 80012b4:	f008 fa1e 	bl	80096f4 <u8g_DrawStr>
			sprintf(text,"yaw_RAW : %5d", yaw);
 80012b8:	4b3c      	ldr	r3, [pc, #240]	; (80013ac <main+0x374>)
 80012ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012be:	461a      	mov	r2, r3
 80012c0:	463b      	mov	r3, r7
 80012c2:	4944      	ldr	r1, [pc, #272]	; (80013d4 <main+0x39c>)
 80012c4:	4618      	mov	r0, r3
 80012c6:	f008 ff45 	bl	800a154 <siprintf>
			u8g_DrawStr(&u8g, 0, 36,  text);
 80012ca:	463b      	mov	r3, r7
 80012cc:	2224      	movs	r2, #36	; 0x24
 80012ce:	2100      	movs	r1, #0
 80012d0:	4828      	ldr	r0, [pc, #160]	; (8001374 <main+0x33c>)
 80012d2:	f008 fa0f 	bl	80096f4 <u8g_DrawStr>
			//sprintf(text,"Sonar : %5d cm", distance_US);
			//u8g_DrawStr(&u8g, 0, 36,  text);
			sprintf(text,"IR gauche : %5u", (unsigned int)lectures_ADC[0]);
 80012d6:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <main+0x358>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	463b      	mov	r3, r7
 80012dc:	493e      	ldr	r1, [pc, #248]	; (80013d8 <main+0x3a0>)
 80012de:	4618      	mov	r0, r3
 80012e0:	f008 ff38 	bl	800a154 <siprintf>
			u8g_DrawStr(&u8g, 0, 48,  text);
 80012e4:	463b      	mov	r3, r7
 80012e6:	2230      	movs	r2, #48	; 0x30
 80012e8:	2100      	movs	r1, #0
 80012ea:	4822      	ldr	r0, [pc, #136]	; (8001374 <main+0x33c>)
 80012ec:	f008 fa02 	bl	80096f4 <u8g_DrawStr>
			sprintf(text,"IR droit : %5u", (unsigned int)lectures_ADC[1]);
 80012f0:	4b27      	ldr	r3, [pc, #156]	; (8001390 <main+0x358>)
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	463b      	mov	r3, r7
 80012f6:	4939      	ldr	r1, [pc, #228]	; (80013dc <main+0x3a4>)
 80012f8:	4618      	mov	r0, r3
 80012fa:	f008 ff2b 	bl	800a154 <siprintf>
			u8g_DrawStr(&u8g, 0, 60,  text);
 80012fe:	463b      	mov	r3, r7
 8001300:	223c      	movs	r2, #60	; 0x3c
 8001302:	2100      	movs	r1, #0
 8001304:	481b      	ldr	r0, [pc, #108]	; (8001374 <main+0x33c>)
 8001306:	f008 f9f5 	bl	80096f4 <u8g_DrawStr>
		} while (u8g_NextPage(&u8g));
 800130a:	481a      	ldr	r0, [pc, #104]	; (8001374 <main+0x33c>)
 800130c:	f008 fc49 	bl	8009ba2 <u8g_NextPage>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d1b3      	bne.n	800127e <main+0x246>

	  //Demande de lecture ultrason
	  donnees_Tx_i2c[0]=0x00;
 8001316:	2300      	movs	r3, #0
 8001318:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	  donnees_Tx_i2c[1]=0x51;
 800131c:	2351      	movs	r3, #81	; 0x51
 800131e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
	  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8001322:	bf00      	nop
 8001324:	481e      	ldr	r0, [pc, #120]	; (80013a0 <main+0x368>)
 8001326:	f003 f8c9 	bl	80044bc <HAL_I2C_GetState>
 800132a:	4603      	mov	r3, r0
 800132c:	2b20      	cmp	r3, #32
 800132e:	d1f9      	bne.n	8001324 <main+0x2ec>
	  HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)ADRES_SRF10<<1, donnees_Tx_i2c, 2, 1000);
 8001330:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001334:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2302      	movs	r3, #2
 800133c:	21e0      	movs	r1, #224	; 0xe0
 800133e:	4818      	ldr	r0, [pc, #96]	; (80013a0 <main+0x368>)
 8001340:	f002 fdbe 	bl	8003ec0 <HAL_I2C_Master_Transmit>

	  HAL_Delay(100);
 8001344:	2064      	movs	r0, #100	; 0x64
 8001346:	f000 ff5d 	bl	8002204 <HAL_Delay>

	  //attente de la fin de la conversion ADC, si jamais ce n'est pas encore fini
	  //HAL_ADC_PollForConversion(&hadc1, 1);

	  //sauvegarde des valeurs de bp1 et bp2 pour la détection des fronts
	  bp1_old = bp1;
 800134a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800134c:	657b      	str	r3, [r7, #84]	; 0x54
	  bp2_old = bp2;
 800134e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001350:	653b      	str	r3, [r7, #80]	; 0x50

	  // Remplir le buffer de transmission avec les données des capteurs
	  //SPI_TxBuffer_data[0] = (uint8_t)(roll & 0xFF);           // Octet de poids faible de roll
	  //SPI_TxBuffer_data[1] = (uint8_t)((roll >> 8) & 0xFF);    // Octet de poids fort de roll

	  SPI_TxBuffer_data[0] = (uint8_t)(yaw & 0xFF);            // Octet de poids faible de yaw
 8001352:	4b16      	ldr	r3, [pc, #88]	; (80013ac <main+0x374>)
 8001354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <main+0x3a8>)
 800135c:	701a      	strb	r2, [r3, #0]
	  SPI_TxBuffer_data[1] = (uint8_t)((yaw >> 8) & 0xFF);     // Octet de poids fort de yaw
 800135e:	4b13      	ldr	r3, [pc, #76]	; (80013ac <main+0x374>)
 8001360:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001364:	121b      	asrs	r3, r3, #8
 8001366:	b21b      	sxth	r3, r3
 8001368:	b2da      	uxtb	r2, r3
 800136a:	e03b      	b.n	80013e4 <main+0x3ac>
 800136c:	200003c4 	.word	0x200003c4
 8001370:	20000378 	.word	0x20000378
 8001374:	200001e0 	.word	0x200001e0
 8001378:	0800b4a8 	.word	0x0800b4a8
 800137c:	0800b388 	.word	0x0800b388
 8001380:	0800b3b0 	.word	0x0800b3b0
 8001384:	08000f81 	.word	0x08000f81
 8001388:	2000001c 	.word	0x2000001c
 800138c:	0800b39c 	.word	0x0800b39c
 8001390:	200001a8 	.word	0x200001a8
 8001394:	200000a0 	.word	0x200000a0
 8001398:	48000400 	.word	0x48000400
 800139c:	44dc0000 	.word	0x44dc0000
 80013a0:	2000014c 	.word	0x2000014c
 80013a4:	200001d2 	.word	0x200001d2
 80013a8:	200001cc 	.word	0x200001cc
 80013ac:	200001ce 	.word	0x200001ce
 80013b0:	200001d0 	.word	0x200001d0
 80013b4:	200001d4 	.word	0x200001d4
 80013b8:	200001d6 	.word	0x200001d6
 80013bc:	200001d8 	.word	0x200001d8
 80013c0:	200001da 	.word	0x200001da
 80013c4:	200001dc 	.word	0x200001dc
 80013c8:	200001a4 	.word	0x200001a4
 80013cc:	200001a0 	.word	0x200001a0
 80013d0:	0800b3c8 	.word	0x0800b3c8
 80013d4:	0800b3dc 	.word	0x0800b3dc
 80013d8:	0800b3ec 	.word	0x0800b3ec
 80013dc:	0800b3fc 	.word	0x0800b3fc
 80013e0:	200001b4 	.word	0x200001b4
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <main+0x450>)
 80013e6:	705a      	strb	r2, [r3, #1]

	  //SPI_TxBuffer_data[4] = (uint8_t)(pitch & 0xFF);          // Octet de poids faible de pitch
	  //SPI_TxBuffer_data[5] = (uint8_t)((pitch >> 8) & 0xFF);   // Octet de poids fort de pitch

	  SPI_TxBuffer_data[2] = (uint8_t)(lia_y & 0xFF);    // Octet de poids faible de acceleration lineaire
 80013e8:	4b28      	ldr	r3, [pc, #160]	; (800148c <main+0x454>)
 80013ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	4b25      	ldr	r3, [pc, #148]	; (8001488 <main+0x450>)
 80013f2:	709a      	strb	r2, [r3, #2]
	  SPI_TxBuffer_data[3] = (uint8_t)((lia_y >> 8) & 0xFF); // Octet de poids fort de acceleration lineaire
 80013f4:	4b25      	ldr	r3, [pc, #148]	; (800148c <main+0x454>)
 80013f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fa:	121b      	asrs	r3, r3, #8
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b21      	ldr	r3, [pc, #132]	; (8001488 <main+0x450>)
 8001402:	70da      	strb	r2, [r3, #3]

	  SPI_TxBuffer_data[4] = (uint8_t)(vitesse_mesuree_mm_s & 0xFF);    // Octet de poids faible de vitesse_mesuree_mm_s
 8001404:	4b22      	ldr	r3, [pc, #136]	; (8001490 <main+0x458>)
 8001406:	881b      	ldrh	r3, [r3, #0]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <main+0x450>)
 800140c:	711a      	strb	r2, [r3, #4]
	  SPI_TxBuffer_data[5] = (uint8_t)((vitesse_mesuree_mm_s >> 8) & 0xFF); // Octet de poids fort de vitesse_mesuree_mm_s
 800140e:	4b20      	ldr	r3, [pc, #128]	; (8001490 <main+0x458>)
 8001410:	881b      	ldrh	r3, [r3, #0]
 8001412:	0a1b      	lsrs	r3, r3, #8
 8001414:	b29b      	uxth	r3, r3
 8001416:	b2da      	uxtb	r2, r3
 8001418:	4b1b      	ldr	r3, [pc, #108]	; (8001488 <main+0x450>)
 800141a:	715a      	strb	r2, [r3, #5]

	  SPI_TxBuffer_data[6] = (uint8_t)(distance_US & 0xFF);    // Octet de poids faible de distance_US
 800141c:	4b1d      	ldr	r3, [pc, #116]	; (8001494 <main+0x45c>)
 800141e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b18      	ldr	r3, [pc, #96]	; (8001488 <main+0x450>)
 8001426:	719a      	strb	r2, [r3, #6]
	  SPI_TxBuffer_data[7] = (uint8_t)((distance_US >> 8) & 0xFF); // Octet de poids fort de distance_US
 8001428:	4b1a      	ldr	r3, [pc, #104]	; (8001494 <main+0x45c>)
 800142a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800142e:	121b      	asrs	r3, r3, #8
 8001430:	b21b      	sxth	r3, r3
 8001432:	b2da      	uxtb	r2, r3
 8001434:	4b14      	ldr	r3, [pc, #80]	; (8001488 <main+0x450>)
 8001436:	71da      	strb	r2, [r3, #7]

	  SPI_TxBuffer_data[8] = (uint8_t)(((uint16_t)(lectures_ADC[0])) & 0xFF);    // Octet de poids faible de l'IR gauche
 8001438:	4b17      	ldr	r3, [pc, #92]	; (8001498 <main+0x460>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	b2da      	uxtb	r2, r3
 800143e:	4b12      	ldr	r3, [pc, #72]	; (8001488 <main+0x450>)
 8001440:	721a      	strb	r2, [r3, #8]
	  SPI_TxBuffer_data[9] = (uint8_t)((((uint16_t)(lectures_ADC[0])) >> 8) & 0xFF); // Octet de poids fort de l'IR gauche
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <main+0x460>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	b29b      	uxth	r3, r3
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	b29b      	uxth	r3, r3
 800144c:	b2da      	uxtb	r2, r3
 800144e:	4b0e      	ldr	r3, [pc, #56]	; (8001488 <main+0x450>)
 8001450:	725a      	strb	r2, [r3, #9]

	  SPI_TxBuffer_data[10] = (uint8_t)(((uint16_t)(lectures_ADC[1])) & 0xFF);    // Octet de poids faible de l'IR droit
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <main+0x460>)
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	b2da      	uxtb	r2, r3
 8001458:	4b0b      	ldr	r3, [pc, #44]	; (8001488 <main+0x450>)
 800145a:	729a      	strb	r2, [r3, #10]
	  SPI_TxBuffer_data[11] = (uint8_t)((((uint16_t)(lectures_ADC[1])) >> 8) & 0xFF); // Octet de poids fort de l'IR droit
 800145c:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <main+0x460>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	b29b      	uxth	r3, r3
 8001462:	0a1b      	lsrs	r3, r3, #8
 8001464:	b29b      	uxth	r3, r3
 8001466:	b2da      	uxtb	r2, r3
 8001468:	4b07      	ldr	r3, [pc, #28]	; (8001488 <main+0x450>)
 800146a:	72da      	strb	r2, [r3, #11]


	  if(HAL_SPI_TransmitReceive_DMA(&hspi3, (uint8_t *)SPI_TxBuffer_data, (uint8_t *)SPI_RxBuffer, 12) != HAL_OK)
 800146c:	230c      	movs	r3, #12
 800146e:	4a0b      	ldr	r2, [pc, #44]	; (800149c <main+0x464>)
 8001470:	4905      	ldr	r1, [pc, #20]	; (8001488 <main+0x450>)
 8001472:	480b      	ldr	r0, [pc, #44]	; (80014a0 <main+0x468>)
 8001474:	f004 fddc 	bl	8006030 <HAL_SPI_TransmitReceive_DMA>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	f43f ae5e 	beq.w	800113c <main+0x104>
	  	  {
		  	  printf("erreur SPI");
 8001480:	4808      	ldr	r0, [pc, #32]	; (80014a4 <main+0x46c>)
 8001482:	f008 ff49 	bl	800a318 <iprintf>
	  HAL_ADC_Start_DMA(&hadc1, lectures_ADC, 3);
 8001486:	e659      	b.n	800113c <main+0x104>
 8001488:	200001b4 	.word	0x200001b4
 800148c:	200001da 	.word	0x200001da
 8001490:	200001a4 	.word	0x200001a4
 8001494:	200001d2 	.word	0x200001d2
 8001498:	200001a8 	.word	0x200001a8
 800149c:	200001c0 	.word	0x200001c0
 80014a0:	20000280 	.word	0x20000280
 80014a4:	0800b40c 	.word	0x0800b40c

080014a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b096      	sub	sp, #88	; 0x58
 80014ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ae:	f107 0314 	add.w	r3, r7, #20
 80014b2:	2244      	movs	r2, #68	; 0x44
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f008 ff40 	bl	800a33c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014bc:	463b      	mov	r3, r7
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	605a      	str	r2, [r3, #4]
 80014c4:	609a      	str	r2, [r3, #8]
 80014c6:	60da      	str	r2, [r3, #12]
 80014c8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80014ca:	f44f 7000 	mov.w	r0, #512	; 0x200
 80014ce:	f003 fb85 	bl	8004bdc <HAL_PWREx_ControlVoltageScaling>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80014d8:	f000 f91e 	bl	8001718 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014dc:	f003 fb60 	bl	8004ba0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80014e0:	4b21      	ldr	r3, [pc, #132]	; (8001568 <SystemClock_Config+0xc0>)
 80014e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014e6:	4a20      	ldr	r2, [pc, #128]	; (8001568 <SystemClock_Config+0xc0>)
 80014e8:	f023 0318 	bic.w	r3, r3, #24
 80014ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80014f0:	2314      	movs	r3, #20
 80014f2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80014f4:	2301      	movs	r3, #1
 80014f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80014f8:	2301      	movs	r3, #1
 80014fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001500:	2360      	movs	r3, #96	; 0x60
 8001502:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001504:	2302      	movs	r3, #2
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001508:	2301      	movs	r3, #1
 800150a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800150c:	2301      	movs	r3, #1
 800150e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001510:	2310      	movs	r3, #16
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001514:	2307      	movs	r3, #7
 8001516:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001518:	2302      	movs	r3, #2
 800151a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800151c:	2302      	movs	r3, #2
 800151e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4618      	mov	r0, r3
 8001526:	f003 fbaf 	bl	8004c88 <HAL_RCC_OscConfig>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001530:	f000 f8f2 	bl	8001718 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001534:	230f      	movs	r3, #15
 8001536:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001538:	2303      	movs	r3, #3
 800153a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001540:	2300      	movs	r3, #0
 8001542:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001544:	2300      	movs	r3, #0
 8001546:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001548:	463b      	mov	r3, r7
 800154a:	2101      	movs	r1, #1
 800154c:	4618      	mov	r0, r3
 800154e:	f003 ffaf 	bl	80054b0 <HAL_RCC_ClockConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001558:	f000 f8de 	bl	8001718 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800155c:	f004 fbc2 	bl	8005ce4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001560:	bf00      	nop
 8001562:	3758      	adds	r7, #88	; 0x58
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40021000 	.word	0x40021000

0800156c <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef* htim)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
	static uint32_t mesure_precedente_us=0, mesure_us, indice=0, i;
	static uint32_t tableau_intervalles_us[16]={};
	static float coefficient_distance_par_intervalle_us = DISTANCE_1_TOUR_AXE_TRANSMISSION_MM *1000 / 16.0;
	static uint32_t somme_intervalles_us = 0;
	uint32_t nb_intervalles=0;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin,1);
 8001578:	2201      	movs	r2, #1
 800157a:	2104      	movs	r1, #4
 800157c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001580:	f002 fbdc 	bl	8003d3c <HAL_GPIO_WritePin>
	mesure_us = __HAL_TIM_GET_COMPARE(&htim2, TIM_CHANNEL_1); // ou TIM2->CCR1
 8001584:	4b50      	ldr	r3, [pc, #320]	; (80016c8 <HAL_TIM_IC_CaptureCallback+0x15c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800158a:	4a50      	ldr	r2, [pc, #320]	; (80016cc <HAL_TIM_IC_CaptureCallback+0x160>)
 800158c:	6013      	str	r3, [r2, #0]
	if((mesure_us-mesure_precedente_us) >= 300) //si mesure cohérente (pas un glitch):
 800158e:	4b4f      	ldr	r3, [pc, #316]	; (80016cc <HAL_TIM_IC_CaptureCallback+0x160>)
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	4b4f      	ldr	r3, [pc, #316]	; (80016d0 <HAL_TIM_IC_CaptureCallback+0x164>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800159c:	f0c0 8090 	bcc.w	80016c0 <HAL_TIM_IC_CaptureCallback+0x154>
	{
		if((mesure_us > (mesure_precedente_us+100000)) || ((mesure_us-100000) > mesure_precedente_us)) //cas d'un nouveau départ
 80015a0:	4b4b      	ldr	r3, [pc, #300]	; (80016d0 <HAL_TIM_IC_CaptureCallback+0x164>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f503 33c3 	add.w	r3, r3, #99840	; 0x18600
 80015a8:	33a0      	adds	r3, #160	; 0xa0
 80015aa:	4a48      	ldr	r2, [pc, #288]	; (80016cc <HAL_TIM_IC_CaptureCallback+0x160>)
 80015ac:	6812      	ldr	r2, [r2, #0]
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d308      	bcc.n	80015c4 <HAL_TIM_IC_CaptureCallback+0x58>
 80015b2:	4b46      	ldr	r3, [pc, #280]	; (80016cc <HAL_TIM_IC_CaptureCallback+0x160>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 80015ba:	3ba0      	subs	r3, #160	; 0xa0
 80015bc:	4a44      	ldr	r2, [pc, #272]	; (80016d0 <HAL_TIM_IC_CaptureCallback+0x164>)
 80015be:	6812      	ldr	r2, [r2, #0]
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d916      	bls.n	80015f2 <HAL_TIM_IC_CaptureCallback+0x86>
		{
			for(indice=0;indice<16;indice++)
 80015c4:	4b43      	ldr	r3, [pc, #268]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x168>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	e00a      	b.n	80015e2 <HAL_TIM_IC_CaptureCallback+0x76>
			{
				tableau_intervalles_us[indice] = 0;
 80015cc:	4b41      	ldr	r3, [pc, #260]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x168>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a41      	ldr	r2, [pc, #260]	; (80016d8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 80015d2:	2100      	movs	r1, #0
 80015d4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			for(indice=0;indice<16;indice++)
 80015d8:	4b3e      	ldr	r3, [pc, #248]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x168>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	3301      	adds	r3, #1
 80015de:	4a3d      	ldr	r2, [pc, #244]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x168>)
 80015e0:	6013      	str	r3, [r2, #0]
 80015e2:	4b3c      	ldr	r3, [pc, #240]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x168>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	2b0f      	cmp	r3, #15
 80015e8:	d9f0      	bls.n	80015cc <HAL_TIM_IC_CaptureCallback+0x60>
			}
			indice=0;
 80015ea:	4b3a      	ldr	r3, [pc, #232]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x168>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	e062      	b.n	80016b8 <HAL_TIM_IC_CaptureCallback+0x14c>
		}
		else //cas où on tourne depuis plus d'un intervalle
		{
			drapeau = 1;
 80015f2:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <HAL_TIM_IC_CaptureCallback+0x170>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	601a      	str	r2, [r3, #0]
			tableau_intervalles_us[indice] = mesure_us - mesure_precedente_us; //on sauvegarde la nouvelle mesure dans le tableau
 80015f8:	4b34      	ldr	r3, [pc, #208]	; (80016cc <HAL_TIM_IC_CaptureCallback+0x160>)
 80015fa:	6819      	ldr	r1, [r3, #0]
 80015fc:	4b34      	ldr	r3, [pc, #208]	; (80016d0 <HAL_TIM_IC_CaptureCallback+0x164>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	1a8a      	subs	r2, r1, r2
 8001606:	4934      	ldr	r1, [pc, #208]	; (80016d8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			//On fait une moyenne sur 10 ms au plus ou 16 valeurs.
			somme_intervalles_us = 0;
 800160c:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <HAL_TIM_IC_CaptureCallback+0x174>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
			i= indice;
 8001612:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a33      	ldr	r2, [pc, #204]	; (80016e4 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001618:	6013      	str	r3, [r2, #0]
			do{
				if(tableau_intervalles_us[i]==0)
 800161a:	4b32      	ldr	r3, [pc, #200]	; (80016e4 <HAL_TIM_IC_CaptureCallback+0x178>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a2e      	ldr	r2, [pc, #184]	; (80016d8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 8001620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d01c      	beq.n	8001662 <HAL_TIM_IC_CaptureCallback+0xf6>
						break;
				somme_intervalles_us += tableau_intervalles_us[i];
 8001628:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <HAL_TIM_IC_CaptureCallback+0x178>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a2a      	ldr	r2, [pc, #168]	; (80016d8 <HAL_TIM_IC_CaptureCallback+0x16c>)
 800162e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001632:	4b2b      	ldr	r3, [pc, #172]	; (80016e0 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4413      	add	r3, r2
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <HAL_TIM_IC_CaptureCallback+0x174>)
 800163a:	6013      	str	r3, [r2, #0]
				i = (i - 1)%16;
 800163c:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <HAL_TIM_IC_CaptureCallback+0x178>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	3b01      	subs	r3, #1
 8001642:	f003 030f 	and.w	r3, r3, #15
 8001646:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <HAL_TIM_IC_CaptureCallback+0x178>)
 8001648:	6013      	str	r3, [r2, #0]
				nb_intervalles++;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	3301      	adds	r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
			}while ((somme_intervalles_us<100000) && (nb_intervalles < 16));
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a24      	ldr	r2, [pc, #144]	; (80016e8 <HAL_TIM_IC_CaptureCallback+0x17c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d804      	bhi.n	8001664 <HAL_TIM_IC_CaptureCallback+0xf8>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	2b0f      	cmp	r3, #15
 800165e:	d9dc      	bls.n	800161a <HAL_TIM_IC_CaptureCallback+0xae>
 8001660:	e000      	b.n	8001664 <HAL_TIM_IC_CaptureCallback+0xf8>
						break;
 8001662:	bf00      	nop
			indice = (indice+1)%16; // on incrémente l'indice avec retour à 0 pour indice = 16
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	f003 030f 	and.w	r3, r3, #15
 800166e:	4a19      	ldr	r2, [pc, #100]	; (80016d4 <HAL_TIM_IC_CaptureCallback+0x168>)
 8001670:	6013      	str	r3, [r2, #0]
			vitesse_mesuree_m_s = coefficient_distance_par_intervalle_us * nb_intervalles / somme_intervalles_us;
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	ee07 3a90 	vmov	s15, r3
 8001678:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800167c:	4b1b      	ldr	r3, [pc, #108]	; (80016ec <HAL_TIM_IC_CaptureCallback+0x180>)
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <HAL_TIM_IC_CaptureCallback+0x174>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	ee07 3a90 	vmov	s15, r3
 800168e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001692:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001696:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_TIM_IC_CaptureCallback+0x184>)
 8001698:	edc3 7a00 	vstr	s15, [r3]
			vitesse_mesuree_mm_s = 1000*vitesse_mesuree_m_s;
 800169c:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <HAL_TIM_IC_CaptureCallback+0x184>)
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80016f4 <HAL_TIM_IC_CaptureCallback+0x188>
 80016a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ae:	ee17 3a90 	vmov	r3, s15
 80016b2:	b29a      	uxth	r2, r3
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <HAL_TIM_IC_CaptureCallback+0x18c>)
 80016b6:	801a      	strh	r2, [r3, #0]
		}
		mesure_precedente_us = mesure_us;
 80016b8:	4b04      	ldr	r3, [pc, #16]	; (80016cc <HAL_TIM_IC_CaptureCallback+0x160>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a04      	ldr	r2, [pc, #16]	; (80016d0 <HAL_TIM_IC_CaptureCallback+0x164>)
 80016be:	6013      	str	r3, [r2, #0]
	}
}
 80016c0:	bf00      	nop
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200003c4 	.word	0x200003c4
 80016cc:	2000022c 	.word	0x2000022c
 80016d0:	20000230 	.word	0x20000230
 80016d4:	20000234 	.word	0x20000234
 80016d8:	20000238 	.word	0x20000238
 80016dc:	200001dc 	.word	0x200001dc
 80016e0:	20000278 	.word	0x20000278
 80016e4:	2000027c 	.word	0x2000027c
 80016e8:	0001869f 	.word	0x0001869f
 80016ec:	20000000 	.word	0x20000000
 80016f0:	200001a0 	.word	0x200001a0
 80016f4:	447a0000 	.word	0x447a0000
 80016f8:	200001a4 	.word	0x200001a4

080016fc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b082      	sub	sp, #8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(BUZZER_GPIO_Port, BUZZER_Pin);
 8001704:	2102      	movs	r1, #2
 8001706:	4803      	ldr	r0, [pc, #12]	; (8001714 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8001708:	f002 fb30 	bl	8003d6c <HAL_GPIO_TogglePin>
}
 800170c:	bf00      	nop
 800170e:	3708      	adds	r7, #8
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	48000400 	.word	0x48000400

08001718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171c:	b672      	cpsid	i
}
 800171e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001720:	e7fe      	b.n	8001720 <Error_Handler+0x8>
	...

08001724 <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi3_tx;
DMA_HandleTypeDef hdma_spi3_rx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

	SPI3->CR1 |= (6<<3);  // BR[2:0] = 101: fPCLK/64, PCLK2 = 32MHz, SPI clk = 5MHz
 8001728:	4b1c      	ldr	r3, [pc, #112]	; (800179c <MX_SPI3_Init+0x78>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1b      	ldr	r2, [pc, #108]	; (800179c <MX_SPI3_Init+0x78>)
 800172e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8001732:	6013      	str	r3, [r2, #0]
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001734:	4b1a      	ldr	r3, [pc, #104]	; (80017a0 <MX_SPI3_Init+0x7c>)
 8001736:	4a19      	ldr	r2, [pc, #100]	; (800179c <MX_SPI3_Init+0x78>)
 8001738:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 800173a:	4b19      	ldr	r3, [pc, #100]	; (80017a0 <MX_SPI3_Init+0x7c>)
 800173c:	2200      	movs	r2, #0
 800173e:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001740:	4b17      	ldr	r3, [pc, #92]	; (80017a0 <MX_SPI3_Init+0x7c>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001746:	4b16      	ldr	r3, [pc, #88]	; (80017a0 <MX_SPI3_Init+0x7c>)
 8001748:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800174c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800174e:	4b14      	ldr	r3, [pc, #80]	; (80017a0 <MX_SPI3_Init+0x7c>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001754:	4b12      	ldr	r3, [pc, #72]	; (80017a0 <MX_SPI3_Init+0x7c>)
 8001756:	2200      	movs	r2, #0
 8001758:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800175a:	4b11      	ldr	r3, [pc, #68]	; (80017a0 <MX_SPI3_Init+0x7c>)
 800175c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001760:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <MX_SPI3_Init+0x7c>)
 8001764:	2200      	movs	r2, #0
 8001766:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001768:	4b0d      	ldr	r3, [pc, #52]	; (80017a0 <MX_SPI3_Init+0x7c>)
 800176a:	2200      	movs	r2, #0
 800176c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800176e:	4b0c      	ldr	r3, [pc, #48]	; (80017a0 <MX_SPI3_Init+0x7c>)
 8001770:	2200      	movs	r2, #0
 8001772:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001774:	4b0a      	ldr	r3, [pc, #40]	; (80017a0 <MX_SPI3_Init+0x7c>)
 8001776:	2207      	movs	r2, #7
 8001778:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800177a:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <MX_SPI3_Init+0x7c>)
 800177c:	2200      	movs	r2, #0
 800177e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001780:	4b07      	ldr	r3, [pc, #28]	; (80017a0 <MX_SPI3_Init+0x7c>)
 8001782:	2200      	movs	r2, #0
 8001784:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001786:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_SPI3_Init+0x7c>)
 8001788:	f004 fbae 	bl	8005ee8 <HAL_SPI_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_SPI3_Init+0x72>
  {
    Error_Handler();
 8001792:	f7ff ffc1 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40003c00 	.word	0x40003c00
 80017a0:	20000280 	.word	0x20000280

080017a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0314 	add.w	r3, r7, #20
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a44      	ldr	r2, [pc, #272]	; (80018d4 <HAL_SPI_MspInit+0x130>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	f040 8082 	bne.w	80018cc <HAL_SPI_MspInit+0x128>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80017c8:	4b43      	ldr	r3, [pc, #268]	; (80018d8 <HAL_SPI_MspInit+0x134>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	4a42      	ldr	r2, [pc, #264]	; (80018d8 <HAL_SPI_MspInit+0x134>)
 80017ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80017d2:	6593      	str	r3, [r2, #88]	; 0x58
 80017d4:	4b40      	ldr	r3, [pc, #256]	; (80018d8 <HAL_SPI_MspInit+0x134>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e0:	4b3d      	ldr	r3, [pc, #244]	; (80018d8 <HAL_SPI_MspInit+0x134>)
 80017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017e4:	4a3c      	ldr	r2, [pc, #240]	; (80018d8 <HAL_SPI_MspInit+0x134>)
 80017e6:	f043 0302 	orr.w	r3, r3, #2
 80017ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ec:	4b3a      	ldr	r3, [pc, #232]	; (80018d8 <HAL_SPI_MspInit+0x134>)
 80017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f0:	f003 0302 	and.w	r3, r3, #2
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80017f8:	2338      	movs	r3, #56	; 0x38
 80017fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001804:	2303      	movs	r3, #3
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001808:	2306      	movs	r3, #6
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4832      	ldr	r0, [pc, #200]	; (80018dc <HAL_SPI_MspInit+0x138>)
 8001814:	f002 f910 	bl	8003a38 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA2_Channel2;
 8001818:	4b31      	ldr	r3, [pc, #196]	; (80018e0 <HAL_SPI_MspInit+0x13c>)
 800181a:	4a32      	ldr	r2, [pc, #200]	; (80018e4 <HAL_SPI_MspInit+0x140>)
 800181c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_3;
 800181e:	4b30      	ldr	r3, [pc, #192]	; (80018e0 <HAL_SPI_MspInit+0x13c>)
 8001820:	2203      	movs	r2, #3
 8001822:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001824:	4b2e      	ldr	r3, [pc, #184]	; (80018e0 <HAL_SPI_MspInit+0x13c>)
 8001826:	2210      	movs	r2, #16
 8001828:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800182a:	4b2d      	ldr	r3, [pc, #180]	; (80018e0 <HAL_SPI_MspInit+0x13c>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001830:	4b2b      	ldr	r3, [pc, #172]	; (80018e0 <HAL_SPI_MspInit+0x13c>)
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_SPI_MspInit+0x13c>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800183c:	4b28      	ldr	r3, [pc, #160]	; (80018e0 <HAL_SPI_MspInit+0x13c>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 8001842:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_SPI_MspInit+0x13c>)
 8001844:	2200      	movs	r2, #0
 8001846:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001848:	4b25      	ldr	r3, [pc, #148]	; (80018e0 <HAL_SPI_MspInit+0x13c>)
 800184a:	2200      	movs	r2, #0
 800184c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 800184e:	4824      	ldr	r0, [pc, #144]	; (80018e0 <HAL_SPI_MspInit+0x13c>)
 8001850:	f001 feba 	bl	80035c8 <HAL_DMA_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_SPI_MspInit+0xba>
    {
      Error_Handler();
 800185a:	f7ff ff5d 	bl	8001718 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi3_tx);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4a1f      	ldr	r2, [pc, #124]	; (80018e0 <HAL_SPI_MspInit+0x13c>)
 8001862:	655a      	str	r2, [r3, #84]	; 0x54
 8001864:	4a1e      	ldr	r2, [pc, #120]	; (80018e0 <HAL_SPI_MspInit+0x13c>)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA2_Channel1;
 800186a:	4b1f      	ldr	r3, [pc, #124]	; (80018e8 <HAL_SPI_MspInit+0x144>)
 800186c:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <HAL_SPI_MspInit+0x148>)
 800186e:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_3;
 8001870:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <HAL_SPI_MspInit+0x144>)
 8001872:	2203      	movs	r2, #3
 8001874:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001876:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <HAL_SPI_MspInit+0x144>)
 8001878:	2200      	movs	r2, #0
 800187a:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800187c:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <HAL_SPI_MspInit+0x144>)
 800187e:	2200      	movs	r2, #0
 8001880:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001882:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <HAL_SPI_MspInit+0x144>)
 8001884:	2280      	movs	r2, #128	; 0x80
 8001886:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001888:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <HAL_SPI_MspInit+0x144>)
 800188a:	2200      	movs	r2, #0
 800188c:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800188e:	4b16      	ldr	r3, [pc, #88]	; (80018e8 <HAL_SPI_MspInit+0x144>)
 8001890:	2200      	movs	r2, #0
 8001892:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <HAL_SPI_MspInit+0x144>)
 8001896:	2200      	movs	r2, #0
 8001898:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_SPI_MspInit+0x144>)
 800189c:	2200      	movs	r2, #0
 800189e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 80018a0:	4811      	ldr	r0, [pc, #68]	; (80018e8 <HAL_SPI_MspInit+0x144>)
 80018a2:	f001 fe91 	bl	80035c8 <HAL_DMA_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 80018ac:	f7ff ff34 	bl	8001718 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi3_rx);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	4a0d      	ldr	r2, [pc, #52]	; (80018e8 <HAL_SPI_MspInit+0x144>)
 80018b4:	659a      	str	r2, [r3, #88]	; 0x58
 80018b6:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <HAL_SPI_MspInit+0x144>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 80018bc:	2200      	movs	r2, #0
 80018be:	2100      	movs	r1, #0
 80018c0:	2033      	movs	r0, #51	; 0x33
 80018c2:	f001 fe4a 	bl	800355a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 80018c6:	2033      	movs	r0, #51	; 0x33
 80018c8:	f001 fe63 	bl	8003592 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40003c00 	.word	0x40003c00
 80018d8:	40021000 	.word	0x40021000
 80018dc:	48000400 	.word	0x48000400
 80018e0:	200002e4 	.word	0x200002e4
 80018e4:	4002041c 	.word	0x4002041c
 80018e8:	2000032c 	.word	0x2000032c
 80018ec:	40020408 	.word	0x40020408

080018f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	4b0f      	ldr	r3, [pc, #60]	; (8001934 <HAL_MspInit+0x44>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	4a0e      	ldr	r2, [pc, #56]	; (8001934 <HAL_MspInit+0x44>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6613      	str	r3, [r2, #96]	; 0x60
 8001902:	4b0c      	ldr	r3, [pc, #48]	; (8001934 <HAL_MspInit+0x44>)
 8001904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_MspInit+0x44>)
 8001910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001912:	4a08      	ldr	r2, [pc, #32]	; (8001934 <HAL_MspInit+0x44>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	6593      	str	r3, [r2, #88]	; 0x58
 800191a:	4b06      	ldr	r3, [pc, #24]	; (8001934 <HAL_MspInit+0x44>)
 800191c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	603b      	str	r3, [r7, #0]
 8001924:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000

08001938 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800193c:	e7fe      	b.n	800193c <NMI_Handler+0x4>

0800193e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193e:	b480      	push	{r7}
 8001940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001942:	e7fe      	b.n	8001942 <HardFault_Handler+0x4>

08001944 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001948:	e7fe      	b.n	8001948 <MemManage_Handler+0x4>

0800194a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800194a:	b480      	push	{r7}
 800194c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800194e:	e7fe      	b.n	800194e <BusFault_Handler+0x4>

08001950 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <UsageFault_Handler+0x4>

08001956 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001968:	bf00      	nop
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001984:	f000 fc1e 	bl	80021c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001988:	bf00      	nop
 800198a:	bd80      	pop	{r7, pc}

0800198c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001990:	4802      	ldr	r0, [pc, #8]	; (800199c <DMA1_Channel1_IRQHandler+0x10>)
 8001992:	f001 ff72 	bl	800387a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000104 	.word	0x20000104

080019a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019a4:	4802      	ldr	r0, [pc, #8]	; (80019b0 <TIM2_IRQHandler+0x10>)
 80019a6:	f005 fc49 	bl	800723c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200003c4 	.word	0x200003c4

080019b4 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  SPI_RxBuffer[0] = 0x01;
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <SPI3_IRQHandler+0x34>)
 80019ba:	2201      	movs	r2, #1
 80019bc:	701a      	strb	r2, [r3, #0]
  SPI_RxBuffer[1] = 0x02;
 80019be:	4b0a      	ldr	r3, [pc, #40]	; (80019e8 <SPI3_IRQHandler+0x34>)
 80019c0:	2202      	movs	r2, #2
 80019c2:	705a      	strb	r2, [r3, #1]
  SPI_RxBuffer[2] = 0x03;
 80019c4:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <SPI3_IRQHandler+0x34>)
 80019c6:	2203      	movs	r2, #3
 80019c8:	709a      	strb	r2, [r3, #2]
  SPI_RxBuffer[3] = 0x04;
 80019ca:	4b07      	ldr	r3, [pc, #28]	; (80019e8 <SPI3_IRQHandler+0x34>)
 80019cc:	2204      	movs	r2, #4
 80019ce:	70da      	strb	r2, [r3, #3]
  SPI_RxBuffer[4] = 0x05;
 80019d0:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <SPI3_IRQHandler+0x34>)
 80019d2:	2205      	movs	r2, #5
 80019d4:	711a      	strb	r2, [r3, #4]
  SPI_RxBuffer[5] = 0x06;
 80019d6:	4b04      	ldr	r3, [pc, #16]	; (80019e8 <SPI3_IRQHandler+0x34>)
 80019d8:	2206      	movs	r2, #6
 80019da:	715a      	strb	r2, [r3, #5]

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 80019dc:	4803      	ldr	r0, [pc, #12]	; (80019ec <SPI3_IRQHandler+0x38>)
 80019de:	f004 fcb3 	bl	8006348 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  //HAL_SPI_Transmit(&hspi3, SPI_RxBuffer, 6, 500);

  /* USER CODE END SPI3_IRQn 1 */
}
 80019e2:	bf00      	nop
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	200001c0 	.word	0x200001c0
 80019ec:	20000280 	.word	0x20000280

080019f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <TIM6_DAC_IRQHandler+0x10>)
 80019f6:	f005 fc21 	bl	800723c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	20000410 	.word	0x20000410

08001a04 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <DMA2_Channel1_IRQHandler+0x10>)
 8001a0a:	f001 ff36 	bl	800387a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	2000032c 	.word	0x2000032c

08001a18 <DMA2_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA2 channel2 global interrupt.
  */
void DMA2_Channel2_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel2_IRQn 0 */

  /* USER CODE END DMA2_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <DMA2_Channel2_IRQHandler+0x10>)
 8001a1e:	f001 ff2c 	bl	800387a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel2_IRQn 1 */

  /* USER CODE END DMA2_Channel2_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	200002e4 	.word	0x200002e4

08001a2c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b086      	sub	sp, #24
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	60f8      	str	r0, [r7, #12]
 8001a34:	60b9      	str	r1, [r7, #8]
 8001a36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	e00a      	b.n	8001a54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a3e:	f3af 8000 	nop.w
 8001a42:	4601      	mov	r1, r0
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	1c5a      	adds	r2, r3, #1
 8001a48:	60ba      	str	r2, [r7, #8]
 8001a4a:	b2ca      	uxtb	r2, r1
 8001a4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	dbf0      	blt.n	8001a3e <_read+0x12>
  }

  return len;
 8001a5c:	687b      	ldr	r3, [r7, #4]
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b086      	sub	sp, #24
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e009      	b.n	8001a8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a78:	68bb      	ldr	r3, [r7, #8]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	60ba      	str	r2, [r7, #8]
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	617b      	str	r3, [r7, #20]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	429a      	cmp	r2, r3
 8001a92:	dbf1      	blt.n	8001a78 <_write+0x12>
  }
  return len;
 8001a94:	687b      	ldr	r3, [r7, #4]
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3718      	adds	r7, #24
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <_close>:

int _close(int file)
{
 8001a9e:	b480      	push	{r7}
 8001aa0:	b083      	sub	sp, #12
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aa6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr

08001ab6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ac6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <_isatty>:

int _isatty(int file)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ade:	2301      	movs	r3, #1
}
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b085      	sub	sp, #20
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b10:	4a14      	ldr	r2, [pc, #80]	; (8001b64 <_sbrk+0x5c>)
 8001b12:	4b15      	ldr	r3, [pc, #84]	; (8001b68 <_sbrk+0x60>)
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b1c:	4b13      	ldr	r3, [pc, #76]	; (8001b6c <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <_sbrk+0x64>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <_sbrk+0x68>)
 8001b28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <_sbrk+0x64>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	4413      	add	r3, r2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d207      	bcs.n	8001b48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b38:	f008 fc08 	bl	800a34c <__errno>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	220c      	movs	r2, #12
 8001b40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b46:	e009      	b.n	8001b5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b48:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <_sbrk+0x64>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b4e:	4b07      	ldr	r3, [pc, #28]	; (8001b6c <_sbrk+0x64>)
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4413      	add	r3, r2
 8001b56:	4a05      	ldr	r2, [pc, #20]	; (8001b6c <_sbrk+0x64>)
 8001b58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20010000 	.word	0x20010000
 8001b68:	00000400 	.word	0x00000400
 8001b6c:	20000374 	.word	0x20000374
 8001b70:	200006b0 	.word	0x200006b0

08001b74 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <SystemInit+0x20>)
 8001b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b7e:	4a05      	ldr	r2, [pc, #20]	; (8001b94 <SystemInit+0x20>)
 8001b80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim6;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b09a      	sub	sp, #104	; 0x68
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bac:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]
 8001bc0:	605a      	str	r2, [r3, #4]
 8001bc2:	609a      	str	r2, [r3, #8]
 8001bc4:	60da      	str	r2, [r3, #12]
 8001bc6:	611a      	str	r2, [r3, #16]
 8001bc8:	615a      	str	r2, [r3, #20]
 8001bca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bcc:	1d3b      	adds	r3, r7, #4
 8001bce:	222c      	movs	r2, #44	; 0x2c
 8001bd0:	2100      	movs	r1, #0
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f008 fbb2 	bl	800a33c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bd8:	4b4a      	ldr	r3, [pc, #296]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001bda:	4a4b      	ldr	r2, [pc, #300]	; (8001d08 <MX_TIM1_Init+0x170>)
 8001bdc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 31;
 8001bde:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001be0:	221f      	movs	r2, #31
 8001be2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be4:	4b47      	ldr	r3, [pc, #284]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8001bea:	4b46      	ldr	r3, [pc, #280]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001bec:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001bf0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf2:	4b44      	ldr	r3, [pc, #272]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bf8:	4b42      	ldr	r3, [pc, #264]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfe:	4b41      	ldr	r3, [pc, #260]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001c04:	483f      	ldr	r0, [pc, #252]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001c06:	f004 ff6f 	bl	8006ae8 <HAL_TIM_Base_Init>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001c10:	f7ff fd82 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c18:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c1a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4838      	ldr	r0, [pc, #224]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001c22:	f005 fddb 	bl	80077dc <HAL_TIM_ConfigClockSource>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001c2c:	f7ff fd74 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c30:	4834      	ldr	r0, [pc, #208]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001c32:	f005 f834 	bl	8006c9e <HAL_TIM_PWM_Init>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001c3c:	f7ff fd6c 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c40:	2300      	movs	r3, #0
 8001c42:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c4c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001c50:	4619      	mov	r1, r3
 8001c52:	482c      	ldr	r0, [pc, #176]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001c54:	f006 fb58 	bl	8008308 <HAL_TIMEx_MasterConfigSynchronization>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001c5e:	f7ff fd5b 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c62:	2360      	movs	r3, #96	; 0x60
 8001c64:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 1500;
 8001c66:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001c6a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c70:	2300      	movs	r3, #0
 8001c72:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c80:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c84:	2200      	movs	r2, #0
 8001c86:	4619      	mov	r1, r3
 8001c88:	481e      	ldr	r0, [pc, #120]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001c8a:	f005 fc93 	bl	80075b4 <HAL_TIM_PWM_ConfigChannel>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001c94:	f7ff fd40 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c98:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c9c:	220c      	movs	r2, #12
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	4818      	ldr	r0, [pc, #96]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001ca2:	f005 fc87 	bl	80075b4 <HAL_TIM_PWM_ConfigChannel>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d001      	beq.n	8001cb0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001cac:	f7ff fd34 	bl	8001718 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cc8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4807      	ldr	r0, [pc, #28]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001ce6:	f006 fb75 	bl	80083d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <MX_TIM1_Init+0x15c>
  {
    Error_Handler();
 8001cf0:	f7ff fd12 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cf4:	4803      	ldr	r0, [pc, #12]	; (8001d04 <MX_TIM1_Init+0x16c>)
 8001cf6:	f000 f927 	bl	8001f48 <HAL_TIM_MspPostInit>

}
 8001cfa:	bf00      	nop
 8001cfc:	3768      	adds	r7, #104	; 0x68
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000378 	.word	0x20000378
 8001d08:	40012c00 	.word	0x40012c00

08001d0c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b08c      	sub	sp, #48	; 0x30
 8001d10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d12:	f107 0320 	add.w	r3, r7, #32
 8001d16:	2200      	movs	r2, #0
 8001d18:	601a      	str	r2, [r3, #0]
 8001d1a:	605a      	str	r2, [r3, #4]
 8001d1c:	609a      	str	r2, [r3, #8]
 8001d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d20:	f107 0314 	add.w	r3, r7, #20
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	2200      	movs	r2, #0
 8001d30:	601a      	str	r2, [r3, #0]
 8001d32:	605a      	str	r2, [r3, #4]
 8001d34:	609a      	str	r2, [r3, #8]
 8001d36:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001d38:	4b2b      	ldr	r3, [pc, #172]	; (8001de8 <MX_TIM2_Init+0xdc>)
 8001d3a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8001d40:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <MX_TIM2_Init+0xdc>)
 8001d42:	221f      	movs	r2, #31
 8001d44:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d46:	4b28      	ldr	r3, [pc, #160]	; (8001de8 <MX_TIM2_Init+0xdc>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001d4c:	4b26      	ldr	r3, [pc, #152]	; (8001de8 <MX_TIM2_Init+0xdc>)
 8001d4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001d52:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d54:	4b24      	ldr	r3, [pc, #144]	; (8001de8 <MX_TIM2_Init+0xdc>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5a:	4b23      	ldr	r3, [pc, #140]	; (8001de8 <MX_TIM2_Init+0xdc>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d60:	4821      	ldr	r0, [pc, #132]	; (8001de8 <MX_TIM2_Init+0xdc>)
 8001d62:	f004 fec1 	bl	8006ae8 <HAL_TIM_Base_Init>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001d6c:	f7ff fcd4 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d74:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d76:	f107 0320 	add.w	r3, r7, #32
 8001d7a:	4619      	mov	r1, r3
 8001d7c:	481a      	ldr	r0, [pc, #104]	; (8001de8 <MX_TIM2_Init+0xdc>)
 8001d7e:	f005 fd2d 	bl	80077dc <HAL_TIM_ConfigClockSource>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d001      	beq.n	8001d8c <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001d88:	f7ff fcc6 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001d8c:	4816      	ldr	r0, [pc, #88]	; (8001de8 <MX_TIM2_Init+0xdc>)
 8001d8e:	f005 f8c5 	bl	8006f1c <HAL_TIM_IC_Init>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d001      	beq.n	8001d9c <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001d98:	f7ff fcbe 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	480f      	ldr	r0, [pc, #60]	; (8001de8 <MX_TIM2_Init+0xdc>)
 8001dac:	f006 faac 	bl	8008308 <HAL_TIMEx_MasterConfigSynchronization>
 8001db0:	4603      	mov	r3, r0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d001      	beq.n	8001dba <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8001db6:	f7ff fcaf 	bl	8001718 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dca:	1d3b      	adds	r3, r7, #4
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4805      	ldr	r0, [pc, #20]	; (8001de8 <MX_TIM2_Init+0xdc>)
 8001dd2:	f005 fb52 	bl	800747a <HAL_TIM_IC_ConfigChannel>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001ddc:	f7ff fc9c 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001de0:	bf00      	nop
 8001de2:	3730      	adds	r7, #48	; 0x30
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200003c4 	.word	0x200003c4

08001dec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dfc:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001dfe:	4a15      	ldr	r2, [pc, #84]	; (8001e54 <MX_TIM6_Init+0x68>)
 8001e00:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 8001e02:	4b13      	ldr	r3, [pc, #76]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e04:	221f      	movs	r2, #31
 8001e06:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b11      	ldr	r3, [pc, #68]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 2272;
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e10:	f44f 620e 	mov.w	r2, #2272	; 0x8e0
 8001e14:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e1c:	480c      	ldr	r0, [pc, #48]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e1e:	f004 fe63 	bl	8006ae8 <HAL_TIM_Base_Init>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e28:	f7ff fc76 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e34:	1d3b      	adds	r3, r7, #4
 8001e36:	4619      	mov	r1, r3
 8001e38:	4805      	ldr	r0, [pc, #20]	; (8001e50 <MX_TIM6_Init+0x64>)
 8001e3a:	f006 fa65 	bl	8008308 <HAL_TIMEx_MasterConfigSynchronization>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d001      	beq.n	8001e48 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001e44:	f7ff fc68 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e48:	bf00      	nop
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000410 	.word	0x20000410
 8001e54:	40001000 	.word	0x40001000

08001e58 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b08c      	sub	sp, #48	; 0x30
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e60:	f107 031c 	add.w	r3, r7, #28
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
 8001e6e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a31      	ldr	r2, [pc, #196]	; (8001f3c <HAL_TIM_Base_MspInit+0xe4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d10c      	bne.n	8001e94 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e7a:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_TIM_Base_MspInit+0xe8>)
 8001e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e7e:	4a30      	ldr	r2, [pc, #192]	; (8001f40 <HAL_TIM_Base_MspInit+0xe8>)
 8001e80:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e84:	6613      	str	r3, [r2, #96]	; 0x60
 8001e86:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_TIM_Base_MspInit+0xe8>)
 8001e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001e92:	e04f      	b.n	8001f34 <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM2)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e9c:	d131      	bne.n	8001f02 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e9e:	4b28      	ldr	r3, [pc, #160]	; (8001f40 <HAL_TIM_Base_MspInit+0xe8>)
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <HAL_TIM_Base_MspInit+0xe8>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8001eaa:	4b25      	ldr	r3, [pc, #148]	; (8001f40 <HAL_TIM_Base_MspInit+0xe8>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
 8001eb4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb6:	4b22      	ldr	r3, [pc, #136]	; (8001f40 <HAL_TIM_Base_MspInit+0xe8>)
 8001eb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001eba:	4a21      	ldr	r2, [pc, #132]	; (8001f40 <HAL_TIM_Base_MspInit+0xe8>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ec2:	4b1f      	ldr	r3, [pc, #124]	; (8001f40 <HAL_TIM_Base_MspInit+0xe8>)
 8001ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	613b      	str	r3, [r7, #16]
 8001ecc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = FOURCHE_Pin;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eda:	2300      	movs	r3, #0
 8001edc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(FOURCHE_GPIO_Port, &GPIO_InitStruct);
 8001ee2:	f107 031c 	add.w	r3, r7, #28
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eec:	f001 fda4 	bl	8003a38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	201c      	movs	r0, #28
 8001ef6:	f001 fb30 	bl	800355a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001efa:	201c      	movs	r0, #28
 8001efc:	f001 fb49 	bl	8003592 <HAL_NVIC_EnableIRQ>
}
 8001f00:	e018      	b.n	8001f34 <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM6)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a0f      	ldr	r2, [pc, #60]	; (8001f44 <HAL_TIM_Base_MspInit+0xec>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d113      	bne.n	8001f34 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <HAL_TIM_Base_MspInit+0xe8>)
 8001f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f10:	4a0b      	ldr	r2, [pc, #44]	; (8001f40 <HAL_TIM_Base_MspInit+0xe8>)
 8001f12:	f043 0310 	orr.w	r3, r3, #16
 8001f16:	6593      	str	r3, [r2, #88]	; 0x58
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_TIM_Base_MspInit+0xe8>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f1c:	f003 0310 	and.w	r3, r3, #16
 8001f20:	60fb      	str	r3, [r7, #12]
 8001f22:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001f24:	2200      	movs	r2, #0
 8001f26:	2100      	movs	r1, #0
 8001f28:	2036      	movs	r0, #54	; 0x36
 8001f2a:	f001 fb16 	bl	800355a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f2e:	2036      	movs	r0, #54	; 0x36
 8001f30:	f001 fb2f 	bl	8003592 <HAL_NVIC_EnableIRQ>
}
 8001f34:	bf00      	nop
 8001f36:	3730      	adds	r7, #48	; 0x30
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40012c00 	.word	0x40012c00
 8001f40:	40021000 	.word	0x40021000
 8001f44:	40001000 	.word	0x40001000

08001f48 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 030c 	add.w	r3, r7, #12
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a12      	ldr	r2, [pc, #72]	; (8001fb0 <HAL_TIM_MspPostInit+0x68>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d11d      	bne.n	8001fa6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_TIM_MspPostInit+0x6c>)
 8001f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6e:	4a11      	ldr	r2, [pc, #68]	; (8001fb4 <HAL_TIM_MspPostInit+0x6c>)
 8001f70:	f043 0301 	orr.w	r3, r3, #1
 8001f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f76:	4b0f      	ldr	r3, [pc, #60]	; (8001fb4 <HAL_TIM_MspPostInit+0x6c>)
 8001f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	60bb      	str	r3, [r7, #8]
 8001f80:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = PWM_PROPULSION_Pin|PWM_DIRECTION_Pin;
 8001f82:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001f86:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f88:	2302      	movs	r3, #2
 8001f8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f90:	2300      	movs	r3, #0
 8001f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f94:	2301      	movs	r3, #1
 8001f96:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f98:	f107 030c 	add.w	r3, r7, #12
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fa2:	f001 fd49 	bl	8003a38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001fa6:	bf00      	nop
 8001fa8:	3720      	adds	r7, #32
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40012c00 	.word	0x40012c00
 8001fb4:	40021000 	.word	0x40021000

08001fb8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fbe:	4a15      	ldr	r2, [pc, #84]	; (8002014 <MX_USART1_UART_Init+0x5c>)
 8001fc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001fc2:	4b13      	ldr	r3, [pc, #76]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fc4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001fd6:	4b0e      	ldr	r3, [pc, #56]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fdc:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fde:	220c      	movs	r2, #12
 8001fe0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe8:	4b09      	ldr	r3, [pc, #36]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fee:	4b08      	ldr	r3, [pc, #32]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ffa:	4805      	ldr	r0, [pc, #20]	; (8002010 <MX_USART1_UART_Init+0x58>)
 8001ffc:	f006 fa80 	bl	8008500 <HAL_UART_Init>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d001      	beq.n	800200a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002006:	f7ff fb87 	bl	8001718 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	2000045c 	.word	0x2000045c
 8002014:	40013800 	.word	0x40013800

08002018 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b09e      	sub	sp, #120	; 0x78
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002020:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
 8002028:	605a      	str	r2, [r3, #4]
 800202a:	609a      	str	r2, [r3, #8]
 800202c:	60da      	str	r2, [r3, #12]
 800202e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002030:	f107 0310 	add.w	r3, r7, #16
 8002034:	2254      	movs	r2, #84	; 0x54
 8002036:	2100      	movs	r1, #0
 8002038:	4618      	mov	r0, r3
 800203a:	f008 f97f 	bl	800a33c <memset>
  if(uartHandle->Instance==USART1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a1f      	ldr	r2, [pc, #124]	; (80020c0 <HAL_UART_MspInit+0xa8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d137      	bne.n	80020b8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002048:	2301      	movs	r3, #1
 800204a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800204c:	2300      	movs	r3, #0
 800204e:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002050:	f107 0310 	add.w	r3, r7, #16
 8002054:	4618      	mov	r0, r3
 8002056:	f003 fc4f 	bl	80058f8 <HAL_RCCEx_PeriphCLKConfig>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002060:	f7ff fb5a 	bl	8001718 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002064:	4b17      	ldr	r3, [pc, #92]	; (80020c4 <HAL_UART_MspInit+0xac>)
 8002066:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002068:	4a16      	ldr	r2, [pc, #88]	; (80020c4 <HAL_UART_MspInit+0xac>)
 800206a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800206e:	6613      	str	r3, [r2, #96]	; 0x60
 8002070:	4b14      	ldr	r3, [pc, #80]	; (80020c4 <HAL_UART_MspInit+0xac>)
 8002072:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002078:	60fb      	str	r3, [r7, #12]
 800207a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207c:	4b11      	ldr	r3, [pc, #68]	; (80020c4 <HAL_UART_MspInit+0xac>)
 800207e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002080:	4a10      	ldr	r2, [pc, #64]	; (80020c4 <HAL_UART_MspInit+0xac>)
 8002082:	f043 0301 	orr.w	r3, r3, #1
 8002086:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002088:	4b0e      	ldr	r3, [pc, #56]	; (80020c4 <HAL_UART_MspInit+0xac>)
 800208a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	60bb      	str	r3, [r7, #8]
 8002092:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002094:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002098:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800209a:	2302      	movs	r3, #2
 800209c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209e:	2300      	movs	r3, #0
 80020a0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a2:	2303      	movs	r3, #3
 80020a4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80020a6:	2307      	movs	r3, #7
 80020a8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020aa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80020ae:	4619      	mov	r1, r3
 80020b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020b4:	f001 fcc0 	bl	8003a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80020b8:	bf00      	nop
 80020ba:	3778      	adds	r7, #120	; 0x78
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	40013800 	.word	0x40013800
 80020c4:	40021000 	.word	0x40021000

080020c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80020c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002100 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80020cc:	f7ff fd52 	bl	8001b74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020d0:	480c      	ldr	r0, [pc, #48]	; (8002104 <LoopForever+0x6>)
  ldr r1, =_edata
 80020d2:	490d      	ldr	r1, [pc, #52]	; (8002108 <LoopForever+0xa>)
  ldr r2, =_sidata
 80020d4:	4a0d      	ldr	r2, [pc, #52]	; (800210c <LoopForever+0xe>)
  movs r3, #0
 80020d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020d8:	e002      	b.n	80020e0 <LoopCopyDataInit>

080020da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020de:	3304      	adds	r3, #4

080020e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020e4:	d3f9      	bcc.n	80020da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020e6:	4a0a      	ldr	r2, [pc, #40]	; (8002110 <LoopForever+0x12>)
  ldr r4, =_ebss
 80020e8:	4c0a      	ldr	r4, [pc, #40]	; (8002114 <LoopForever+0x16>)
  movs r3, #0
 80020ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020ec:	e001      	b.n	80020f2 <LoopFillZerobss>

080020ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020f0:	3204      	adds	r2, #4

080020f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020f4:	d3fb      	bcc.n	80020ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020f6:	f008 f92f 	bl	800a358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80020fa:	f7fe ff9d 	bl	8001038 <main>

080020fe <LoopForever>:

LoopForever:
    b LoopForever
 80020fe:	e7fe      	b.n	80020fe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002100:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002104:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002108:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 800210c:	0800c048 	.word	0x0800c048
  ldr r2, =_sbss
 8002110:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002114:	200006b0 	.word	0x200006b0

08002118 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002118:	e7fe      	b.n	8002118 <ADC1_IRQHandler>

0800211a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002120:	2300      	movs	r3, #0
 8002122:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002124:	2003      	movs	r0, #3
 8002126:	f001 fa0d 	bl	8003544 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800212a:	2000      	movs	r0, #0
 800212c:	f000 f80e 	bl	800214c <HAL_InitTick>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d002      	beq.n	800213c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	71fb      	strb	r3, [r7, #7]
 800213a:	e001      	b.n	8002140 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800213c:	f7ff fbd8 	bl	80018f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002140:	79fb      	ldrb	r3, [r7, #7]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
	...

0800214c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002158:	4b17      	ldr	r3, [pc, #92]	; (80021b8 <HAL_InitTick+0x6c>)
 800215a:	781b      	ldrb	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d023      	beq.n	80021a8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002160:	4b16      	ldr	r3, [pc, #88]	; (80021bc <HAL_InitTick+0x70>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_InitTick+0x6c>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	4619      	mov	r1, r3
 800216a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800216e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002172:	fbb2 f3f3 	udiv	r3, r2, r3
 8002176:	4618      	mov	r0, r3
 8002178:	f001 fa19 	bl	80035ae <HAL_SYSTICK_Config>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10f      	bne.n	80021a2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2b0f      	cmp	r3, #15
 8002186:	d809      	bhi.n	800219c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002188:	2200      	movs	r2, #0
 800218a:	6879      	ldr	r1, [r7, #4]
 800218c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002190:	f001 f9e3 	bl	800355a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002194:	4a0a      	ldr	r2, [pc, #40]	; (80021c0 <HAL_InitTick+0x74>)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	e007      	b.n	80021ac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	73fb      	strb	r3, [r7, #15]
 80021a0:	e004      	b.n	80021ac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	e001      	b.n	80021ac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3710      	adds	r7, #16
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	2000000c 	.word	0x2000000c
 80021bc:	20000004 	.word	0x20000004
 80021c0:	20000008 	.word	0x20000008

080021c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021c8:	4b06      	ldr	r3, [pc, #24]	; (80021e4 <HAL_IncTick+0x20>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	461a      	mov	r2, r3
 80021ce:	4b06      	ldr	r3, [pc, #24]	; (80021e8 <HAL_IncTick+0x24>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4413      	add	r3, r2
 80021d4:	4a04      	ldr	r2, [pc, #16]	; (80021e8 <HAL_IncTick+0x24>)
 80021d6:	6013      	str	r3, [r2, #0]
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	2000000c 	.word	0x2000000c
 80021e8:	200004e0 	.word	0x200004e0

080021ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return uwTick;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_GetTick+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	200004e0 	.word	0x200004e0

08002204 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b084      	sub	sp, #16
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800220c:	f7ff ffee 	bl	80021ec <HAL_GetTick>
 8002210:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800221c:	d005      	beq.n	800222a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800221e:	4b0a      	ldr	r3, [pc, #40]	; (8002248 <HAL_Delay+0x44>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	461a      	mov	r2, r3
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	4413      	add	r3, r2
 8002228:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800222a:	bf00      	nop
 800222c:	f7ff ffde 	bl	80021ec <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	429a      	cmp	r2, r3
 800223a:	d8f7      	bhi.n	800222c <HAL_Delay+0x28>
  {
  }
}
 800223c:	bf00      	nop
 800223e:	bf00      	nop
 8002240:	3710      	adds	r7, #16
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	2000000c 	.word	0x2000000c

0800224c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800224c:	b480      	push	{r7}
 800224e:	b083      	sub	sp, #12
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689b      	ldr	r3, [r3, #8]
 800225a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	431a      	orrs	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	609a      	str	r2, [r3, #8]
}
 8002266:	bf00      	nop
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	431a      	orrs	r2, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	609a      	str	r2, [r3, #8]
}
 800228c:	bf00      	nop
 800228e:	370c      	adds	r7, #12
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	370c      	adds	r7, #12
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80022b4:	b480      	push	{r7}
 80022b6:	b087      	sub	sp, #28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	60f8      	str	r0, [r7, #12]
 80022bc:	60b9      	str	r1, [r7, #8]
 80022be:	607a      	str	r2, [r7, #4]
 80022c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3360      	adds	r3, #96	; 0x60
 80022c6:	461a      	mov	r2, r3
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <LL_ADC_SetOffset+0x44>)
 80022d6:	4013      	ands	r3, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80022de:	683a      	ldr	r2, [r7, #0]
 80022e0:	430a      	orrs	r2, r1
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80022ec:	bf00      	nop
 80022ee:	371c      	adds	r7, #28
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	03fff000 	.word	0x03fff000

080022fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b085      	sub	sp, #20
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3360      	adds	r3, #96	; 0x60
 800230a:	461a      	mov	r2, r3
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	4413      	add	r3, r2
 8002312:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800231c:	4618      	mov	r0, r3
 800231e:	3714      	adds	r7, #20
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002328:	b480      	push	{r7}
 800232a:	b087      	sub	sp, #28
 800232c:	af00      	add	r7, sp, #0
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	3360      	adds	r3, #96	; 0x60
 8002338:	461a      	mov	r2, r3
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	431a      	orrs	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002352:	bf00      	nop
 8002354:	371c      	adds	r7, #28
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800235e:	b480      	push	{r7}
 8002360:	b083      	sub	sp, #12
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	370c      	adds	r7, #12
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002384:	b480      	push	{r7}
 8002386:	b087      	sub	sp, #28
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	3330      	adds	r3, #48	; 0x30
 8002394:	461a      	mov	r2, r3
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	0a1b      	lsrs	r3, r3, #8
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	f003 030c 	and.w	r3, r3, #12
 80023a0:	4413      	add	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	211f      	movs	r1, #31
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	401a      	ands	r2, r3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	0e9b      	lsrs	r3, r3, #26
 80023bc:	f003 011f 	and.w	r1, r3, #31
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f003 031f 	and.w	r3, r3, #31
 80023c6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ca:	431a      	orrs	r2, r3
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	3314      	adds	r3, #20
 80023ec:	461a      	mov	r2, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	0e5b      	lsrs	r3, r3, #25
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	f003 0304 	and.w	r3, r3, #4
 80023f8:	4413      	add	r3, r2
 80023fa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	0d1b      	lsrs	r3, r3, #20
 8002404:	f003 031f 	and.w	r3, r3, #31
 8002408:	2107      	movs	r1, #7
 800240a:	fa01 f303 	lsl.w	r3, r1, r3
 800240e:	43db      	mvns	r3, r3
 8002410:	401a      	ands	r2, r3
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	0d1b      	lsrs	r3, r3, #20
 8002416:	f003 031f 	and.w	r3, r3, #31
 800241a:	6879      	ldr	r1, [r7, #4]
 800241c:	fa01 f303 	lsl.w	r3, r1, r3
 8002420:	431a      	orrs	r2, r3
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002426:	bf00      	nop
 8002428:	371c      	adds	r7, #28
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800244c:	43db      	mvns	r3, r3
 800244e:	401a      	ands	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	f003 0318 	and.w	r3, r3, #24
 8002456:	4908      	ldr	r1, [pc, #32]	; (8002478 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002458:	40d9      	lsrs	r1, r3
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	400b      	ands	r3, r1
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	431a      	orrs	r2, r3
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800246a:	bf00      	nop
 800246c:	3714      	adds	r7, #20
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	0007ffff 	.word	0x0007ffff

0800247c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800248c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6093      	str	r3, [r2, #8]
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80024b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024b4:	d101      	bne.n	80024ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80024b6:	2301      	movs	r3, #1
 80024b8:	e000      	b.n	80024bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002500:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002504:	d101      	bne.n	800250a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	370c      	adds	r7, #12
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002518:	b480      	push	{r7}
 800251a:	b083      	sub	sp, #12
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	689b      	ldr	r3, [r3, #8]
 8002524:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002528:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800252c:	f043 0201 	orr.w	r2, r3, #1
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002534:	bf00      	nop
 8002536:	370c      	adds	r7, #12
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr

08002540 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b01      	cmp	r3, #1
 8002552:	d101      	bne.n	8002558 <LL_ADC_IsEnabled+0x18>
 8002554:	2301      	movs	r3, #1
 8002556:	e000      	b.n	800255a <LL_ADC_IsEnabled+0x1a>
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr

08002566 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002566:	b480      	push	{r7}
 8002568:	b083      	sub	sp, #12
 800256a:	af00      	add	r7, sp, #0
 800256c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002576:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800257a:	f043 0204 	orr.w	r2, r3, #4
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d101      	bne.n	80025a6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025a2:	2301      	movs	r3, #1
 80025a4:	e000      	b.n	80025a8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr

080025b4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d101      	bne.n	80025cc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80025c8:	2301      	movs	r3, #1
 80025ca:	e000      	b.n	80025ce <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b088      	sub	sp, #32
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025e4:	2300      	movs	r3, #0
 80025e6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e12c      	b.n	8002850 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	2b00      	cmp	r3, #0
 8002602:	d109      	bne.n	8002618 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7fe fa6f 	bl	8000ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff ff3f 	bl	80024a0 <LL_ADC_IsDeepPowerDownEnabled>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d004      	beq.n	8002632 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff25 	bl	800247c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f7ff ff5a 	bl	80024f0 <LL_ADC_IsInternalRegulatorEnabled>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d115      	bne.n	800266e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4618      	mov	r0, r3
 8002648:	f7ff ff3e 	bl	80024c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800264c:	4b82      	ldr	r3, [pc, #520]	; (8002858 <HAL_ADC_Init+0x27c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	099b      	lsrs	r3, r3, #6
 8002652:	4a82      	ldr	r2, [pc, #520]	; (800285c <HAL_ADC_Init+0x280>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	099b      	lsrs	r3, r3, #6
 800265a:	3301      	adds	r3, #1
 800265c:	005b      	lsls	r3, r3, #1
 800265e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002660:	e002      	b.n	8002668 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	3b01      	subs	r3, #1
 8002666:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1f9      	bne.n	8002662 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4618      	mov	r0, r3
 8002674:	f7ff ff3c 	bl	80024f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10d      	bne.n	800269a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f043 0210 	orr.w	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268e:	f043 0201 	orr.w	r2, r3, #1
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002696:	2301      	movs	r3, #1
 8002698:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff75 	bl	800258e <LL_ADC_REG_IsConversionOngoing>
 80026a4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026aa:	f003 0310 	and.w	r3, r3, #16
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	f040 80c5 	bne.w	800283e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f040 80c1 	bne.w	800283e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80026c4:	f043 0202 	orr.w	r2, r3, #2
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7ff ff35 	bl	8002540 <LL_ADC_IsEnabled>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10b      	bne.n	80026f4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026dc:	4860      	ldr	r0, [pc, #384]	; (8002860 <HAL_ADC_Init+0x284>)
 80026de:	f7ff ff2f 	bl	8002540 <LL_ADC_IsEnabled>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	4619      	mov	r1, r3
 80026ee:	485d      	ldr	r0, [pc, #372]	; (8002864 <HAL_ADC_Init+0x288>)
 80026f0:	f7ff fdac 	bl	800224c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	7e5b      	ldrb	r3, [r3, #25]
 80026f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80026fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002704:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800270a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002712:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002714:	4313      	orrs	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800271e:	2b01      	cmp	r3, #1
 8002720:	d106      	bne.n	8002730 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	3b01      	subs	r3, #1
 8002728:	045b      	lsls	r3, r3, #17
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d009      	beq.n	800274c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002744:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	4313      	orrs	r3, r2
 800274a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	68da      	ldr	r2, [r3, #12]
 8002752:	4b45      	ldr	r3, [pc, #276]	; (8002868 <HAL_ADC_Init+0x28c>)
 8002754:	4013      	ands	r3, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6812      	ldr	r2, [r2, #0]
 800275a:	69b9      	ldr	r1, [r7, #24]
 800275c:	430b      	orrs	r3, r1
 800275e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff ff12 	bl	800258e <LL_ADC_REG_IsConversionOngoing>
 800276a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4618      	mov	r0, r3
 8002772:	f7ff ff1f 	bl	80025b4 <LL_ADC_INJ_IsConversionOngoing>
 8002776:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d13d      	bne.n	80027fa <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d13a      	bne.n	80027fa <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002788:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002790:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002792:	4313      	orrs	r3, r2
 8002794:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027a0:	f023 0302 	bic.w	r3, r3, #2
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	69b9      	ldr	r1, [r7, #24]
 80027aa:	430b      	orrs	r3, r1
 80027ac:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027b4:	2b01      	cmp	r3, #1
 80027b6:	d118      	bne.n	80027ea <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80027c2:	f023 0304 	bic.w	r3, r3, #4
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80027ce:	4311      	orrs	r1, r2
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80027d4:	4311      	orrs	r1, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80027da:	430a      	orrs	r2, r1
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f042 0201 	orr.w	r2, r2, #1
 80027e6:	611a      	str	r2, [r3, #16]
 80027e8:	e007      	b.n	80027fa <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	691a      	ldr	r2, [r3, #16]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0201 	bic.w	r2, r2, #1
 80027f8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	691b      	ldr	r3, [r3, #16]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d10c      	bne.n	800281c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	f023 010f 	bic.w	r1, r3, #15
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	1e5a      	subs	r2, r3, #1
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	430a      	orrs	r2, r1
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
 800281a:	e007      	b.n	800282c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f022 020f 	bic.w	r2, r2, #15
 800282a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f023 0303 	bic.w	r3, r3, #3
 8002834:	f043 0201 	orr.w	r2, r3, #1
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
 800283c:	e007      	b.n	800284e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	f043 0210 	orr.w	r2, r3, #16
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800284e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3720      	adds	r7, #32
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	20000004 	.word	0x20000004
 800285c:	053e2d63 	.word	0x053e2d63
 8002860:	50040000 	.word	0x50040000
 8002864:	50040300 	.word	0x50040300
 8002868:	fff0c007 	.word	0xfff0c007

0800286c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4618      	mov	r0, r3
 800287e:	f7ff fe86 	bl	800258e <LL_ADC_REG_IsConversionOngoing>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d167      	bne.n	8002958 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800288e:	2b01      	cmp	r3, #1
 8002890:	d101      	bne.n	8002896 <HAL_ADC_Start_DMA+0x2a>
 8002892:	2302      	movs	r3, #2
 8002894:	e063      	b.n	800295e <HAL_ADC_Start_DMA+0xf2>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2201      	movs	r2, #1
 800289a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f000 fc66 	bl	8003170 <ADC_Enable>
 80028a4:	4603      	mov	r3, r0
 80028a6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80028a8:	7dfb      	ldrb	r3, [r7, #23]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d14f      	bne.n	800294e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80028b6:	f023 0301 	bic.w	r3, r3, #1
 80028ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d006      	beq.n	80028dc <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028d2:	f023 0206 	bic.w	r2, r3, #6
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	659a      	str	r2, [r3, #88]	; 0x58
 80028da:	e002      	b.n	80028e2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2200      	movs	r2, #0
 80028e0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e6:	4a20      	ldr	r2, [pc, #128]	; (8002968 <HAL_ADC_Start_DMA+0xfc>)
 80028e8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028ee:	4a1f      	ldr	r2, [pc, #124]	; (800296c <HAL_ADC_Start_DMA+0x100>)
 80028f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028f6:	4a1e      	ldr	r2, [pc, #120]	; (8002970 <HAL_ADC_Start_DMA+0x104>)
 80028f8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	221c      	movs	r2, #28
 8002900:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685a      	ldr	r2, [r3, #4]
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f042 0210 	orr.w	r2, r2, #16
 8002918:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	68da      	ldr	r2, [r3, #12]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f042 0201 	orr.w	r2, r2, #1
 8002928:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3340      	adds	r3, #64	; 0x40
 8002934:	4619      	mov	r1, r3
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f000 fefd 	bl	8003738 <HAL_DMA_Start_IT>
 800293e:	4603      	mov	r3, r0
 8002940:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fe0d 	bl	8002566 <LL_ADC_REG_StartConversion>
 800294c:	e006      	b.n	800295c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002956:	e001      	b.n	800295c <HAL_ADC_Start_DMA+0xf0>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002958:	2302      	movs	r3, #2
 800295a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800295c:	7dfb      	ldrb	r3, [r7, #23]
}
 800295e:	4618      	mov	r0, r3
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	0800327d 	.word	0x0800327d
 800296c:	08003355 	.word	0x08003355
 8002970:	08003371 	.word	0x08003371

08002974 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002974:	b480      	push	{r7}
 8002976:	b083      	sub	sp, #12
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800297c:	bf00      	nop
 800297e:	370c      	adds	r7, #12
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr

08002988 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002990:	bf00      	nop
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299a:	4770      	bx	lr

0800299c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b0b6      	sub	sp, #216	; 0xd8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80029ba:	2300      	movs	r3, #0
 80029bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80029c0:	2300      	movs	r3, #0
 80029c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x22>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e3b9      	b.n	8003146 <HAL_ADC_ConfigChannel+0x796>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fdd5 	bl	800258e <LL_ADC_REG_IsConversionOngoing>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f040 839e 	bne.w	8003128 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	2b05      	cmp	r3, #5
 80029f2:	d824      	bhi.n	8002a3e <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	3b02      	subs	r3, #2
 80029fa:	2b03      	cmp	r3, #3
 80029fc:	d81b      	bhi.n	8002a36 <HAL_ADC_ConfigChannel+0x86>
 80029fe:	a201      	add	r2, pc, #4	; (adr r2, 8002a04 <HAL_ADC_ConfigChannel+0x54>)
 8002a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a04:	08002a15 	.word	0x08002a15
 8002a08:	08002a1d 	.word	0x08002a1d
 8002a0c:	08002a25 	.word	0x08002a25
 8002a10:	08002a2d 	.word	0x08002a2d
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	220c      	movs	r2, #12
 8002a18:	605a      	str	r2, [r3, #4]
          break;
 8002a1a:	e010      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	2212      	movs	r2, #18
 8002a20:	605a      	str	r2, [r3, #4]
          break;
 8002a22:	e00c      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	2218      	movs	r2, #24
 8002a28:	605a      	str	r2, [r3, #4]
          break;
 8002a2a:	e008      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a32:	605a      	str	r2, [r3, #4]
          break;
 8002a34:	e003      	b.n	8002a3e <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	2206      	movs	r2, #6
 8002a3a:	605a      	str	r2, [r3, #4]
          break;
 8002a3c:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6818      	ldr	r0, [r3, #0]
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	6859      	ldr	r1, [r3, #4]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	f7ff fc9a 	bl	8002384 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff fd9a 	bl	800258e <LL_ADC_REG_IsConversionOngoing>
 8002a5a:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4618      	mov	r0, r3
 8002a64:	f7ff fda6 	bl	80025b4 <LL_ADC_INJ_IsConversionOngoing>
 8002a68:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002a6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	f040 81a6 	bne.w	8002dc2 <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002a76:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f040 81a1 	bne.w	8002dc2 <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6818      	ldr	r0, [r3, #0]
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	6819      	ldr	r1, [r3, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f7ff fca5 	bl	80023dc <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	695a      	ldr	r2, [r3, #20]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	08db      	lsrs	r3, r3, #3
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	005b      	lsls	r3, r3, #1
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	691b      	ldr	r3, [r3, #16]
 8002ab0:	2b04      	cmp	r3, #4
 8002ab2:	d00a      	beq.n	8002aca <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6818      	ldr	r0, [r3, #0]
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	6919      	ldr	r1, [r3, #16]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ac4:	f7ff fbf6 	bl	80022b4 <LL_ADC_SetOffset>
 8002ac8:	e17b      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fc13 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d10a      	bne.n	8002af6 <HAL_ADC_ConfigChannel+0x146>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	2100      	movs	r1, #0
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f7ff fc08 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002aec:	4603      	mov	r3, r0
 8002aee:	0e9b      	lsrs	r3, r3, #26
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	e01e      	b.n	8002b34 <HAL_ADC_ConfigChannel+0x184>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f7ff fbfd 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002b02:	4603      	mov	r3, r0
 8002b04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002b14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002b18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002b1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d101      	bne.n	8002b28 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8002b24:	2320      	movs	r3, #32
 8002b26:	e004      	b.n	8002b32 <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8002b28:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b2c:	fab3 f383 	clz	r3, r3
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d105      	bne.n	8002b4c <HAL_ADC_ConfigChannel+0x19c>
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	0e9b      	lsrs	r3, r3, #26
 8002b46:	f003 031f 	and.w	r3, r3, #31
 8002b4a:	e018      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x1ce>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002b58:	fa93 f3a3 	rbit	r3, r3
 8002b5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002b60:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002b64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002b68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8002b70:	2320      	movs	r3, #32
 8002b72:	e004      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8002b74:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002b78:	fab3 f383 	clz	r3, r3
 8002b7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d106      	bne.n	8002b90 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	2200      	movs	r2, #0
 8002b88:	2100      	movs	r1, #0
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f7ff fbcc 	bl	8002328 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fbb0 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10a      	bne.n	8002bbc <HAL_ADC_ConfigChannel+0x20c>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2101      	movs	r1, #1
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fba5 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	0e9b      	lsrs	r3, r3, #26
 8002bb6:	f003 021f 	and.w	r2, r3, #31
 8002bba:	e01e      	b.n	8002bfa <HAL_ADC_ConfigChannel+0x24a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f7ff fb9a 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002bd2:	fa93 f3a3 	rbit	r3, r3
 8002bd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002bda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bde:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002be2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8002bea:	2320      	movs	r3, #32
 8002bec:	e004      	b.n	8002bf8 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8002bee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002bf2:	fab3 f383 	clz	r3, r3
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d105      	bne.n	8002c12 <HAL_ADC_ConfigChannel+0x262>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	0e9b      	lsrs	r3, r3, #26
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	e018      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x294>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c1e:	fa93 f3a3 	rbit	r3, r3
 8002c22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002c26:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002c2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002c2e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d101      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8002c36:	2320      	movs	r3, #32
 8002c38:	e004      	b.n	8002c44 <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8002c3a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c3e:	fab3 f383 	clz	r3, r3
 8002c42:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d106      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2101      	movs	r1, #1
 8002c50:	4618      	mov	r0, r3
 8002c52:	f7ff fb69 	bl	8002328 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2102      	movs	r1, #2
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7ff fb4d 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002c62:	4603      	mov	r3, r0
 8002c64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d10a      	bne.n	8002c82 <HAL_ADC_ConfigChannel+0x2d2>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2102      	movs	r1, #2
 8002c72:	4618      	mov	r0, r3
 8002c74:	f7ff fb42 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	0e9b      	lsrs	r3, r3, #26
 8002c7c:	f003 021f 	and.w	r2, r3, #31
 8002c80:	e01e      	b.n	8002cc0 <HAL_ADC_ConfigChannel+0x310>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	2102      	movs	r1, #2
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff fb37 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c98:	fa93 f3a3 	rbit	r3, r3
 8002c9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002ca0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ca4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002ca8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002cb0:	2320      	movs	r3, #32
 8002cb2:	e004      	b.n	8002cbe <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002cb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002cb8:	fab3 f383 	clz	r3, r3
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d105      	bne.n	8002cd8 <HAL_ADC_ConfigChannel+0x328>
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	0e9b      	lsrs	r3, r3, #26
 8002cd2:	f003 031f 	and.w	r3, r3, #31
 8002cd6:	e016      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x356>
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002cea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002cf0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8002cf8:	2320      	movs	r3, #32
 8002cfa:	e004      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8002cfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002d00:	fab3 f383 	clz	r3, r3
 8002d04:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d106      	bne.n	8002d18 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	2102      	movs	r1, #2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff fb08 	bl	8002328 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2103      	movs	r1, #3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff faec 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002d24:	4603      	mov	r3, r0
 8002d26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10a      	bne.n	8002d44 <HAL_ADC_ConfigChannel+0x394>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2103      	movs	r1, #3
 8002d34:	4618      	mov	r0, r3
 8002d36:	f7ff fae1 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	0e9b      	lsrs	r3, r3, #26
 8002d3e:	f003 021f 	and.w	r2, r3, #31
 8002d42:	e017      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x3c4>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2103      	movs	r1, #3
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fad6 	bl	80022fc <LL_ADC_GetOffsetChannel>
 8002d50:	4603      	mov	r3, r0
 8002d52:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d56:	fa93 f3a3 	rbit	r3, r3
 8002d5a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002d5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d5e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 8002d66:	2320      	movs	r3, #32
 8002d68:	e003      	b.n	8002d72 <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8002d6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d6c:	fab3 f383 	clz	r3, r3
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <HAL_ADC_ConfigChannel+0x3dc>
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	0e9b      	lsrs	r3, r3, #26
 8002d86:	f003 031f 	and.w	r3, r3, #31
 8002d8a:	e011      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x400>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d94:	fa93 f3a3 	rbit	r3, r3
 8002d98:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002d9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002d9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 8002da4:	2320      	movs	r3, #32
 8002da6:	e003      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8002da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002daa:	fab3 f383 	clz	r3, r3
 8002dae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d106      	bne.n	8002dc2 <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2200      	movs	r2, #0
 8002dba:	2103      	movs	r1, #3
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff fab3 	bl	8002328 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7ff fbba 	bl	8002540 <LL_ADC_IsEnabled>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	f040 8140 	bne.w	8003054 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6818      	ldr	r0, [r3, #0]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	6819      	ldr	r1, [r3, #0]
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	461a      	mov	r2, r3
 8002de2:	f7ff fb27 	bl	8002434 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	68db      	ldr	r3, [r3, #12]
 8002dea:	4a8f      	ldr	r2, [pc, #572]	; (8003028 <HAL_ADC_ConfigChannel+0x678>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	f040 8131 	bne.w	8003054 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d10b      	bne.n	8002e1a <HAL_ADC_ConfigChannel+0x46a>
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	0e9b      	lsrs	r3, r3, #26
 8002e08:	3301      	adds	r3, #1
 8002e0a:	f003 031f 	and.w	r3, r3, #31
 8002e0e:	2b09      	cmp	r3, #9
 8002e10:	bf94      	ite	ls
 8002e12:	2301      	movls	r3, #1
 8002e14:	2300      	movhi	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	e019      	b.n	8002e4e <HAL_ADC_ConfigChannel+0x49e>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e22:	fa93 f3a3 	rbit	r3, r3
 8002e26:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002e28:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e2a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002e2c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 8002e32:	2320      	movs	r3, #32
 8002e34:	e003      	b.n	8002e3e <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 8002e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e38:	fab3 f383 	clz	r3, r3
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	3301      	adds	r3, #1
 8002e40:	f003 031f 	and.w	r3, r3, #31
 8002e44:	2b09      	cmp	r3, #9
 8002e46:	bf94      	ite	ls
 8002e48:	2301      	movls	r3, #1
 8002e4a:	2300      	movhi	r3, #0
 8002e4c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d079      	beq.n	8002f46 <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d107      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x4be>
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	0e9b      	lsrs	r3, r3, #26
 8002e64:	3301      	adds	r3, #1
 8002e66:	069b      	lsls	r3, r3, #26
 8002e68:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e6c:	e015      	b.n	8002e9a <HAL_ADC_ConfigChannel+0x4ea>
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e76:	fa93 f3a3 	rbit	r3, r3
 8002e7a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002e7c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e7e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002e80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d101      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 8002e86:	2320      	movs	r3, #32
 8002e88:	e003      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8002e8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e8c:	fab3 f383 	clz	r3, r3
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	069b      	lsls	r3, r3, #26
 8002e96:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d109      	bne.n	8002eba <HAL_ADC_ConfigChannel+0x50a>
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	0e9b      	lsrs	r3, r3, #26
 8002eac:	3301      	adds	r3, #1
 8002eae:	f003 031f 	and.w	r3, r3, #31
 8002eb2:	2101      	movs	r1, #1
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	e017      	b.n	8002eea <HAL_ADC_ConfigChannel+0x53a>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ec2:	fa93 f3a3 	rbit	r3, r3
 8002ec6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002ec8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	e003      	b.n	8002ede <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 8002ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ed8:	fab3 f383 	clz	r3, r3
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	f003 031f 	and.w	r3, r3, #31
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eea:	ea42 0103 	orr.w	r1, r2, r3
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10a      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x560>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	0e9b      	lsrs	r3, r3, #26
 8002f00:	3301      	adds	r3, #1
 8002f02:	f003 021f 	and.w	r2, r3, #31
 8002f06:	4613      	mov	r3, r2
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4413      	add	r3, r2
 8002f0c:	051b      	lsls	r3, r3, #20
 8002f0e:	e018      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x592>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f18:	fa93 f3a3 	rbit	r3, r3
 8002f1c:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8002f28:	2320      	movs	r3, #32
 8002f2a:	e003      	b.n	8002f34 <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8002f2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2e:	fab3 f383 	clz	r3, r3
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	3301      	adds	r3, #1
 8002f36:	f003 021f 	and.w	r2, r3, #31
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	005b      	lsls	r3, r3, #1
 8002f3e:	4413      	add	r3, r2
 8002f40:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f42:	430b      	orrs	r3, r1
 8002f44:	e081      	b.n	800304a <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d107      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x5b2>
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	0e9b      	lsrs	r3, r3, #26
 8002f58:	3301      	adds	r3, #1
 8002f5a:	069b      	lsls	r3, r3, #26
 8002f5c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f60:	e015      	b.n	8002f8e <HAL_ADC_ConfigChannel+0x5de>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6a:	fa93 f3a3 	rbit	r3, r3
 8002f6e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f72:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d101      	bne.n	8002f7e <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8002f7a:	2320      	movs	r3, #32
 8002f7c:	e003      	b.n	8002f86 <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	fab3 f383 	clz	r3, r3
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	069b      	lsls	r3, r3, #26
 8002f8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d109      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x5fe>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	0e9b      	lsrs	r3, r3, #26
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	f003 031f 	and.w	r3, r3, #31
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fac:	e017      	b.n	8002fde <HAL_ADC_ConfigChannel+0x62e>
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb4:	6a3b      	ldr	r3, [r7, #32]
 8002fb6:	fa93 f3a3 	rbit	r3, r3
 8002fba:	61fb      	str	r3, [r7, #28]
  return result;
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 8002fc6:	2320      	movs	r3, #32
 8002fc8:	e003      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 8002fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fcc:	fab3 f383 	clz	r3, r3
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	f003 031f 	and.w	r3, r3, #31
 8002fd8:	2101      	movs	r1, #1
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	ea42 0103 	orr.w	r1, r2, r3
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10d      	bne.n	800300a <HAL_ADC_ConfigChannel+0x65a>
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	0e9b      	lsrs	r3, r3, #26
 8002ff4:	3301      	adds	r3, #1
 8002ff6:	f003 021f 	and.w	r2, r3, #31
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	005b      	lsls	r3, r3, #1
 8002ffe:	4413      	add	r3, r2
 8003000:	3b1e      	subs	r3, #30
 8003002:	051b      	lsls	r3, r3, #20
 8003004:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003008:	e01e      	b.n	8003048 <HAL_ADC_ConfigChannel+0x698>
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	fa93 f3a3 	rbit	r3, r3
 8003016:	613b      	str	r3, [r7, #16]
  return result;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d104      	bne.n	800302c <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003022:	2320      	movs	r3, #32
 8003024:	e006      	b.n	8003034 <HAL_ADC_ConfigChannel+0x684>
 8003026:	bf00      	nop
 8003028:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800302c:	69bb      	ldr	r3, [r7, #24]
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3301      	adds	r3, #1
 8003036:	f003 021f 	and.w	r2, r3, #31
 800303a:	4613      	mov	r3, r2
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	4413      	add	r3, r2
 8003040:	3b1e      	subs	r3, #30
 8003042:	051b      	lsls	r3, r3, #20
 8003044:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003048:	430b      	orrs	r3, r1
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	6892      	ldr	r2, [r2, #8]
 800304e:	4619      	mov	r1, r3
 8003050:	f7ff f9c4 	bl	80023dc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	4b3d      	ldr	r3, [pc, #244]	; (8003150 <HAL_ADC_ConfigChannel+0x7a0>)
 800305a:	4013      	ands	r3, r2
 800305c:	2b00      	cmp	r3, #0
 800305e:	d06c      	beq.n	800313a <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003060:	483c      	ldr	r0, [pc, #240]	; (8003154 <HAL_ADC_ConfigChannel+0x7a4>)
 8003062:	f7ff f919 	bl	8002298 <LL_ADC_GetCommonPathInternalCh>
 8003066:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a3a      	ldr	r2, [pc, #232]	; (8003158 <HAL_ADC_ConfigChannel+0x7a8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d127      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003074:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003078:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d121      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a35      	ldr	r2, [pc, #212]	; (800315c <HAL_ADC_ConfigChannel+0x7ac>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d157      	bne.n	800313a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800308a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800308e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003092:	4619      	mov	r1, r3
 8003094:	482f      	ldr	r0, [pc, #188]	; (8003154 <HAL_ADC_ConfigChannel+0x7a4>)
 8003096:	f7ff f8ec 	bl	8002272 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800309a:	4b31      	ldr	r3, [pc, #196]	; (8003160 <HAL_ADC_ConfigChannel+0x7b0>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	099b      	lsrs	r3, r3, #6
 80030a0:	4a30      	ldr	r2, [pc, #192]	; (8003164 <HAL_ADC_ConfigChannel+0x7b4>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	099b      	lsrs	r3, r3, #6
 80030a8:	1c5a      	adds	r2, r3, #1
 80030aa:	4613      	mov	r3, r2
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	4413      	add	r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030b4:	e002      	b.n	80030bc <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	3b01      	subs	r3, #1
 80030ba:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f9      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80030c2:	e03a      	b.n	800313a <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a27      	ldr	r2, [pc, #156]	; (8003168 <HAL_ADC_ConfigChannel+0x7b8>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d113      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x746>
 80030ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10d      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1f      	ldr	r2, [pc, #124]	; (800315c <HAL_ADC_ConfigChannel+0x7ac>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d12a      	bne.n	800313a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ec:	4619      	mov	r1, r3
 80030ee:	4819      	ldr	r0, [pc, #100]	; (8003154 <HAL_ADC_ConfigChannel+0x7a4>)
 80030f0:	f7ff f8bf 	bl	8002272 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80030f4:	e021      	b.n	800313a <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	4a1c      	ldr	r2, [pc, #112]	; (800316c <HAL_ADC_ConfigChannel+0x7bc>)
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d11c      	bne.n	800313a <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003104:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003108:	2b00      	cmp	r3, #0
 800310a:	d116      	bne.n	800313a <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a12      	ldr	r2, [pc, #72]	; (800315c <HAL_ADC_ConfigChannel+0x7ac>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d111      	bne.n	800313a <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003116:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800311a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800311e:	4619      	mov	r1, r3
 8003120:	480c      	ldr	r0, [pc, #48]	; (8003154 <HAL_ADC_ConfigChannel+0x7a4>)
 8003122:	f7ff f8a6 	bl	8002272 <LL_ADC_SetCommonPathInternalCh>
 8003126:	e008      	b.n	800313a <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312c:	f043 0220 	orr.w	r2, r3, #32
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003142:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003146:	4618      	mov	r0, r3
 8003148:	37d8      	adds	r7, #216	; 0xd8
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	80080000 	.word	0x80080000
 8003154:	50040300 	.word	0x50040300
 8003158:	c7520000 	.word	0xc7520000
 800315c:	50040000 	.word	0x50040000
 8003160:	20000004 	.word	0x20000004
 8003164:	053e2d63 	.word	0x053e2d63
 8003168:	cb840000 	.word	0xcb840000
 800316c:	80000001 	.word	0x80000001

08003170 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003178:	2300      	movs	r3, #0
 800317a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f7ff f9dd 	bl	8002540 <LL_ADC_IsEnabled>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d169      	bne.n	8003260 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	4b36      	ldr	r3, [pc, #216]	; (800326c <ADC_Enable+0xfc>)
 8003194:	4013      	ands	r3, r2
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00d      	beq.n	80031b6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319e:	f043 0210 	orr.w	r2, r3, #16
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031aa:	f043 0201 	orr.w	r2, r3, #1
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e055      	b.n	8003262 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f7ff f9ac 	bl	8002518 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80031c0:	482b      	ldr	r0, [pc, #172]	; (8003270 <ADC_Enable+0x100>)
 80031c2:	f7ff f869 	bl	8002298 <LL_ADC_GetCommonPathInternalCh>
 80031c6:	4603      	mov	r3, r0
 80031c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d013      	beq.n	80031f8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80031d0:	4b28      	ldr	r3, [pc, #160]	; (8003274 <ADC_Enable+0x104>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	099b      	lsrs	r3, r3, #6
 80031d6:	4a28      	ldr	r2, [pc, #160]	; (8003278 <ADC_Enable+0x108>)
 80031d8:	fba2 2303 	umull	r2, r3, r2, r3
 80031dc:	099b      	lsrs	r3, r3, #6
 80031de:	1c5a      	adds	r2, r3, #1
 80031e0:	4613      	mov	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	4413      	add	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031ea:	e002      	b.n	80031f2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	3b01      	subs	r3, #1
 80031f0:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d1f9      	bne.n	80031ec <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80031f8:	f7fe fff8 	bl	80021ec <HAL_GetTick>
 80031fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80031fe:	e028      	b.n	8003252 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff f99b 	bl	8002540 <LL_ADC_IsEnabled>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d104      	bne.n	800321a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff f97f 	bl	8002518 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800321a:	f7fe ffe7 	bl	80021ec <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	2b02      	cmp	r3, #2
 8003226:	d914      	bls.n	8003252 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0301 	and.w	r3, r3, #1
 8003232:	2b01      	cmp	r3, #1
 8003234:	d00d      	beq.n	8003252 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800323a:	f043 0210 	orr.w	r2, r3, #16
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003246:	f043 0201 	orr.w	r2, r3, #1
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e007      	b.n	8003262 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b01      	cmp	r3, #1
 800325e:	d1cf      	bne.n	8003200 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
 800326a:	bf00      	nop
 800326c:	8000003f 	.word	0x8000003f
 8003270:	50040300 	.word	0x50040300
 8003274:	20000004 	.word	0x20000004
 8003278:	053e2d63 	.word	0x053e2d63

0800327c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800328e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003292:	2b00      	cmp	r3, #0
 8003294:	d14b      	bne.n	800332e <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800329a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d021      	beq.n	80032f4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7ff f852 	bl	800235e <LL_ADC_REG_IsTriggerSourceSWStart>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d032      	beq.n	8003326 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d12b      	bne.n	8003326 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d11f      	bne.n	8003326 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	f043 0201 	orr.w	r2, r3, #1
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54
 80032f2:	e018      	b.n	8003326 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d111      	bne.n	8003326 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d105      	bne.n	8003326 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800331e:	f043 0201 	orr.w	r2, r3, #1
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f7ff fb24 	bl	8002974 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800332c:	e00e      	b.n	800334c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003332:	f003 0310 	and.w	r3, r3, #16
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f7ff fb2e 	bl	800299c <HAL_ADC_ErrorCallback>
}
 8003340:	e004      	b.n	800334c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003348:	6878      	ldr	r0, [r7, #4]
 800334a:	4798      	blx	r3
}
 800334c:	bf00      	nop
 800334e:	3710      	adds	r7, #16
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b084      	sub	sp, #16
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003360:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003362:	68f8      	ldr	r0, [r7, #12]
 8003364:	f7ff fb10 	bl	8002988 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003368:	bf00      	nop
 800336a:	3710      	adds	r7, #16
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}

08003370 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003382:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800338e:	f043 0204 	orr.w	r2, r3, #4
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003396:	68f8      	ldr	r0, [r7, #12]
 8003398:	f7ff fb00 	bl	800299c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800339c:	bf00      	nop
 800339e:	3710      	adds	r7, #16
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}

080033a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033b4:	4b0c      	ldr	r3, [pc, #48]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c0:	4013      	ands	r3, r2
 80033c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033d6:	4a04      	ldr	r2, [pc, #16]	; (80033e8 <__NVIC_SetPriorityGrouping+0x44>)
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	60d3      	str	r3, [r2, #12]
}
 80033dc:	bf00      	nop
 80033de:	3714      	adds	r7, #20
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	e000ed00 	.word	0xe000ed00

080033ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f0:	4b04      	ldr	r3, [pc, #16]	; (8003404 <__NVIC_GetPriorityGrouping+0x18>)
 80033f2:	68db      	ldr	r3, [r3, #12]
 80033f4:	0a1b      	lsrs	r3, r3, #8
 80033f6:	f003 0307 	and.w	r3, r3, #7
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr
 8003404:	e000ed00 	.word	0xe000ed00

08003408 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003416:	2b00      	cmp	r3, #0
 8003418:	db0b      	blt.n	8003432 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800341a:	79fb      	ldrb	r3, [r7, #7]
 800341c:	f003 021f 	and.w	r2, r3, #31
 8003420:	4907      	ldr	r1, [pc, #28]	; (8003440 <__NVIC_EnableIRQ+0x38>)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	095b      	lsrs	r3, r3, #5
 8003428:	2001      	movs	r0, #1
 800342a:	fa00 f202 	lsl.w	r2, r0, r2
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003432:	bf00      	nop
 8003434:	370c      	adds	r7, #12
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	e000e100 	.word	0xe000e100

08003444 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	6039      	str	r1, [r7, #0]
 800344e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003450:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003454:	2b00      	cmp	r3, #0
 8003456:	db0a      	blt.n	800346e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	b2da      	uxtb	r2, r3
 800345c:	490c      	ldr	r1, [pc, #48]	; (8003490 <__NVIC_SetPriority+0x4c>)
 800345e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003462:	0112      	lsls	r2, r2, #4
 8003464:	b2d2      	uxtb	r2, r2
 8003466:	440b      	add	r3, r1
 8003468:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800346c:	e00a      	b.n	8003484 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	b2da      	uxtb	r2, r3
 8003472:	4908      	ldr	r1, [pc, #32]	; (8003494 <__NVIC_SetPriority+0x50>)
 8003474:	79fb      	ldrb	r3, [r7, #7]
 8003476:	f003 030f 	and.w	r3, r3, #15
 800347a:	3b04      	subs	r3, #4
 800347c:	0112      	lsls	r2, r2, #4
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	440b      	add	r3, r1
 8003482:	761a      	strb	r2, [r3, #24]
}
 8003484:	bf00      	nop
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	e000e100 	.word	0xe000e100
 8003494:	e000ed00 	.word	0xe000ed00

08003498 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003498:	b480      	push	{r7}
 800349a:	b089      	sub	sp, #36	; 0x24
 800349c:	af00      	add	r7, sp, #0
 800349e:	60f8      	str	r0, [r7, #12]
 80034a0:	60b9      	str	r1, [r7, #8]
 80034a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	f1c3 0307 	rsb	r3, r3, #7
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	bf28      	it	cs
 80034b6:	2304      	movcs	r3, #4
 80034b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	3304      	adds	r3, #4
 80034be:	2b06      	cmp	r3, #6
 80034c0:	d902      	bls.n	80034c8 <NVIC_EncodePriority+0x30>
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3b03      	subs	r3, #3
 80034c6:	e000      	b.n	80034ca <NVIC_EncodePriority+0x32>
 80034c8:	2300      	movs	r3, #0
 80034ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80034d0:	69bb      	ldr	r3, [r7, #24]
 80034d2:	fa02 f303 	lsl.w	r3, r2, r3
 80034d6:	43da      	mvns	r2, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	401a      	ands	r2, r3
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	fa01 f303 	lsl.w	r3, r1, r3
 80034ea:	43d9      	mvns	r1, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f0:	4313      	orrs	r3, r2
         );
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3724      	adds	r7, #36	; 0x24
 80034f6:	46bd      	mov	sp, r7
 80034f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fc:	4770      	bx	lr
	...

08003500 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	3b01      	subs	r3, #1
 800350c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003510:	d301      	bcc.n	8003516 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003512:	2301      	movs	r3, #1
 8003514:	e00f      	b.n	8003536 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <SysTick_Config+0x40>)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	3b01      	subs	r3, #1
 800351c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800351e:	210f      	movs	r1, #15
 8003520:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003524:	f7ff ff8e 	bl	8003444 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003528:	4b05      	ldr	r3, [pc, #20]	; (8003540 <SysTick_Config+0x40>)
 800352a:	2200      	movs	r2, #0
 800352c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800352e:	4b04      	ldr	r3, [pc, #16]	; (8003540 <SysTick_Config+0x40>)
 8003530:	2207      	movs	r2, #7
 8003532:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	e000e010 	.word	0xe000e010

08003544 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f7ff ff29 	bl	80033a4 <__NVIC_SetPriorityGrouping>
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b086      	sub	sp, #24
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	60b9      	str	r1, [r7, #8]
 8003564:	607a      	str	r2, [r7, #4]
 8003566:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003568:	2300      	movs	r3, #0
 800356a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800356c:	f7ff ff3e 	bl	80033ec <__NVIC_GetPriorityGrouping>
 8003570:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	6978      	ldr	r0, [r7, #20]
 8003578:	f7ff ff8e 	bl	8003498 <NVIC_EncodePriority>
 800357c:	4602      	mov	r2, r0
 800357e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003582:	4611      	mov	r1, r2
 8003584:	4618      	mov	r0, r3
 8003586:	f7ff ff5d 	bl	8003444 <__NVIC_SetPriority>
}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b082      	sub	sp, #8
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800359c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff ff31 	bl	8003408 <__NVIC_EnableIRQ>
}
 80035a6:	bf00      	nop
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035ae:	b580      	push	{r7, lr}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff ffa2 	bl	8003500 <SysTick_Config>
 80035bc:	4603      	mov	r3, r0
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}
	...

080035c8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b085      	sub	sp, #20
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e098      	b.n	800370c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	461a      	mov	r2, r3
 80035e0:	4b4d      	ldr	r3, [pc, #308]	; (8003718 <HAL_DMA_Init+0x150>)
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d80f      	bhi.n	8003606 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	4b4b      	ldr	r3, [pc, #300]	; (800371c <HAL_DMA_Init+0x154>)
 80035ee:	4413      	add	r3, r2
 80035f0:	4a4b      	ldr	r2, [pc, #300]	; (8003720 <HAL_DMA_Init+0x158>)
 80035f2:	fba2 2303 	umull	r2, r3, r2, r3
 80035f6:	091b      	lsrs	r3, r3, #4
 80035f8:	009a      	lsls	r2, r3, #2
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a48      	ldr	r2, [pc, #288]	; (8003724 <HAL_DMA_Init+0x15c>)
 8003602:	641a      	str	r2, [r3, #64]	; 0x40
 8003604:	e00e      	b.n	8003624 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	461a      	mov	r2, r3
 800360c:	4b46      	ldr	r3, [pc, #280]	; (8003728 <HAL_DMA_Init+0x160>)
 800360e:	4413      	add	r3, r2
 8003610:	4a43      	ldr	r2, [pc, #268]	; (8003720 <HAL_DMA_Init+0x158>)
 8003612:	fba2 2303 	umull	r2, r3, r2, r3
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	009a      	lsls	r2, r3, #2
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a42      	ldr	r2, [pc, #264]	; (800372c <HAL_DMA_Init+0x164>)
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2202      	movs	r2, #2
 8003628:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800363a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800363e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003648:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003654:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	699b      	ldr	r3, [r3, #24]
 800365a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003660:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003668:	68fa      	ldr	r2, [r7, #12]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800367e:	d039      	beq.n	80036f4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003684:	4a27      	ldr	r2, [pc, #156]	; (8003724 <HAL_DMA_Init+0x15c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d11a      	bne.n	80036c0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800368a:	4b29      	ldr	r3, [pc, #164]	; (8003730 <HAL_DMA_Init+0x168>)
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003692:	f003 031c 	and.w	r3, r3, #28
 8003696:	210f      	movs	r1, #15
 8003698:	fa01 f303 	lsl.w	r3, r1, r3
 800369c:	43db      	mvns	r3, r3
 800369e:	4924      	ldr	r1, [pc, #144]	; (8003730 <HAL_DMA_Init+0x168>)
 80036a0:	4013      	ands	r3, r2
 80036a2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036a4:	4b22      	ldr	r3, [pc, #136]	; (8003730 <HAL_DMA_Init+0x168>)
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6859      	ldr	r1, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b0:	f003 031c 	and.w	r3, r3, #28
 80036b4:	fa01 f303 	lsl.w	r3, r1, r3
 80036b8:	491d      	ldr	r1, [pc, #116]	; (8003730 <HAL_DMA_Init+0x168>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]
 80036be:	e019      	b.n	80036f4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80036c0:	4b1c      	ldr	r3, [pc, #112]	; (8003734 <HAL_DMA_Init+0x16c>)
 80036c2:	681a      	ldr	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	f003 031c 	and.w	r3, r3, #28
 80036cc:	210f      	movs	r1, #15
 80036ce:	fa01 f303 	lsl.w	r3, r1, r3
 80036d2:	43db      	mvns	r3, r3
 80036d4:	4917      	ldr	r1, [pc, #92]	; (8003734 <HAL_DMA_Init+0x16c>)
 80036d6:	4013      	ands	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80036da:	4b16      	ldr	r3, [pc, #88]	; (8003734 <HAL_DMA_Init+0x16c>)
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6859      	ldr	r1, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e6:	f003 031c 	and.w	r3, r3, #28
 80036ea:	fa01 f303 	lsl.w	r3, r1, r3
 80036ee:	4911      	ldr	r1, [pc, #68]	; (8003734 <HAL_DMA_Init+0x16c>)
 80036f0:	4313      	orrs	r3, r2
 80036f2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3714      	adds	r7, #20
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr
 8003718:	40020407 	.word	0x40020407
 800371c:	bffdfff8 	.word	0xbffdfff8
 8003720:	cccccccd 	.word	0xcccccccd
 8003724:	40020000 	.word	0x40020000
 8003728:	bffdfbf8 	.word	0xbffdfbf8
 800372c:	40020400 	.word	0x40020400
 8003730:	400200a8 	.word	0x400200a8
 8003734:	400204a8 	.word	0x400204a8

08003738 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b086      	sub	sp, #24
 800373c:	af00      	add	r7, sp, #0
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	60b9      	str	r1, [r7, #8]
 8003742:	607a      	str	r2, [r7, #4]
 8003744:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003746:	2300      	movs	r3, #0
 8003748:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_DMA_Start_IT+0x20>
 8003754:	2302      	movs	r3, #2
 8003756:	e04b      	b.n	80037f0 <HAL_DMA_Start_IT+0xb8>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003766:	b2db      	uxtb	r3, r3
 8003768:	2b01      	cmp	r3, #1
 800376a:	d13a      	bne.n	80037e2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	68b9      	ldr	r1, [r7, #8]
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f921 	bl	80039d8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	2b00      	cmp	r3, #0
 800379c:	d008      	beq.n	80037b0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f042 020e 	orr.w	r2, r2, #14
 80037ac:	601a      	str	r2, [r3, #0]
 80037ae:	e00f      	b.n	80037d0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0204 	bic.w	r2, r2, #4
 80037be:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 020a 	orr.w	r2, r2, #10
 80037ce:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0201 	orr.w	r2, r2, #1
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	e005      	b.n	80037ee <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037ea:	2302      	movs	r3, #2
 80037ec:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3718      	adds	r7, #24
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003800:	2300      	movs	r3, #0
 8003802:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d005      	beq.n	800381c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2204      	movs	r2, #4
 8003814:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	e029      	b.n	8003870 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 020e 	bic.w	r2, r2, #14
 800382a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f022 0201 	bic.w	r2, r2, #1
 800383a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003840:	f003 021c 	and.w	r2, r3, #28
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003848:	2101      	movs	r1, #1
 800384a:	fa01 f202 	lsl.w	r2, r1, r2
 800384e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
    }
  }
  return status;
 8003870:	7bfb      	ldrb	r3, [r7, #15]
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f003 031c 	and.w	r3, r3, #28
 800389a:	2204      	movs	r2, #4
 800389c:	409a      	lsls	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	4013      	ands	r3, r2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d026      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x7a>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d021      	beq.n	80038f4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0320 	and.w	r3, r3, #32
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d107      	bne.n	80038ce <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0204 	bic.w	r2, r2, #4
 80038cc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	f003 021c 	and.w	r2, r3, #28
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	2104      	movs	r1, #4
 80038dc:	fa01 f202 	lsl.w	r2, r1, r2
 80038e0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d071      	beq.n	80039ce <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80038f2:	e06c      	b.n	80039ce <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	f003 031c 	and.w	r3, r3, #28
 80038fc:	2202      	movs	r2, #2
 80038fe:	409a      	lsls	r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	4013      	ands	r3, r2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d02e      	beq.n	8003966 <HAL_DMA_IRQHandler+0xec>
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d029      	beq.n	8003966 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b00      	cmp	r3, #0
 800391e:	d10b      	bne.n	8003938 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	681a      	ldr	r2, [r3, #0]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f022 020a 	bic.w	r2, r2, #10
 800392e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800393c:	f003 021c 	and.w	r2, r3, #28
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003944:	2102      	movs	r1, #2
 8003946:	fa01 f202 	lsl.w	r2, r1, r2
 800394a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003958:	2b00      	cmp	r3, #0
 800395a:	d038      	beq.n	80039ce <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003964:	e033      	b.n	80039ce <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f003 031c 	and.w	r3, r3, #28
 800396e:	2208      	movs	r2, #8
 8003970:	409a      	lsls	r2, r3
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	4013      	ands	r3, r2
 8003976:	2b00      	cmp	r3, #0
 8003978:	d02a      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x156>
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f003 0308 	and.w	r3, r3, #8
 8003980:	2b00      	cmp	r3, #0
 8003982:	d025      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 020e 	bic.w	r2, r2, #14
 8003992:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003998:	f003 021c 	and.w	r2, r3, #28
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a0:	2101      	movs	r1, #1
 80039a2:	fa01 f202 	lsl.w	r2, r1, r2
 80039a6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2201      	movs	r2, #1
 80039b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d004      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80039ce:	bf00      	nop
 80039d0:	bf00      	nop
}
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039d8:	b480      	push	{r7}
 80039da:	b085      	sub	sp, #20
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f003 021c 	and.w	r2, r3, #28
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	2101      	movs	r1, #1
 80039f4:	fa01 f202 	lsl.w	r2, r1, r2
 80039f8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	2b10      	cmp	r3, #16
 8003a08:	d108      	bne.n	8003a1c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	68ba      	ldr	r2, [r7, #8]
 8003a18:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003a1a:	e007      	b.n	8003a2c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68ba      	ldr	r2, [r7, #8]
 8003a22:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	60da      	str	r2, [r3, #12]
}
 8003a2c:	bf00      	nop
 8003a2e:	3714      	adds	r7, #20
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b087      	sub	sp, #28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a46:	e148      	b.n	8003cda <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	2101      	movs	r1, #1
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	fa01 f303 	lsl.w	r3, r1, r3
 8003a54:	4013      	ands	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f000 813a 	beq.w	8003cd4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d005      	beq.n	8003a78 <HAL_GPIO_Init+0x40>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 0303 	and.w	r3, r3, #3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d130      	bne.n	8003ada <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	005b      	lsls	r3, r3, #1
 8003a82:	2203      	movs	r2, #3
 8003a84:	fa02 f303 	lsl.w	r3, r2, r3
 8003a88:	43db      	mvns	r3, r3
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	68da      	ldr	r2, [r3, #12]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	005b      	lsls	r3, r3, #1
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003aae:	2201      	movs	r2, #1
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4013      	ands	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	091b      	lsrs	r3, r3, #4
 8003ac4:	f003 0201 	and.w	r2, r3, #1
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	693a      	ldr	r2, [r7, #16]
 8003ad8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f003 0303 	and.w	r3, r3, #3
 8003ae2:	2b03      	cmp	r3, #3
 8003ae4:	d017      	beq.n	8003b16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	005b      	lsls	r3, r3, #1
 8003af0:	2203      	movs	r2, #3
 8003af2:	fa02 f303 	lsl.w	r3, r2, r3
 8003af6:	43db      	mvns	r3, r3
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	4013      	ands	r3, r2
 8003afc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	689a      	ldr	r2, [r3, #8]
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f003 0303 	and.w	r3, r3, #3
 8003b1e:	2b02      	cmp	r3, #2
 8003b20:	d123      	bne.n	8003b6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	08da      	lsrs	r2, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3208      	adds	r2, #8
 8003b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f003 0307 	and.w	r3, r3, #7
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	220f      	movs	r2, #15
 8003b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3e:	43db      	mvns	r3, r3
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4013      	ands	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	691a      	ldr	r2, [r3, #16]
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f003 0307 	and.w	r3, r3, #7
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	08da      	lsrs	r2, r3, #3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	3208      	adds	r2, #8
 8003b64:	6939      	ldr	r1, [r7, #16]
 8003b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	005b      	lsls	r3, r3, #1
 8003b74:	2203      	movs	r2, #3
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	43db      	mvns	r3, r3
 8003b7c:	693a      	ldr	r2, [r7, #16]
 8003b7e:	4013      	ands	r3, r2
 8003b80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f003 0203 	and.w	r2, r3, #3
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	693a      	ldr	r2, [r7, #16]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	693a      	ldr	r2, [r7, #16]
 8003b9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	f000 8094 	beq.w	8003cd4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bac:	4b52      	ldr	r3, [pc, #328]	; (8003cf8 <HAL_GPIO_Init+0x2c0>)
 8003bae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb0:	4a51      	ldr	r2, [pc, #324]	; (8003cf8 <HAL_GPIO_Init+0x2c0>)
 8003bb2:	f043 0301 	orr.w	r3, r3, #1
 8003bb6:	6613      	str	r3, [r2, #96]	; 0x60
 8003bb8:	4b4f      	ldr	r3, [pc, #316]	; (8003cf8 <HAL_GPIO_Init+0x2c0>)
 8003bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bbc:	f003 0301 	and.w	r3, r3, #1
 8003bc0:	60bb      	str	r3, [r7, #8]
 8003bc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003bc4:	4a4d      	ldr	r2, [pc, #308]	; (8003cfc <HAL_GPIO_Init+0x2c4>)
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	3302      	adds	r3, #2
 8003bcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f003 0303 	and.w	r3, r3, #3
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	220f      	movs	r2, #15
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bee:	d00d      	beq.n	8003c0c <HAL_GPIO_Init+0x1d4>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	4a43      	ldr	r2, [pc, #268]	; (8003d00 <HAL_GPIO_Init+0x2c8>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d007      	beq.n	8003c08 <HAL_GPIO_Init+0x1d0>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a42      	ldr	r2, [pc, #264]	; (8003d04 <HAL_GPIO_Init+0x2cc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d101      	bne.n	8003c04 <HAL_GPIO_Init+0x1cc>
 8003c00:	2302      	movs	r3, #2
 8003c02:	e004      	b.n	8003c0e <HAL_GPIO_Init+0x1d6>
 8003c04:	2307      	movs	r3, #7
 8003c06:	e002      	b.n	8003c0e <HAL_GPIO_Init+0x1d6>
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_GPIO_Init+0x1d6>
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	697a      	ldr	r2, [r7, #20]
 8003c10:	f002 0203 	and.w	r2, r2, #3
 8003c14:	0092      	lsls	r2, r2, #2
 8003c16:	4093      	lsls	r3, r2
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003c1e:	4937      	ldr	r1, [pc, #220]	; (8003cfc <HAL_GPIO_Init+0x2c4>)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	089b      	lsrs	r3, r3, #2
 8003c24:	3302      	adds	r3, #2
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c2c:	4b36      	ldr	r3, [pc, #216]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4313      	orrs	r3, r2
 8003c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c50:	4a2d      	ldr	r2, [pc, #180]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c56:	4b2c      	ldr	r3, [pc, #176]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	43db      	mvns	r3, r3
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	4013      	ands	r3, r2
 8003c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c7a:	4a23      	ldr	r2, [pc, #140]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003c7c:	693b      	ldr	r3, [r7, #16]
 8003c7e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c80:	4b21      	ldr	r3, [pc, #132]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	43db      	mvns	r3, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d003      	beq.n	8003ca4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4313      	orrs	r3, r2
 8003ca2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ca4:	4a18      	ldr	r2, [pc, #96]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003caa:	4b17      	ldr	r3, [pc, #92]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d003      	beq.n	8003cce <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cce:	4a0e      	ldr	r2, [pc, #56]	; (8003d08 <HAL_GPIO_Init+0x2d0>)
 8003cd0:	693b      	ldr	r3, [r7, #16]
 8003cd2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f47f aeaf 	bne.w	8003a48 <HAL_GPIO_Init+0x10>
  }
}
 8003cea:	bf00      	nop
 8003cec:	bf00      	nop
 8003cee:	371c      	adds	r7, #28
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	40021000 	.word	0x40021000
 8003cfc:	40010000 	.word	0x40010000
 8003d00:	48000400 	.word	0x48000400
 8003d04:	48000800 	.word	0x48000800
 8003d08:	40010400 	.word	0x40010400

08003d0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	460b      	mov	r3, r1
 8003d16:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	887b      	ldrh	r3, [r7, #2]
 8003d1e:	4013      	ands	r3, r2
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003d24:	2301      	movs	r3, #1
 8003d26:	73fb      	strb	r3, [r7, #15]
 8003d28:	e001      	b.n	8003d2e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b083      	sub	sp, #12
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	460b      	mov	r3, r1
 8003d46:	807b      	strh	r3, [r7, #2]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d4c:	787b      	ldrb	r3, [r7, #1]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d003      	beq.n	8003d5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d52:	887a      	ldrh	r2, [r7, #2]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d58:	e002      	b.n	8003d60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d5a:	887a      	ldrh	r2, [r7, #2]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d60:	bf00      	nop
 8003d62:	370c      	adds	r7, #12
 8003d64:	46bd      	mov	sp, r7
 8003d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6a:	4770      	bx	lr

08003d6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003d7e:	887a      	ldrh	r2, [r7, #2]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4013      	ands	r3, r2
 8003d84:	041a      	lsls	r2, r3, #16
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	43d9      	mvns	r1, r3
 8003d8a:	887b      	ldrh	r3, [r7, #2]
 8003d8c:	400b      	ands	r3, r1
 8003d8e:	431a      	orrs	r2, r3
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	619a      	str	r2, [r3, #24]
}
 8003d94:	bf00      	nop
 8003d96:	3714      	adds	r7, #20
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e081      	b.n	8003eb6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d106      	bne.n	8003dcc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	f7fd f828 	bl	8000e1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2224      	movs	r2, #36	; 0x24
 8003dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f022 0201 	bic.w	r2, r2, #1
 8003de2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003df0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e00:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68db      	ldr	r3, [r3, #12]
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d107      	bne.n	8003e1a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689a      	ldr	r2, [r3, #8]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e16:	609a      	str	r2, [r3, #8]
 8003e18:	e006      	b.n	8003e28 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003e26:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d104      	bne.n	8003e3a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e38:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e4c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68da      	ldr	r2, [r3, #12]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e5c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	695b      	ldr	r3, [r3, #20]
 8003e66:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	699b      	ldr	r3, [r3, #24]
 8003e6e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	430a      	orrs	r2, r1
 8003e76:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	69d9      	ldr	r1, [r3, #28]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1a      	ldr	r2, [r3, #32]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f042 0201 	orr.w	r2, r2, #1
 8003e96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2220      	movs	r2, #32
 8003ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b088      	sub	sp, #32
 8003ec4:	af02      	add	r7, sp, #8
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	607a      	str	r2, [r7, #4]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	460b      	mov	r3, r1
 8003ece:	817b      	strh	r3, [r7, #10]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	2b20      	cmp	r3, #32
 8003ede:	f040 80da 	bne.w	8004096 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003ee8:	2b01      	cmp	r3, #1
 8003eea:	d101      	bne.n	8003ef0 <HAL_I2C_Master_Transmit+0x30>
 8003eec:	2302      	movs	r3, #2
 8003eee:	e0d3      	b.n	8004098 <HAL_I2C_Master_Transmit+0x1d8>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2201      	movs	r2, #1
 8003ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003ef8:	f7fe f978 	bl	80021ec <HAL_GetTick>
 8003efc:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	9300      	str	r3, [sp, #0]
 8003f02:	2319      	movs	r3, #25
 8003f04:	2201      	movs	r2, #1
 8003f06:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f000 fb5c 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 8003f10:	4603      	mov	r3, r0
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d001      	beq.n	8003f1a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e0be      	b.n	8004098 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2221      	movs	r2, #33	; 0x21
 8003f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2210      	movs	r2, #16
 8003f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	687a      	ldr	r2, [r7, #4]
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	893a      	ldrh	r2, [r7, #8]
 8003f3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	2bff      	cmp	r3, #255	; 0xff
 8003f4a:	d90e      	bls.n	8003f6a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	22ff      	movs	r2, #255	; 0xff
 8003f50:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f56:	b2da      	uxtb	r2, r3
 8003f58:	8979      	ldrh	r1, [r7, #10]
 8003f5a:	4b51      	ldr	r3, [pc, #324]	; (80040a0 <HAL_I2C_Master_Transmit+0x1e0>)
 8003f5c:	9300      	str	r3, [sp, #0]
 8003f5e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f62:	68f8      	ldr	r0, [r7, #12]
 8003f64:	f000 fd52 	bl	8004a0c <I2C_TransferConfig>
 8003f68:	e06c      	b.n	8004044 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f6e:	b29a      	uxth	r2, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f78:	b2da      	uxtb	r2, r3
 8003f7a:	8979      	ldrh	r1, [r7, #10]
 8003f7c:	4b48      	ldr	r3, [pc, #288]	; (80040a0 <HAL_I2C_Master_Transmit+0x1e0>)
 8003f7e:	9300      	str	r3, [sp, #0]
 8003f80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f84:	68f8      	ldr	r0, [r7, #12]
 8003f86:	f000 fd41 	bl	8004a0c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003f8a:	e05b      	b.n	8004044 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	6a39      	ldr	r1, [r7, #32]
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 fb59 	bl	8004648 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d001      	beq.n	8003fa0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	e07b      	b.n	8004098 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa4:	781a      	ldrb	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	1c5a      	adds	r2, r3, #1
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d034      	beq.n	8004044 <HAL_I2C_Master_Transmit+0x184>
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d130      	bne.n	8004044 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	9300      	str	r3, [sp, #0]
 8003fe6:	6a3b      	ldr	r3, [r7, #32]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	2180      	movs	r1, #128	; 0x80
 8003fec:	68f8      	ldr	r0, [r7, #12]
 8003fee:	f000 faeb 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d001      	beq.n	8003ffc <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e04d      	b.n	8004098 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004000:	b29b      	uxth	r3, r3
 8004002:	2bff      	cmp	r3, #255	; 0xff
 8004004:	d90e      	bls.n	8004024 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	22ff      	movs	r2, #255	; 0xff
 800400a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004010:	b2da      	uxtb	r2, r3
 8004012:	8979      	ldrh	r1, [r7, #10]
 8004014:	2300      	movs	r3, #0
 8004016:	9300      	str	r3, [sp, #0]
 8004018:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800401c:	68f8      	ldr	r0, [r7, #12]
 800401e:	f000 fcf5 	bl	8004a0c <I2C_TransferConfig>
 8004022:	e00f      	b.n	8004044 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004028:	b29a      	uxth	r2, r3
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004032:	b2da      	uxtb	r2, r3
 8004034:	8979      	ldrh	r1, [r7, #10]
 8004036:	2300      	movs	r3, #0
 8004038:	9300      	str	r3, [sp, #0]
 800403a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fce4 	bl	8004a0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004048:	b29b      	uxth	r3, r3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d19e      	bne.n	8003f8c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	6a39      	ldr	r1, [r7, #32]
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fb38 	bl	80046c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e01a      	b.n	8004098 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2220      	movs	r2, #32
 8004068:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	6859      	ldr	r1, [r3, #4]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_I2C_Master_Transmit+0x1e4>)
 8004076:	400b      	ands	r3, r1
 8004078:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2220      	movs	r2, #32
 800407e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	e000      	b.n	8004098 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004096:	2302      	movs	r3, #2
  }
}
 8004098:	4618      	mov	r0, r3
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	80002000 	.word	0x80002000
 80040a4:	fe00e800 	.word	0xfe00e800

080040a8 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	461a      	mov	r2, r3
 80040b4:	460b      	mov	r3, r1
 80040b6:	817b      	strh	r3, [r7, #10]
 80040b8:	4613      	mov	r3, r2
 80040ba:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	f040 80db 	bne.w	8004280 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d101      	bne.n	80040d8 <HAL_I2C_Master_Receive+0x30>
 80040d4:	2302      	movs	r3, #2
 80040d6:	e0d4      	b.n	8004282 <HAL_I2C_Master_Receive+0x1da>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040e0:	f7fe f884 	bl	80021ec <HAL_GetTick>
 80040e4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	9300      	str	r3, [sp, #0]
 80040ea:	2319      	movs	r3, #25
 80040ec:	2201      	movs	r2, #1
 80040ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040f2:	68f8      	ldr	r0, [r7, #12]
 80040f4:	f000 fa68 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 80040f8:	4603      	mov	r3, r0
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d001      	beq.n	8004102 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
 8004100:	e0bf      	b.n	8004282 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2222      	movs	r2, #34	; 0x22
 8004106:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2210      	movs	r2, #16
 800410e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	893a      	ldrh	r2, [r7, #8]
 8004122:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800412e:	b29b      	uxth	r3, r3
 8004130:	2bff      	cmp	r3, #255	; 0xff
 8004132:	d90e      	bls.n	8004152 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	22ff      	movs	r2, #255	; 0xff
 8004138:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413e:	b2da      	uxtb	r2, r3
 8004140:	8979      	ldrh	r1, [r7, #10]
 8004142:	4b52      	ldr	r3, [pc, #328]	; (800428c <HAL_I2C_Master_Receive+0x1e4>)
 8004144:	9300      	str	r3, [sp, #0]
 8004146:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800414a:	68f8      	ldr	r0, [r7, #12]
 800414c:	f000 fc5e 	bl	8004a0c <I2C_TransferConfig>
 8004150:	e06d      	b.n	800422e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004160:	b2da      	uxtb	r2, r3
 8004162:	8979      	ldrh	r1, [r7, #10]
 8004164:	4b49      	ldr	r3, [pc, #292]	; (800428c <HAL_I2C_Master_Receive+0x1e4>)
 8004166:	9300      	str	r3, [sp, #0]
 8004168:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 fc4d 	bl	8004a0c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004172:	e05c      	b.n	800422e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004174:	697a      	ldr	r2, [r7, #20]
 8004176:	6a39      	ldr	r1, [r7, #32]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fae1 	bl	8004740 <I2C_WaitOnRXNEFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e07c      	b.n	8004282 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d034      	beq.n	800422e <HAL_I2C_Master_Receive+0x186>
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d130      	bne.n	800422e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	9300      	str	r3, [sp, #0]
 80041d0:	6a3b      	ldr	r3, [r7, #32]
 80041d2:	2200      	movs	r2, #0
 80041d4:	2180      	movs	r1, #128	; 0x80
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f9f6 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e04d      	b.n	8004282 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2bff      	cmp	r3, #255	; 0xff
 80041ee:	d90e      	bls.n	800420e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	22ff      	movs	r2, #255	; 0xff
 80041f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	8979      	ldrh	r1, [r7, #10]
 80041fe:	2300      	movs	r3, #0
 8004200:	9300      	str	r3, [sp, #0]
 8004202:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f000 fc00 	bl	8004a0c <I2C_TransferConfig>
 800420c:	e00f      	b.n	800422e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800421c:	b2da      	uxtb	r2, r3
 800421e:	8979      	ldrh	r1, [r7, #10]
 8004220:	2300      	movs	r3, #0
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004228:	68f8      	ldr	r0, [r7, #12]
 800422a:	f000 fbef 	bl	8004a0c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004232:	b29b      	uxth	r3, r3
 8004234:	2b00      	cmp	r3, #0
 8004236:	d19d      	bne.n	8004174 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	6a39      	ldr	r1, [r7, #32]
 800423c:	68f8      	ldr	r0, [r7, #12]
 800423e:	f000 fa43 	bl	80046c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d001      	beq.n	800424c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	e01a      	b.n	8004282 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2220      	movs	r2, #32
 8004252:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6859      	ldr	r1, [r3, #4]
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	4b0c      	ldr	r3, [pc, #48]	; (8004290 <HAL_I2C_Master_Receive+0x1e8>)
 8004260:	400b      	ands	r3, r1
 8004262:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2220      	movs	r2, #32
 8004268:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800427c:	2300      	movs	r3, #0
 800427e:	e000      	b.n	8004282 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004280:	2302      	movs	r3, #2
  }
}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	80002400 	.word	0x80002400
 8004290:	fe00e800 	.word	0xfe00e800

08004294 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b088      	sub	sp, #32
 8004298:	af02      	add	r7, sp, #8
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	4608      	mov	r0, r1
 800429e:	4611      	mov	r1, r2
 80042a0:	461a      	mov	r2, r3
 80042a2:	4603      	mov	r3, r0
 80042a4:	817b      	strh	r3, [r7, #10]
 80042a6:	460b      	mov	r3, r1
 80042a8:	813b      	strh	r3, [r7, #8]
 80042aa:	4613      	mov	r3, r2
 80042ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	f040 80f9 	bne.w	80044ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80042bc:	6a3b      	ldr	r3, [r7, #32]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d002      	beq.n	80042c8 <HAL_I2C_Mem_Write+0x34>
 80042c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d105      	bne.n	80042d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e0ed      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d101      	bne.n	80042e2 <HAL_I2C_Mem_Write+0x4e>
 80042de:	2302      	movs	r3, #2
 80042e0:	e0e6      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2201      	movs	r2, #1
 80042e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80042ea:	f7fd ff7f 	bl	80021ec <HAL_GetTick>
 80042ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	2319      	movs	r3, #25
 80042f6:	2201      	movs	r2, #1
 80042f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f963 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d001      	beq.n	800430c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0d1      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2221      	movs	r2, #33	; 0x21
 8004310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2240      	movs	r2, #64	; 0x40
 8004318:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a3a      	ldr	r2, [r7, #32]
 8004326:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800432c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004334:	88f8      	ldrh	r0, [r7, #6]
 8004336:	893a      	ldrh	r2, [r7, #8]
 8004338:	8979      	ldrh	r1, [r7, #10]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	4603      	mov	r3, r0
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f000 f8c7 	bl	80044d8 <I2C_RequestMemoryWrite>
 800434a:	4603      	mov	r3, r0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0a9      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2bff      	cmp	r3, #255	; 0xff
 8004364:	d90e      	bls.n	8004384 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	22ff      	movs	r2, #255	; 0xff
 800436a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004370:	b2da      	uxtb	r2, r3
 8004372:	8979      	ldrh	r1, [r7, #10]
 8004374:	2300      	movs	r3, #0
 8004376:	9300      	str	r3, [sp, #0]
 8004378:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f000 fb45 	bl	8004a0c <I2C_TransferConfig>
 8004382:	e00f      	b.n	80043a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004388:	b29a      	uxth	r2, r3
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004392:	b2da      	uxtb	r2, r3
 8004394:	8979      	ldrh	r1, [r7, #10]
 8004396:	2300      	movs	r3, #0
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 fb34 	bl	8004a0c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043a8:	68f8      	ldr	r0, [r7, #12]
 80043aa:	f000 f94d 	bl	8004648 <I2C_WaitOnTXISFlagUntilTimeout>
 80043ae:	4603      	mov	r3, r0
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d001      	beq.n	80043b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e07b      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	1c5a      	adds	r2, r3, #1
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	3b01      	subs	r3, #1
 80043d6:	b29a      	uxth	r2, r3
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d034      	beq.n	800445c <HAL_I2C_Mem_Write+0x1c8>
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d130      	bne.n	800445c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	9300      	str	r3, [sp, #0]
 80043fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004400:	2200      	movs	r2, #0
 8004402:	2180      	movs	r1, #128	; 0x80
 8004404:	68f8      	ldr	r0, [r7, #12]
 8004406:	f000 f8df 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 800440a:	4603      	mov	r3, r0
 800440c:	2b00      	cmp	r3, #0
 800440e:	d001      	beq.n	8004414 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e04d      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2bff      	cmp	r3, #255	; 0xff
 800441c:	d90e      	bls.n	800443c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	22ff      	movs	r2, #255	; 0xff
 8004422:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004428:	b2da      	uxtb	r2, r3
 800442a:	8979      	ldrh	r1, [r7, #10]
 800442c:	2300      	movs	r3, #0
 800442e:	9300      	str	r3, [sp, #0]
 8004430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004434:	68f8      	ldr	r0, [r7, #12]
 8004436:	f000 fae9 	bl	8004a0c <I2C_TransferConfig>
 800443a:	e00f      	b.n	800445c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004440:	b29a      	uxth	r2, r3
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800444a:	b2da      	uxtb	r2, r3
 800444c:	8979      	ldrh	r1, [r7, #10]
 800444e:	2300      	movs	r3, #0
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 fad8 	bl	8004a0c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004460:	b29b      	uxth	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d19e      	bne.n	80043a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f92c 	bl	80046c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
 8004478:	e01a      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2220      	movs	r2, #32
 8004480:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	6859      	ldr	r1, [r3, #4]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	4b0a      	ldr	r3, [pc, #40]	; (80044b8 <HAL_I2C_Mem_Write+0x224>)
 800448e:	400b      	ands	r3, r1
 8004490:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80044ae:	2302      	movs	r3, #2
  }
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3718      	adds	r7, #24
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	fe00e800 	.word	0xfe00e800

080044bc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ca:	b2db      	uxtb	r3, r3
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	4608      	mov	r0, r1
 80044e2:	4611      	mov	r1, r2
 80044e4:	461a      	mov	r2, r3
 80044e6:	4603      	mov	r3, r0
 80044e8:	817b      	strh	r3, [r7, #10]
 80044ea:	460b      	mov	r3, r1
 80044ec:	813b      	strh	r3, [r7, #8]
 80044ee:	4613      	mov	r3, r2
 80044f0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	b2da      	uxtb	r2, r3
 80044f6:	8979      	ldrh	r1, [r7, #10]
 80044f8:	4b20      	ldr	r3, [pc, #128]	; (800457c <I2C_RequestMemoryWrite+0xa4>)
 80044fa:	9300      	str	r3, [sp, #0]
 80044fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004500:	68f8      	ldr	r0, [r7, #12]
 8004502:	f000 fa83 	bl	8004a0c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004506:	69fa      	ldr	r2, [r7, #28]
 8004508:	69b9      	ldr	r1, [r7, #24]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f89c 	bl	8004648 <I2C_WaitOnTXISFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e02c      	b.n	8004574 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800451a:	88fb      	ldrh	r3, [r7, #6]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d105      	bne.n	800452c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004520:	893b      	ldrh	r3, [r7, #8]
 8004522:	b2da      	uxtb	r2, r3
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	629a      	str	r2, [r3, #40]	; 0x28
 800452a:	e015      	b.n	8004558 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800452c:	893b      	ldrh	r3, [r7, #8]
 800452e:	0a1b      	lsrs	r3, r3, #8
 8004530:	b29b      	uxth	r3, r3
 8004532:	b2da      	uxtb	r2, r3
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800453a:	69fa      	ldr	r2, [r7, #28]
 800453c:	69b9      	ldr	r1, [r7, #24]
 800453e:	68f8      	ldr	r0, [r7, #12]
 8004540:	f000 f882 	bl	8004648 <I2C_WaitOnTXISFlagUntilTimeout>
 8004544:	4603      	mov	r3, r0
 8004546:	2b00      	cmp	r3, #0
 8004548:	d001      	beq.n	800454e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e012      	b.n	8004574 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800454e:	893b      	ldrh	r3, [r7, #8]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	2200      	movs	r2, #0
 8004560:	2180      	movs	r1, #128	; 0x80
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 f830 	bl	80045c8 <I2C_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e000      	b.n	8004574 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004572:	2300      	movs	r3, #0
}
 8004574:	4618      	mov	r0, r3
 8004576:	3710      	adds	r7, #16
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	80002000 	.word	0x80002000

08004580 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b02      	cmp	r3, #2
 8004594:	d103      	bne.n	800459e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2200      	movs	r2, #0
 800459c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	f003 0301 	and.w	r3, r3, #1
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d007      	beq.n	80045bc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699a      	ldr	r2, [r3, #24]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	619a      	str	r2, [r3, #24]
  }
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	603b      	str	r3, [r7, #0]
 80045d4:	4613      	mov	r3, r2
 80045d6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045d8:	e022      	b.n	8004620 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e0:	d01e      	beq.n	8004620 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e2:	f7fd fe03 	bl	80021ec <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d302      	bcc.n	80045f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d113      	bne.n	8004620 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fc:	f043 0220 	orr.w	r2, r3, #32
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e00f      	b.n	8004640 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4013      	ands	r3, r2
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	429a      	cmp	r2, r3
 800462e:	bf0c      	ite	eq
 8004630:	2301      	moveq	r3, #1
 8004632:	2300      	movne	r3, #0
 8004634:	b2db      	uxtb	r3, r3
 8004636:	461a      	mov	r2, r3
 8004638:	79fb      	ldrb	r3, [r7, #7]
 800463a:	429a      	cmp	r2, r3
 800463c:	d0cd      	beq.n	80045da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b084      	sub	sp, #16
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004654:	e02c      	b.n	80046b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	68b9      	ldr	r1, [r7, #8]
 800465a:	68f8      	ldr	r0, [r7, #12]
 800465c:	f000 f8ea 	bl	8004834 <I2C_IsErrorOccurred>
 8004660:	4603      	mov	r3, r0
 8004662:	2b00      	cmp	r3, #0
 8004664:	d001      	beq.n	800466a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	e02a      	b.n	80046c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004670:	d01e      	beq.n	80046b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004672:	f7fd fdbb 	bl	80021ec <HAL_GetTick>
 8004676:	4602      	mov	r2, r0
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	1ad3      	subs	r3, r2, r3
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	429a      	cmp	r2, r3
 8004680:	d302      	bcc.n	8004688 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	2b00      	cmp	r3, #0
 8004686:	d113      	bne.n	80046b0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468c:	f043 0220 	orr.w	r2, r3, #32
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	2220      	movs	r2, #32
 8004698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	e007      	b.n	80046c0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	699b      	ldr	r3, [r3, #24]
 80046b6:	f003 0302 	and.w	r3, r3, #2
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d1cb      	bne.n	8004656 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046be:	2300      	movs	r3, #0
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	3710      	adds	r7, #16
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}

080046c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80046d4:	e028      	b.n	8004728 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	68b9      	ldr	r1, [r7, #8]
 80046da:	68f8      	ldr	r0, [r7, #12]
 80046dc:	f000 f8aa 	bl	8004834 <I2C_IsErrorOccurred>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d001      	beq.n	80046ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e026      	b.n	8004738 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ea:	f7fd fd7f 	bl	80021ec <HAL_GetTick>
 80046ee:	4602      	mov	r2, r0
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	1ad3      	subs	r3, r2, r3
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d302      	bcc.n	8004700 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d113      	bne.n	8004728 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004704:	f043 0220 	orr.w	r2, r3, #32
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e007      	b.n	8004738 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	f003 0320 	and.w	r3, r3, #32
 8004732:	2b20      	cmp	r3, #32
 8004734:	d1cf      	bne.n	80046d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004736:	2300      	movs	r3, #0
}
 8004738:	4618      	mov	r0, r3
 800473a:	3710      	adds	r7, #16
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800474c:	e064      	b.n	8004818 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 f86e 	bl	8004834 <I2C_IsErrorOccurred>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e062      	b.n	8004828 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	699b      	ldr	r3, [r3, #24]
 8004768:	f003 0320 	and.w	r3, r3, #32
 800476c:	2b20      	cmp	r3, #32
 800476e:	d138      	bne.n	80047e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f003 0304 	and.w	r3, r3, #4
 800477a:	2b04      	cmp	r3, #4
 800477c:	d105      	bne.n	800478a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004782:	2b00      	cmp	r3, #0
 8004784:	d001      	beq.n	800478a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	e04e      	b.n	8004828 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b10      	cmp	r3, #16
 8004796:	d107      	bne.n	80047a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	2210      	movs	r2, #16
 800479e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2204      	movs	r2, #4
 80047a4:	645a      	str	r2, [r3, #68]	; 0x44
 80047a6:	e002      	b.n	80047ae <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	2200      	movs	r2, #0
 80047ac:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	2220      	movs	r2, #32
 80047b4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	6859      	ldr	r1, [r3, #4]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80047c2:	400b      	ands	r3, r1
 80047c4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2220      	movs	r2, #32
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80047de:	2301      	movs	r3, #1
 80047e0:	e022      	b.n	8004828 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e2:	f7fd fd03 	bl	80021ec <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d302      	bcc.n	80047f8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d10f      	bne.n	8004818 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047fc:	f043 0220 	orr.w	r2, r3, #32
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2220      	movs	r2, #32
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e007      	b.n	8004828 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	f003 0304 	and.w	r3, r3, #4
 8004822:	2b04      	cmp	r3, #4
 8004824:	d193      	bne.n	800474e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004826:	2300      	movs	r3, #0
}
 8004828:	4618      	mov	r0, r3
 800482a:	3710      	adds	r7, #16
 800482c:	46bd      	mov	sp, r7
 800482e:	bd80      	pop	{r7, pc}
 8004830:	fe00e800 	.word	0xfe00e800

08004834 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08a      	sub	sp, #40	; 0x28
 8004838:	af00      	add	r7, sp, #0
 800483a:	60f8      	str	r0, [r7, #12]
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800484e:	2300      	movs	r3, #0
 8004850:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	f003 0310 	and.w	r3, r3, #16
 800485c:	2b00      	cmp	r3, #0
 800485e:	d075      	beq.n	800494c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2210      	movs	r2, #16
 8004866:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004868:	e056      	b.n	8004918 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004870:	d052      	beq.n	8004918 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004872:	f7fd fcbb 	bl	80021ec <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	69fb      	ldr	r3, [r7, #28]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	68ba      	ldr	r2, [r7, #8]
 800487e:	429a      	cmp	r2, r3
 8004880:	d302      	bcc.n	8004888 <I2C_IsErrorOccurred+0x54>
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d147      	bne.n	8004918 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004892:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800489a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699b      	ldr	r3, [r3, #24]
 80048a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048aa:	d12e      	bne.n	800490a <I2C_IsErrorOccurred+0xd6>
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048b2:	d02a      	beq.n	800490a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80048b4:	7cfb      	ldrb	r3, [r7, #19]
 80048b6:	2b20      	cmp	r3, #32
 80048b8:	d027      	beq.n	800490a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685a      	ldr	r2, [r3, #4]
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048c8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80048ca:	f7fd fc8f 	bl	80021ec <HAL_GetTick>
 80048ce:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80048d0:	e01b      	b.n	800490a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80048d2:	f7fd fc8b 	bl	80021ec <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b19      	cmp	r3, #25
 80048de:	d914      	bls.n	800490a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e4:	f043 0220 	orr.w	r2, r3, #32
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004904:	2301      	movs	r3, #1
 8004906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	699b      	ldr	r3, [r3, #24]
 8004910:	f003 0320 	and.w	r3, r3, #32
 8004914:	2b20      	cmp	r3, #32
 8004916:	d1dc      	bne.n	80048d2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	f003 0320 	and.w	r3, r3, #32
 8004922:	2b20      	cmp	r3, #32
 8004924:	d003      	beq.n	800492e <I2C_IsErrorOccurred+0xfa>
 8004926:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800492a:	2b00      	cmp	r3, #0
 800492c:	d09d      	beq.n	800486a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800492e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004932:	2b00      	cmp	r3, #0
 8004934:	d103      	bne.n	800493e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2220      	movs	r2, #32
 800493c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800493e:	6a3b      	ldr	r3, [r7, #32]
 8004940:	f043 0304 	orr.w	r3, r3, #4
 8004944:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004954:	69bb      	ldr	r3, [r7, #24]
 8004956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800495a:	2b00      	cmp	r3, #0
 800495c:	d00b      	beq.n	8004976 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800496e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004976:	69bb      	ldr	r3, [r7, #24]
 8004978:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497c:	2b00      	cmp	r3, #0
 800497e:	d00b      	beq.n	8004998 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	f043 0308 	orr.w	r3, r3, #8
 8004986:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004990:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004992:	2301      	movs	r3, #1
 8004994:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80049a2:	6a3b      	ldr	r3, [r7, #32]
 80049a4:	f043 0302 	orr.w	r3, r3, #2
 80049a8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80049ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d01c      	beq.n	80049fc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80049c2:	68f8      	ldr	r0, [r7, #12]
 80049c4:	f7ff fddc 	bl	8004580 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	6859      	ldr	r1, [r3, #4]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <I2C_IsErrorOccurred+0x1d4>)
 80049d4:	400b      	ands	r3, r1
 80049d6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049dc:	6a3b      	ldr	r3, [r7, #32]
 80049de:	431a      	orrs	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80049fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3728      	adds	r7, #40	; 0x28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	fe00e800 	.word	0xfe00e800

08004a0c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b087      	sub	sp, #28
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	607b      	str	r3, [r7, #4]
 8004a16:	460b      	mov	r3, r1
 8004a18:	817b      	strh	r3, [r7, #10]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a1e:	897b      	ldrh	r3, [r7, #10]
 8004a20:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a24:	7a7b      	ldrb	r3, [r7, #9]
 8004a26:	041b      	lsls	r3, r3, #16
 8004a28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a2c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004a3a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	685a      	ldr	r2, [r3, #4]
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	0d5b      	lsrs	r3, r3, #21
 8004a46:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004a4a:	4b08      	ldr	r3, [pc, #32]	; (8004a6c <I2C_TransferConfig+0x60>)
 8004a4c:	430b      	orrs	r3, r1
 8004a4e:	43db      	mvns	r3, r3
 8004a50:	ea02 0103 	and.w	r1, r2, r3
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	430a      	orrs	r2, r1
 8004a5c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004a5e:	bf00      	nop
 8004a60:	371c      	adds	r7, #28
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	03ff63ff 	.word	0x03ff63ff

08004a70 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d138      	bne.n	8004af8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d101      	bne.n	8004a94 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004a90:	2302      	movs	r3, #2
 8004a92:	e032      	b.n	8004afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2224      	movs	r2, #36	; 0x24
 8004aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f022 0201 	bic.w	r2, r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004ac2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6819      	ldr	r1, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	683a      	ldr	r2, [r7, #0]
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 0201 	orr.w	r2, r2, #1
 8004ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2220      	movs	r2, #32
 8004ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	e000      	b.n	8004afa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004af8:	2302      	movs	r3, #2
  }
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	370c      	adds	r7, #12
 8004afe:	46bd      	mov	sp, r7
 8004b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b04:	4770      	bx	lr

08004b06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004b06:	b480      	push	{r7}
 8004b08:	b085      	sub	sp, #20
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d139      	bne.n	8004b90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b22:	2b01      	cmp	r3, #1
 8004b24:	d101      	bne.n	8004b2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004b26:	2302      	movs	r3, #2
 8004b28:	e033      	b.n	8004b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2224      	movs	r2, #36	; 0x24
 8004b36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f022 0201 	bic.w	r2, r2, #1
 8004b48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004b58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	021b      	lsls	r3, r3, #8
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	4313      	orrs	r3, r2
 8004b62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0201 	orr.w	r2, r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	e000      	b.n	8004b92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004b90:	2302      	movs	r3, #2
  }
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
	...

08004ba0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ba4:	4b05      	ldr	r3, [pc, #20]	; (8004bbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a04      	ldr	r2, [pc, #16]	; (8004bbc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bae:	6013      	str	r3, [r2, #0]
}
 8004bb0:	bf00      	nop
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
 8004bba:	bf00      	nop
 8004bbc:	40007000 	.word	0x40007000

08004bc0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004bc4:	4b04      	ldr	r3, [pc, #16]	; (8004bd8 <HAL_PWREx_GetVoltageRange+0x18>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	46bd      	mov	sp, r7
 8004bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd4:	4770      	bx	lr
 8004bd6:	bf00      	nop
 8004bd8:	40007000 	.word	0x40007000

08004bdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bea:	d130      	bne.n	8004c4e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bec:	4b23      	ldr	r3, [pc, #140]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf8:	d038      	beq.n	8004c6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004bfa:	4b20      	ldr	r3, [pc, #128]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c02:	4a1e      	ldr	r2, [pc, #120]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c04:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c08:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c0a:	4b1d      	ldr	r3, [pc, #116]	; (8004c80 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2232      	movs	r2, #50	; 0x32
 8004c10:	fb02 f303 	mul.w	r3, r2, r3
 8004c14:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004c16:	fba2 2303 	umull	r2, r3, r2, r3
 8004c1a:	0c9b      	lsrs	r3, r3, #18
 8004c1c:	3301      	adds	r3, #1
 8004c1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c20:	e002      	b.n	8004c28 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	3b01      	subs	r3, #1
 8004c26:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c28:	4b14      	ldr	r3, [pc, #80]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c2a:	695b      	ldr	r3, [r3, #20]
 8004c2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c34:	d102      	bne.n	8004c3c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1f2      	bne.n	8004c22 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c3c:	4b0f      	ldr	r3, [pc, #60]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c3e:	695b      	ldr	r3, [r3, #20]
 8004c40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c48:	d110      	bne.n	8004c6c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e00f      	b.n	8004c6e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004c4e:	4b0b      	ldr	r3, [pc, #44]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5a:	d007      	beq.n	8004c6c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c5c:	4b07      	ldr	r3, [pc, #28]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c64:	4a05      	ldr	r2, [pc, #20]	; (8004c7c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c6a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40007000 	.word	0x40007000
 8004c80:	20000004 	.word	0x20000004
 8004c84:	431bde83 	.word	0x431bde83

08004c88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b088      	sub	sp, #32
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d102      	bne.n	8004c9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c96:	2301      	movs	r3, #1
 8004c98:	f000 bc02 	b.w	80054a0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c9c:	4b96      	ldr	r3, [pc, #600]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	f003 030c 	and.w	r3, r3, #12
 8004ca4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ca6:	4b94      	ldr	r3, [pc, #592]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004ca8:	68db      	ldr	r3, [r3, #12]
 8004caa:	f003 0303 	and.w	r3, r3, #3
 8004cae:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0310 	and.w	r3, r3, #16
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	f000 80e4 	beq.w	8004e86 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d007      	beq.n	8004cd4 <HAL_RCC_OscConfig+0x4c>
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	2b0c      	cmp	r3, #12
 8004cc8:	f040 808b 	bne.w	8004de2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004ccc:	697b      	ldr	r3, [r7, #20]
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	f040 8087 	bne.w	8004de2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cd4:	4b88      	ldr	r3, [pc, #544]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d005      	beq.n	8004cec <HAL_RCC_OscConfig+0x64>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	699b      	ldr	r3, [r3, #24]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e3d9      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a1a      	ldr	r2, [r3, #32]
 8004cf0:	4b81      	ldr	r3, [pc, #516]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0308 	and.w	r3, r3, #8
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d004      	beq.n	8004d06 <HAL_RCC_OscConfig+0x7e>
 8004cfc:	4b7e      	ldr	r3, [pc, #504]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d04:	e005      	b.n	8004d12 <HAL_RCC_OscConfig+0x8a>
 8004d06:	4b7c      	ldr	r3, [pc, #496]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d0c:	091b      	lsrs	r3, r3, #4
 8004d0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d223      	bcs.n	8004d5e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a1b      	ldr	r3, [r3, #32]
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f000 fd8c 	bl	8005838 <RCC_SetFlashLatencyFromMSIRange>
 8004d20:	4603      	mov	r3, r0
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d001      	beq.n	8004d2a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e3ba      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d2a:	4b73      	ldr	r3, [pc, #460]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a72      	ldr	r2, [pc, #456]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d30:	f043 0308 	orr.w	r3, r3, #8
 8004d34:	6013      	str	r3, [r2, #0]
 8004d36:	4b70      	ldr	r3, [pc, #448]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	496d      	ldr	r1, [pc, #436]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d48:	4b6b      	ldr	r3, [pc, #428]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	021b      	lsls	r3, r3, #8
 8004d56:	4968      	ldr	r1, [pc, #416]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	604b      	str	r3, [r1, #4]
 8004d5c:	e025      	b.n	8004daa <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d5e:	4b66      	ldr	r3, [pc, #408]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a65      	ldr	r2, [pc, #404]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d64:	f043 0308 	orr.w	r3, r3, #8
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	4b63      	ldr	r3, [pc, #396]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	4960      	ldr	r1, [pc, #384]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d78:	4313      	orrs	r3, r2
 8004d7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d7c:	4b5e      	ldr	r3, [pc, #376]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	69db      	ldr	r3, [r3, #28]
 8004d88:	021b      	lsls	r3, r3, #8
 8004d8a:	495b      	ldr	r1, [pc, #364]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d90:	69bb      	ldr	r3, [r7, #24]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d109      	bne.n	8004daa <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a1b      	ldr	r3, [r3, #32]
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f000 fd4c 	bl	8005838 <RCC_SetFlashLatencyFromMSIRange>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e37a      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004daa:	f000 fc81 	bl	80056b0 <HAL_RCC_GetSysClockFreq>
 8004dae:	4602      	mov	r2, r0
 8004db0:	4b51      	ldr	r3, [pc, #324]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	091b      	lsrs	r3, r3, #4
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	4950      	ldr	r1, [pc, #320]	; (8004efc <HAL_RCC_OscConfig+0x274>)
 8004dbc:	5ccb      	ldrb	r3, [r1, r3]
 8004dbe:	f003 031f 	and.w	r3, r3, #31
 8004dc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc6:	4a4e      	ldr	r2, [pc, #312]	; (8004f00 <HAL_RCC_OscConfig+0x278>)
 8004dc8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004dca:	4b4e      	ldr	r3, [pc, #312]	; (8004f04 <HAL_RCC_OscConfig+0x27c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7fd f9bc 	bl	800214c <HAL_InitTick>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d052      	beq.n	8004e84 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004dde:	7bfb      	ldrb	r3, [r7, #15]
 8004de0:	e35e      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d032      	beq.n	8004e50 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004dea:	4b43      	ldr	r3, [pc, #268]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a42      	ldr	r2, [pc, #264]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004df0:	f043 0301 	orr.w	r3, r3, #1
 8004df4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004df6:	f7fd f9f9 	bl	80021ec <HAL_GetTick>
 8004dfa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dfc:	e008      	b.n	8004e10 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dfe:	f7fd f9f5 	bl	80021ec <HAL_GetTick>
 8004e02:	4602      	mov	r2, r0
 8004e04:	693b      	ldr	r3, [r7, #16]
 8004e06:	1ad3      	subs	r3, r2, r3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d901      	bls.n	8004e10 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004e0c:	2303      	movs	r3, #3
 8004e0e:	e347      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004e10:	4b39      	ldr	r3, [pc, #228]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0302 	and.w	r3, r3, #2
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d0f0      	beq.n	8004dfe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004e1c:	4b36      	ldr	r3, [pc, #216]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	4a35      	ldr	r2, [pc, #212]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e22:	f043 0308 	orr.w	r3, r3, #8
 8004e26:	6013      	str	r3, [r2, #0]
 8004e28:	4b33      	ldr	r3, [pc, #204]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	4930      	ldr	r1, [pc, #192]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004e3a:	4b2f      	ldr	r3, [pc, #188]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	69db      	ldr	r3, [r3, #28]
 8004e46:	021b      	lsls	r3, r3, #8
 8004e48:	492b      	ldr	r1, [pc, #172]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	604b      	str	r3, [r1, #4]
 8004e4e:	e01a      	b.n	8004e86 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e50:	4b29      	ldr	r3, [pc, #164]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a28      	ldr	r2, [pc, #160]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e56:	f023 0301 	bic.w	r3, r3, #1
 8004e5a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e5c:	f7fd f9c6 	bl	80021ec <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e64:	f7fd f9c2 	bl	80021ec <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e314      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e76:	4b20      	ldr	r3, [pc, #128]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f0      	bne.n	8004e64 <HAL_RCC_OscConfig+0x1dc>
 8004e82:	e000      	b.n	8004e86 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e84:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0301 	and.w	r3, r3, #1
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d073      	beq.n	8004f7a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	2b08      	cmp	r3, #8
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x21c>
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	2b0c      	cmp	r3, #12
 8004e9c:	d10e      	bne.n	8004ebc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	2b03      	cmp	r3, #3
 8004ea2:	d10b      	bne.n	8004ebc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ea4:	4b14      	ldr	r3, [pc, #80]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d063      	beq.n	8004f78 <HAL_RCC_OscConfig+0x2f0>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d15f      	bne.n	8004f78 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e2f1      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ec4:	d106      	bne.n	8004ed4 <HAL_RCC_OscConfig+0x24c>
 8004ec6:	4b0c      	ldr	r3, [pc, #48]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a0b      	ldr	r2, [pc, #44]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	e025      	b.n	8004f20 <HAL_RCC_OscConfig+0x298>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004edc:	d114      	bne.n	8004f08 <HAL_RCC_OscConfig+0x280>
 8004ede:	4b06      	ldr	r3, [pc, #24]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a05      	ldr	r2, [pc, #20]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004ee4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ee8:	6013      	str	r3, [r2, #0]
 8004eea:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a02      	ldr	r2, [pc, #8]	; (8004ef8 <HAL_RCC_OscConfig+0x270>)
 8004ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef4:	6013      	str	r3, [r2, #0]
 8004ef6:	e013      	b.n	8004f20 <HAL_RCC_OscConfig+0x298>
 8004ef8:	40021000 	.word	0x40021000
 8004efc:	0800b418 	.word	0x0800b418
 8004f00:	20000004 	.word	0x20000004
 8004f04:	20000008 	.word	0x20000008
 8004f08:	4ba0      	ldr	r3, [pc, #640]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a9f      	ldr	r2, [pc, #636]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8004f0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	4b9d      	ldr	r3, [pc, #628]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a9c      	ldr	r2, [pc, #624]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8004f1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d013      	beq.n	8004f50 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f28:	f7fd f960 	bl	80021ec <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f30:	f7fd f95c 	bl	80021ec <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	; 0x64
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e2ae      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f42:	4b92      	ldr	r3, [pc, #584]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d0f0      	beq.n	8004f30 <HAL_RCC_OscConfig+0x2a8>
 8004f4e:	e014      	b.n	8004f7a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f50:	f7fd f94c 	bl	80021ec <HAL_GetTick>
 8004f54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f56:	e008      	b.n	8004f6a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f58:	f7fd f948 	bl	80021ec <HAL_GetTick>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	1ad3      	subs	r3, r2, r3
 8004f62:	2b64      	cmp	r3, #100	; 0x64
 8004f64:	d901      	bls.n	8004f6a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f66:	2303      	movs	r3, #3
 8004f68:	e29a      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f6a:	4b88      	ldr	r3, [pc, #544]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d1f0      	bne.n	8004f58 <HAL_RCC_OscConfig+0x2d0>
 8004f76:	e000      	b.n	8004f7a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0302 	and.w	r3, r3, #2
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d060      	beq.n	8005048 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d005      	beq.n	8004f98 <HAL_RCC_OscConfig+0x310>
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	2b0c      	cmp	r3, #12
 8004f90:	d119      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d116      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f98:	4b7c      	ldr	r3, [pc, #496]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d005      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x328>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e277      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fb0:	4b76      	ldr	r3, [pc, #472]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	691b      	ldr	r3, [r3, #16]
 8004fbc:	061b      	lsls	r3, r3, #24
 8004fbe:	4973      	ldr	r1, [pc, #460]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fc4:	e040      	b.n	8005048 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	68db      	ldr	r3, [r3, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d023      	beq.n	8005016 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fce:	4b6f      	ldr	r3, [pc, #444]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a6e      	ldr	r2, [pc, #440]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8004fd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fda:	f7fd f907 	bl	80021ec <HAL_GetTick>
 8004fde:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fe0:	e008      	b.n	8004ff4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fe2:	f7fd f903 	bl	80021ec <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d901      	bls.n	8004ff4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ff0:	2303      	movs	r3, #3
 8004ff2:	e255      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ff4:	4b65      	ldr	r3, [pc, #404]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d0f0      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005000:	4b62      	ldr	r3, [pc, #392]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	691b      	ldr	r3, [r3, #16]
 800500c:	061b      	lsls	r3, r3, #24
 800500e:	495f      	ldr	r1, [pc, #380]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8005010:	4313      	orrs	r3, r2
 8005012:	604b      	str	r3, [r1, #4]
 8005014:	e018      	b.n	8005048 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005016:	4b5d      	ldr	r3, [pc, #372]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a5c      	ldr	r2, [pc, #368]	; (800518c <HAL_RCC_OscConfig+0x504>)
 800501c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005020:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005022:	f7fd f8e3 	bl	80021ec <HAL_GetTick>
 8005026:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005028:	e008      	b.n	800503c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800502a:	f7fd f8df 	bl	80021ec <HAL_GetTick>
 800502e:	4602      	mov	r2, r0
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	1ad3      	subs	r3, r2, r3
 8005034:	2b02      	cmp	r3, #2
 8005036:	d901      	bls.n	800503c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005038:	2303      	movs	r3, #3
 800503a:	e231      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800503c:	4b53      	ldr	r3, [pc, #332]	; (800518c <HAL_RCC_OscConfig+0x504>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005044:	2b00      	cmp	r3, #0
 8005046:	d1f0      	bne.n	800502a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0308 	and.w	r3, r3, #8
 8005050:	2b00      	cmp	r3, #0
 8005052:	d03c      	beq.n	80050ce <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01c      	beq.n	8005096 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800505c:	4b4b      	ldr	r3, [pc, #300]	; (800518c <HAL_RCC_OscConfig+0x504>)
 800505e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005062:	4a4a      	ldr	r2, [pc, #296]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8005064:	f043 0301 	orr.w	r3, r3, #1
 8005068:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800506c:	f7fd f8be 	bl	80021ec <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005074:	f7fd f8ba 	bl	80021ec <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b02      	cmp	r3, #2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e20c      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005086:	4b41      	ldr	r3, [pc, #260]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8005088:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d0ef      	beq.n	8005074 <HAL_RCC_OscConfig+0x3ec>
 8005094:	e01b      	b.n	80050ce <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005096:	4b3d      	ldr	r3, [pc, #244]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8005098:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800509c:	4a3b      	ldr	r2, [pc, #236]	; (800518c <HAL_RCC_OscConfig+0x504>)
 800509e:	f023 0301 	bic.w	r3, r3, #1
 80050a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a6:	f7fd f8a1 	bl	80021ec <HAL_GetTick>
 80050aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050ac:	e008      	b.n	80050c0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050ae:	f7fd f89d 	bl	80021ec <HAL_GetTick>
 80050b2:	4602      	mov	r2, r0
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	1ad3      	subs	r3, r2, r3
 80050b8:	2b02      	cmp	r3, #2
 80050ba:	d901      	bls.n	80050c0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80050bc:	2303      	movs	r3, #3
 80050be:	e1ef      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80050c0:	4b32      	ldr	r3, [pc, #200]	; (800518c <HAL_RCC_OscConfig+0x504>)
 80050c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d1ef      	bne.n	80050ae <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 0304 	and.w	r3, r3, #4
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	f000 80a6 	beq.w	8005228 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050dc:	2300      	movs	r3, #0
 80050de:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80050e0:	4b2a      	ldr	r3, [pc, #168]	; (800518c <HAL_RCC_OscConfig+0x504>)
 80050e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10d      	bne.n	8005108 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ec:	4b27      	ldr	r3, [pc, #156]	; (800518c <HAL_RCC_OscConfig+0x504>)
 80050ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f0:	4a26      	ldr	r2, [pc, #152]	; (800518c <HAL_RCC_OscConfig+0x504>)
 80050f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050f6:	6593      	str	r3, [r2, #88]	; 0x58
 80050f8:	4b24      	ldr	r3, [pc, #144]	; (800518c <HAL_RCC_OscConfig+0x504>)
 80050fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005104:	2301      	movs	r3, #1
 8005106:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005108:	4b21      	ldr	r3, [pc, #132]	; (8005190 <HAL_RCC_OscConfig+0x508>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005110:	2b00      	cmp	r3, #0
 8005112:	d118      	bne.n	8005146 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005114:	4b1e      	ldr	r3, [pc, #120]	; (8005190 <HAL_RCC_OscConfig+0x508>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a1d      	ldr	r2, [pc, #116]	; (8005190 <HAL_RCC_OscConfig+0x508>)
 800511a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800511e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005120:	f7fd f864 	bl	80021ec <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005128:	f7fd f860 	bl	80021ec <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b02      	cmp	r3, #2
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e1b2      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800513a:	4b15      	ldr	r3, [pc, #84]	; (8005190 <HAL_RCC_OscConfig+0x508>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	2b01      	cmp	r3, #1
 800514c:	d108      	bne.n	8005160 <HAL_RCC_OscConfig+0x4d8>
 800514e:	4b0f      	ldr	r3, [pc, #60]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8005150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005154:	4a0d      	ldr	r2, [pc, #52]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8005156:	f043 0301 	orr.w	r3, r3, #1
 800515a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800515e:	e029      	b.n	80051b4 <HAL_RCC_OscConfig+0x52c>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	2b05      	cmp	r3, #5
 8005166:	d115      	bne.n	8005194 <HAL_RCC_OscConfig+0x50c>
 8005168:	4b08      	ldr	r3, [pc, #32]	; (800518c <HAL_RCC_OscConfig+0x504>)
 800516a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800516e:	4a07      	ldr	r2, [pc, #28]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8005170:	f043 0304 	orr.w	r3, r3, #4
 8005174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005178:	4b04      	ldr	r3, [pc, #16]	; (800518c <HAL_RCC_OscConfig+0x504>)
 800517a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800517e:	4a03      	ldr	r2, [pc, #12]	; (800518c <HAL_RCC_OscConfig+0x504>)
 8005180:	f043 0301 	orr.w	r3, r3, #1
 8005184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005188:	e014      	b.n	80051b4 <HAL_RCC_OscConfig+0x52c>
 800518a:	bf00      	nop
 800518c:	40021000 	.word	0x40021000
 8005190:	40007000 	.word	0x40007000
 8005194:	4b9a      	ldr	r3, [pc, #616]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 8005196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800519a:	4a99      	ldr	r2, [pc, #612]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 800519c:	f023 0301 	bic.w	r3, r3, #1
 80051a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051a4:	4b96      	ldr	r3, [pc, #600]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 80051a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051aa:	4a95      	ldr	r2, [pc, #596]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 80051ac:	f023 0304 	bic.w	r3, r3, #4
 80051b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	689b      	ldr	r3, [r3, #8]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d016      	beq.n	80051ea <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051bc:	f7fd f816 	bl	80021ec <HAL_GetTick>
 80051c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051c2:	e00a      	b.n	80051da <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051c4:	f7fd f812 	bl	80021ec <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e162      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051da:	4b89      	ldr	r3, [pc, #548]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 80051dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e0:	f003 0302 	and.w	r3, r3, #2
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d0ed      	beq.n	80051c4 <HAL_RCC_OscConfig+0x53c>
 80051e8:	e015      	b.n	8005216 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ea:	f7fc ffff 	bl	80021ec <HAL_GetTick>
 80051ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051f0:	e00a      	b.n	8005208 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051f2:	f7fc fffb 	bl	80021ec <HAL_GetTick>
 80051f6:	4602      	mov	r2, r0
 80051f8:	693b      	ldr	r3, [r7, #16]
 80051fa:	1ad3      	subs	r3, r2, r3
 80051fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005200:	4293      	cmp	r3, r2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e14b      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005208:	4b7d      	ldr	r3, [pc, #500]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 800520a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800520e:	f003 0302 	and.w	r3, r3, #2
 8005212:	2b00      	cmp	r3, #0
 8005214:	d1ed      	bne.n	80051f2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005216:	7ffb      	ldrb	r3, [r7, #31]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d105      	bne.n	8005228 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800521c:	4b78      	ldr	r3, [pc, #480]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 800521e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005220:	4a77      	ldr	r2, [pc, #476]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 8005222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005226:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f003 0320 	and.w	r3, r3, #32
 8005230:	2b00      	cmp	r3, #0
 8005232:	d03c      	beq.n	80052ae <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005238:	2b00      	cmp	r3, #0
 800523a:	d01c      	beq.n	8005276 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800523c:	4b70      	ldr	r3, [pc, #448]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 800523e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005242:	4a6f      	ldr	r2, [pc, #444]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 8005244:	f043 0301 	orr.w	r3, r3, #1
 8005248:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800524c:	f7fc ffce 	bl	80021ec <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005252:	e008      	b.n	8005266 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005254:	f7fc ffca 	bl	80021ec <HAL_GetTick>
 8005258:	4602      	mov	r2, r0
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	1ad3      	subs	r3, r2, r3
 800525e:	2b02      	cmp	r3, #2
 8005260:	d901      	bls.n	8005266 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005262:	2303      	movs	r3, #3
 8005264:	e11c      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005266:	4b66      	ldr	r3, [pc, #408]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 8005268:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0ef      	beq.n	8005254 <HAL_RCC_OscConfig+0x5cc>
 8005274:	e01b      	b.n	80052ae <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005276:	4b62      	ldr	r3, [pc, #392]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 8005278:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800527c:	4a60      	ldr	r2, [pc, #384]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 800527e:	f023 0301 	bic.w	r3, r3, #1
 8005282:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005286:	f7fc ffb1 	bl	80021ec <HAL_GetTick>
 800528a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800528c:	e008      	b.n	80052a0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800528e:	f7fc ffad 	bl	80021ec <HAL_GetTick>
 8005292:	4602      	mov	r2, r0
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	1ad3      	subs	r3, r2, r3
 8005298:	2b02      	cmp	r3, #2
 800529a:	d901      	bls.n	80052a0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800529c:	2303      	movs	r3, #3
 800529e:	e0ff      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052a0:	4b57      	ldr	r3, [pc, #348]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 80052a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1ef      	bne.n	800528e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f000 80f3 	beq.w	800549e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052bc:	2b02      	cmp	r3, #2
 80052be:	f040 80c9 	bne.w	8005454 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80052c2:	4b4f      	ldr	r3, [pc, #316]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 80052c4:	68db      	ldr	r3, [r3, #12]
 80052c6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f003 0203 	and.w	r2, r3, #3
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d2:	429a      	cmp	r2, r3
 80052d4:	d12c      	bne.n	8005330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e0:	3b01      	subs	r3, #1
 80052e2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d123      	bne.n	8005330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d11b      	bne.n	8005330 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005302:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005304:	429a      	cmp	r2, r3
 8005306:	d113      	bne.n	8005330 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	3b01      	subs	r3, #1
 8005316:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005318:	429a      	cmp	r2, r3
 800531a:	d109      	bne.n	8005330 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	085b      	lsrs	r3, r3, #1
 8005328:	3b01      	subs	r3, #1
 800532a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800532c:	429a      	cmp	r2, r3
 800532e:	d06b      	beq.n	8005408 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	2b0c      	cmp	r3, #12
 8005334:	d062      	beq.n	80053fc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005336:	4b32      	ldr	r3, [pc, #200]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005342:	2301      	movs	r3, #1
 8005344:	e0ac      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005346:	4b2e      	ldr	r3, [pc, #184]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a2d      	ldr	r2, [pc, #180]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 800534c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005350:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005352:	f7fc ff4b 	bl	80021ec <HAL_GetTick>
 8005356:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005358:	e008      	b.n	800536c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800535a:	f7fc ff47 	bl	80021ec <HAL_GetTick>
 800535e:	4602      	mov	r2, r0
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	1ad3      	subs	r3, r2, r3
 8005364:	2b02      	cmp	r3, #2
 8005366:	d901      	bls.n	800536c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005368:	2303      	movs	r3, #3
 800536a:	e099      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800536c:	4b24      	ldr	r3, [pc, #144]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005374:	2b00      	cmp	r3, #0
 8005376:	d1f0      	bne.n	800535a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005378:	4b21      	ldr	r3, [pc, #132]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 800537a:	68da      	ldr	r2, [r3, #12]
 800537c:	4b21      	ldr	r3, [pc, #132]	; (8005404 <HAL_RCC_OscConfig+0x77c>)
 800537e:	4013      	ands	r3, r2
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005384:	687a      	ldr	r2, [r7, #4]
 8005386:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005388:	3a01      	subs	r2, #1
 800538a:	0112      	lsls	r2, r2, #4
 800538c:	4311      	orrs	r1, r2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005392:	0212      	lsls	r2, r2, #8
 8005394:	4311      	orrs	r1, r2
 8005396:	687a      	ldr	r2, [r7, #4]
 8005398:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800539a:	0852      	lsrs	r2, r2, #1
 800539c:	3a01      	subs	r2, #1
 800539e:	0552      	lsls	r2, r2, #21
 80053a0:	4311      	orrs	r1, r2
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80053a6:	0852      	lsrs	r2, r2, #1
 80053a8:	3a01      	subs	r2, #1
 80053aa:	0652      	lsls	r2, r2, #25
 80053ac:	4311      	orrs	r1, r2
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80053b2:	06d2      	lsls	r2, r2, #27
 80053b4:	430a      	orrs	r2, r1
 80053b6:	4912      	ldr	r1, [pc, #72]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80053bc:	4b10      	ldr	r3, [pc, #64]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a0f      	ldr	r2, [pc, #60]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 80053c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053c6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053c8:	4b0d      	ldr	r3, [pc, #52]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	4a0c      	ldr	r2, [pc, #48]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 80053ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053d2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053d4:	f7fc ff0a 	bl	80021ec <HAL_GetTick>
 80053d8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053da:	e008      	b.n	80053ee <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053dc:	f7fc ff06 	bl	80021ec <HAL_GetTick>
 80053e0:	4602      	mov	r2, r0
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d901      	bls.n	80053ee <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80053ea:	2303      	movs	r3, #3
 80053ec:	e058      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ee:	4b04      	ldr	r3, [pc, #16]	; (8005400 <HAL_RCC_OscConfig+0x778>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d0f0      	beq.n	80053dc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053fa:	e050      	b.n	800549e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e04f      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
 8005400:	40021000 	.word	0x40021000
 8005404:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005408:	4b27      	ldr	r3, [pc, #156]	; (80054a8 <HAL_RCC_OscConfig+0x820>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005410:	2b00      	cmp	r3, #0
 8005412:	d144      	bne.n	800549e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005414:	4b24      	ldr	r3, [pc, #144]	; (80054a8 <HAL_RCC_OscConfig+0x820>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a23      	ldr	r2, [pc, #140]	; (80054a8 <HAL_RCC_OscConfig+0x820>)
 800541a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800541e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005420:	4b21      	ldr	r3, [pc, #132]	; (80054a8 <HAL_RCC_OscConfig+0x820>)
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	4a20      	ldr	r2, [pc, #128]	; (80054a8 <HAL_RCC_OscConfig+0x820>)
 8005426:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800542a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800542c:	f7fc fede 	bl	80021ec <HAL_GetTick>
 8005430:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005432:	e008      	b.n	8005446 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005434:	f7fc feda 	bl	80021ec <HAL_GetTick>
 8005438:	4602      	mov	r2, r0
 800543a:	693b      	ldr	r3, [r7, #16]
 800543c:	1ad3      	subs	r3, r2, r3
 800543e:	2b02      	cmp	r3, #2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e02c      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005446:	4b18      	ldr	r3, [pc, #96]	; (80054a8 <HAL_RCC_OscConfig+0x820>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d0f0      	beq.n	8005434 <HAL_RCC_OscConfig+0x7ac>
 8005452:	e024      	b.n	800549e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	2b0c      	cmp	r3, #12
 8005458:	d01f      	beq.n	800549a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800545a:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <HAL_RCC_OscConfig+0x820>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a12      	ldr	r2, [pc, #72]	; (80054a8 <HAL_RCC_OscConfig+0x820>)
 8005460:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005466:	f7fc fec1 	bl	80021ec <HAL_GetTick>
 800546a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800546c:	e008      	b.n	8005480 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800546e:	f7fc febd 	bl	80021ec <HAL_GetTick>
 8005472:	4602      	mov	r2, r0
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	1ad3      	subs	r3, r2, r3
 8005478:	2b02      	cmp	r3, #2
 800547a:	d901      	bls.n	8005480 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800547c:	2303      	movs	r3, #3
 800547e:	e00f      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005480:	4b09      	ldr	r3, [pc, #36]	; (80054a8 <HAL_RCC_OscConfig+0x820>)
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1f0      	bne.n	800546e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800548c:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <HAL_RCC_OscConfig+0x820>)
 800548e:	68da      	ldr	r2, [r3, #12]
 8005490:	4905      	ldr	r1, [pc, #20]	; (80054a8 <HAL_RCC_OscConfig+0x820>)
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <HAL_RCC_OscConfig+0x824>)
 8005494:	4013      	ands	r3, r2
 8005496:	60cb      	str	r3, [r1, #12]
 8005498:	e001      	b.n	800549e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800549a:	2301      	movs	r3, #1
 800549c:	e000      	b.n	80054a0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3720      	adds	r7, #32
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40021000 	.word	0x40021000
 80054ac:	feeefffc 	.word	0xfeeefffc

080054b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e0e7      	b.n	8005694 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80054c4:	4b75      	ldr	r3, [pc, #468]	; (800569c <HAL_RCC_ClockConfig+0x1ec>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0307 	and.w	r3, r3, #7
 80054cc:	683a      	ldr	r2, [r7, #0]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d910      	bls.n	80054f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d2:	4b72      	ldr	r3, [pc, #456]	; (800569c <HAL_RCC_ClockConfig+0x1ec>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f023 0207 	bic.w	r2, r3, #7
 80054da:	4970      	ldr	r1, [pc, #448]	; (800569c <HAL_RCC_ClockConfig+0x1ec>)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	4313      	orrs	r3, r2
 80054e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e2:	4b6e      	ldr	r3, [pc, #440]	; (800569c <HAL_RCC_ClockConfig+0x1ec>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0307 	and.w	r3, r3, #7
 80054ea:	683a      	ldr	r2, [r7, #0]
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d001      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80054f0:	2301      	movs	r3, #1
 80054f2:	e0cf      	b.n	8005694 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d010      	beq.n	8005522 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	689a      	ldr	r2, [r3, #8]
 8005504:	4b66      	ldr	r3, [pc, #408]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800550c:	429a      	cmp	r2, r3
 800550e:	d908      	bls.n	8005522 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005510:	4b63      	ldr	r3, [pc, #396]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005512:	689b      	ldr	r3, [r3, #8]
 8005514:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	4960      	ldr	r1, [pc, #384]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 800551e:	4313      	orrs	r3, r2
 8005520:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b00      	cmp	r3, #0
 800552c:	d04c      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	685b      	ldr	r3, [r3, #4]
 8005532:	2b03      	cmp	r3, #3
 8005534:	d107      	bne.n	8005546 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005536:	4b5a      	ldr	r3, [pc, #360]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800553e:	2b00      	cmp	r3, #0
 8005540:	d121      	bne.n	8005586 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e0a6      	b.n	8005694 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b02      	cmp	r3, #2
 800554c:	d107      	bne.n	800555e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800554e:	4b54      	ldr	r3, [pc, #336]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d115      	bne.n	8005586 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e09a      	b.n	8005694 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d107      	bne.n	8005576 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005566:	4b4e      	ldr	r3, [pc, #312]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d109      	bne.n	8005586 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005572:	2301      	movs	r3, #1
 8005574:	e08e      	b.n	8005694 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005576:	4b4a      	ldr	r3, [pc, #296]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005582:	2301      	movs	r3, #1
 8005584:	e086      	b.n	8005694 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005586:	4b46      	ldr	r3, [pc, #280]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f023 0203 	bic.w	r2, r3, #3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	4943      	ldr	r1, [pc, #268]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005594:	4313      	orrs	r3, r2
 8005596:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005598:	f7fc fe28 	bl	80021ec <HAL_GetTick>
 800559c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559e:	e00a      	b.n	80055b6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055a0:	f7fc fe24 	bl	80021ec <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e06e      	b.n	8005694 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b6:	4b3a      	ldr	r3, [pc, #232]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	f003 020c 	and.w	r2, r3, #12
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	009b      	lsls	r3, r3, #2
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d1eb      	bne.n	80055a0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0302 	and.w	r3, r3, #2
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d010      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	689a      	ldr	r2, [r3, #8]
 80055d8:	4b31      	ldr	r3, [pc, #196]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d208      	bcs.n	80055f6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e4:	4b2e      	ldr	r3, [pc, #184]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	492b      	ldr	r1, [pc, #172]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055f6:	4b29      	ldr	r3, [pc, #164]	; (800569c <HAL_RCC_ClockConfig+0x1ec>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0307 	and.w	r3, r3, #7
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	429a      	cmp	r2, r3
 8005602:	d210      	bcs.n	8005626 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005604:	4b25      	ldr	r3, [pc, #148]	; (800569c <HAL_RCC_ClockConfig+0x1ec>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f023 0207 	bic.w	r2, r3, #7
 800560c:	4923      	ldr	r1, [pc, #140]	; (800569c <HAL_RCC_ClockConfig+0x1ec>)
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	4313      	orrs	r3, r2
 8005612:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005614:	4b21      	ldr	r3, [pc, #132]	; (800569c <HAL_RCC_ClockConfig+0x1ec>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 0307 	and.w	r3, r3, #7
 800561c:	683a      	ldr	r2, [r7, #0]
 800561e:	429a      	cmp	r2, r3
 8005620:	d001      	beq.n	8005626 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e036      	b.n	8005694 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0304 	and.w	r3, r3, #4
 800562e:	2b00      	cmp	r3, #0
 8005630:	d008      	beq.n	8005644 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005632:	4b1b      	ldr	r3, [pc, #108]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	4918      	ldr	r1, [pc, #96]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005640:	4313      	orrs	r3, r2
 8005642:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d009      	beq.n	8005664 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005650:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	691b      	ldr	r3, [r3, #16]
 800565c:	00db      	lsls	r3, r3, #3
 800565e:	4910      	ldr	r1, [pc, #64]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 8005660:	4313      	orrs	r3, r2
 8005662:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005664:	f000 f824 	bl	80056b0 <HAL_RCC_GetSysClockFreq>
 8005668:	4602      	mov	r2, r0
 800566a:	4b0d      	ldr	r3, [pc, #52]	; (80056a0 <HAL_RCC_ClockConfig+0x1f0>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	091b      	lsrs	r3, r3, #4
 8005670:	f003 030f 	and.w	r3, r3, #15
 8005674:	490b      	ldr	r1, [pc, #44]	; (80056a4 <HAL_RCC_ClockConfig+0x1f4>)
 8005676:	5ccb      	ldrb	r3, [r1, r3]
 8005678:	f003 031f 	and.w	r3, r3, #31
 800567c:	fa22 f303 	lsr.w	r3, r2, r3
 8005680:	4a09      	ldr	r2, [pc, #36]	; (80056a8 <HAL_RCC_ClockConfig+0x1f8>)
 8005682:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005684:	4b09      	ldr	r3, [pc, #36]	; (80056ac <HAL_RCC_ClockConfig+0x1fc>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4618      	mov	r0, r3
 800568a:	f7fc fd5f 	bl	800214c <HAL_InitTick>
 800568e:	4603      	mov	r3, r0
 8005690:	72fb      	strb	r3, [r7, #11]

  return status;
 8005692:	7afb      	ldrb	r3, [r7, #11]
}
 8005694:	4618      	mov	r0, r3
 8005696:	3710      	adds	r7, #16
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40022000 	.word	0x40022000
 80056a0:	40021000 	.word	0x40021000
 80056a4:	0800b418 	.word	0x0800b418
 80056a8:	20000004 	.word	0x20000004
 80056ac:	20000008 	.word	0x20000008

080056b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b089      	sub	sp, #36	; 0x24
 80056b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	61fb      	str	r3, [r7, #28]
 80056ba:	2300      	movs	r3, #0
 80056bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056be:	4b3e      	ldr	r3, [pc, #248]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f003 030c 	and.w	r3, r3, #12
 80056c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056c8:	4b3b      	ldr	r3, [pc, #236]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0303 	and.w	r3, r3, #3
 80056d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d005      	beq.n	80056e4 <HAL_RCC_GetSysClockFreq+0x34>
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	2b0c      	cmp	r3, #12
 80056dc:	d121      	bne.n	8005722 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b01      	cmp	r3, #1
 80056e2:	d11e      	bne.n	8005722 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80056e4:	4b34      	ldr	r3, [pc, #208]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0308 	and.w	r3, r3, #8
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d107      	bne.n	8005700 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80056f0:	4b31      	ldr	r3, [pc, #196]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x108>)
 80056f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80056f6:	0a1b      	lsrs	r3, r3, #8
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	e005      	b.n	800570c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005700:	4b2d      	ldr	r3, [pc, #180]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	091b      	lsrs	r3, r3, #4
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800570c:	4a2b      	ldr	r2, [pc, #172]	; (80057bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005714:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d10d      	bne.n	8005738 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800571c:	69fb      	ldr	r3, [r7, #28]
 800571e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005720:	e00a      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	2b04      	cmp	r3, #4
 8005726:	d102      	bne.n	800572e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005728:	4b25      	ldr	r3, [pc, #148]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800572a:	61bb      	str	r3, [r7, #24]
 800572c:	e004      	b.n	8005738 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	2b08      	cmp	r3, #8
 8005732:	d101      	bne.n	8005738 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005734:	4b23      	ldr	r3, [pc, #140]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005736:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	2b0c      	cmp	r3, #12
 800573c:	d134      	bne.n	80057a8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800573e:	4b1e      	ldr	r3, [pc, #120]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005740:	68db      	ldr	r3, [r3, #12]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	2b02      	cmp	r3, #2
 800574c:	d003      	beq.n	8005756 <HAL_RCC_GetSysClockFreq+0xa6>
 800574e:	68bb      	ldr	r3, [r7, #8]
 8005750:	2b03      	cmp	r3, #3
 8005752:	d003      	beq.n	800575c <HAL_RCC_GetSysClockFreq+0xac>
 8005754:	e005      	b.n	8005762 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005756:	4b1a      	ldr	r3, [pc, #104]	; (80057c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005758:	617b      	str	r3, [r7, #20]
      break;
 800575a:	e005      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800575c:	4b19      	ldr	r3, [pc, #100]	; (80057c4 <HAL_RCC_GetSysClockFreq+0x114>)
 800575e:	617b      	str	r3, [r7, #20]
      break;
 8005760:	e002      	b.n	8005768 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005762:	69fb      	ldr	r3, [r7, #28]
 8005764:	617b      	str	r3, [r7, #20]
      break;
 8005766:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005768:	4b13      	ldr	r3, [pc, #76]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	091b      	lsrs	r3, r3, #4
 800576e:	f003 0307 	and.w	r3, r3, #7
 8005772:	3301      	adds	r3, #1
 8005774:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005776:	4b10      	ldr	r3, [pc, #64]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	0a1b      	lsrs	r3, r3, #8
 800577c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	fb03 f202 	mul.w	r2, r3, r2
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	fbb2 f3f3 	udiv	r3, r2, r3
 800578c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800578e:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	0e5b      	lsrs	r3, r3, #25
 8005794:	f003 0303 	and.w	r3, r3, #3
 8005798:	3301      	adds	r3, #1
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800579e:	697a      	ldr	r2, [r7, #20]
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80057a8:	69bb      	ldr	r3, [r7, #24]
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3724      	adds	r7, #36	; 0x24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr
 80057b6:	bf00      	nop
 80057b8:	40021000 	.word	0x40021000
 80057bc:	0800b430 	.word	0x0800b430
 80057c0:	00f42400 	.word	0x00f42400
 80057c4:	007a1200 	.word	0x007a1200

080057c8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c8:	b480      	push	{r7}
 80057ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057cc:	4b03      	ldr	r3, [pc, #12]	; (80057dc <HAL_RCC_GetHCLKFreq+0x14>)
 80057ce:	681b      	ldr	r3, [r3, #0]
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr
 80057da:	bf00      	nop
 80057dc:	20000004 	.word	0x20000004

080057e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80057e4:	f7ff fff0 	bl	80057c8 <HAL_RCC_GetHCLKFreq>
 80057e8:	4602      	mov	r2, r0
 80057ea:	4b06      	ldr	r3, [pc, #24]	; (8005804 <HAL_RCC_GetPCLK1Freq+0x24>)
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	0a1b      	lsrs	r3, r3, #8
 80057f0:	f003 0307 	and.w	r3, r3, #7
 80057f4:	4904      	ldr	r1, [pc, #16]	; (8005808 <HAL_RCC_GetPCLK1Freq+0x28>)
 80057f6:	5ccb      	ldrb	r3, [r1, r3]
 80057f8:	f003 031f 	and.w	r3, r3, #31
 80057fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005800:	4618      	mov	r0, r3
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40021000 	.word	0x40021000
 8005808:	0800b428 	.word	0x0800b428

0800580c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005810:	f7ff ffda 	bl	80057c8 <HAL_RCC_GetHCLKFreq>
 8005814:	4602      	mov	r2, r0
 8005816:	4b06      	ldr	r3, [pc, #24]	; (8005830 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	0adb      	lsrs	r3, r3, #11
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	4904      	ldr	r1, [pc, #16]	; (8005834 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005822:	5ccb      	ldrb	r3, [r1, r3]
 8005824:	f003 031f 	and.w	r3, r3, #31
 8005828:	fa22 f303 	lsr.w	r3, r2, r3
}
 800582c:	4618      	mov	r0, r3
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40021000 	.word	0x40021000
 8005834:	0800b428 	.word	0x0800b428

08005838 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005840:	2300      	movs	r3, #0
 8005842:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005844:	4b2a      	ldr	r3, [pc, #168]	; (80058f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d003      	beq.n	8005858 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005850:	f7ff f9b6 	bl	8004bc0 <HAL_PWREx_GetVoltageRange>
 8005854:	6178      	str	r0, [r7, #20]
 8005856:	e014      	b.n	8005882 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005858:	4b25      	ldr	r3, [pc, #148]	; (80058f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800585a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585c:	4a24      	ldr	r2, [pc, #144]	; (80058f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800585e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005862:	6593      	str	r3, [r2, #88]	; 0x58
 8005864:	4b22      	ldr	r3, [pc, #136]	; (80058f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005866:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800586c:	60fb      	str	r3, [r7, #12]
 800586e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005870:	f7ff f9a6 	bl	8004bc0 <HAL_PWREx_GetVoltageRange>
 8005874:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005876:	4b1e      	ldr	r3, [pc, #120]	; (80058f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587a:	4a1d      	ldr	r2, [pc, #116]	; (80058f0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800587c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005880:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005888:	d10b      	bne.n	80058a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2b80      	cmp	r3, #128	; 0x80
 800588e:	d919      	bls.n	80058c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2ba0      	cmp	r3, #160	; 0xa0
 8005894:	d902      	bls.n	800589c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005896:	2302      	movs	r3, #2
 8005898:	613b      	str	r3, [r7, #16]
 800589a:	e013      	b.n	80058c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800589c:	2301      	movs	r3, #1
 800589e:	613b      	str	r3, [r7, #16]
 80058a0:	e010      	b.n	80058c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b80      	cmp	r3, #128	; 0x80
 80058a6:	d902      	bls.n	80058ae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80058a8:	2303      	movs	r3, #3
 80058aa:	613b      	str	r3, [r7, #16]
 80058ac:	e00a      	b.n	80058c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b80      	cmp	r3, #128	; 0x80
 80058b2:	d102      	bne.n	80058ba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058b4:	2302      	movs	r3, #2
 80058b6:	613b      	str	r3, [r7, #16]
 80058b8:	e004      	b.n	80058c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2b70      	cmp	r3, #112	; 0x70
 80058be:	d101      	bne.n	80058c4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058c0:	2301      	movs	r3, #1
 80058c2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80058c4:	4b0b      	ldr	r3, [pc, #44]	; (80058f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f023 0207 	bic.w	r2, r3, #7
 80058cc:	4909      	ldr	r1, [pc, #36]	; (80058f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80058d4:	4b07      	ldr	r3, [pc, #28]	; (80058f4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d001      	beq.n	80058e6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e000      	b.n	80058e8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3718      	adds	r7, #24
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	40021000 	.word	0x40021000
 80058f4:	40022000 	.word	0x40022000

080058f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b086      	sub	sp, #24
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005900:	2300      	movs	r3, #0
 8005902:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005904:	2300      	movs	r3, #0
 8005906:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005910:	2b00      	cmp	r3, #0
 8005912:	d031      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005918:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800591c:	d01a      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800591e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005922:	d814      	bhi.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005924:	2b00      	cmp	r3, #0
 8005926:	d009      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005928:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800592c:	d10f      	bne.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800592e:	4b5d      	ldr	r3, [pc, #372]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	4a5c      	ldr	r2, [pc, #368]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005934:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005938:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800593a:	e00c      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	3304      	adds	r3, #4
 8005940:	2100      	movs	r1, #0
 8005942:	4618      	mov	r0, r3
 8005944:	f000 f9de 	bl	8005d04 <RCCEx_PLLSAI1_Config>
 8005948:	4603      	mov	r3, r0
 800594a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800594c:	e003      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800594e:	2301      	movs	r3, #1
 8005950:	74fb      	strb	r3, [r7, #19]
      break;
 8005952:	e000      	b.n	8005956 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005954:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005956:	7cfb      	ldrb	r3, [r7, #19]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10b      	bne.n	8005974 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800595c:	4b51      	ldr	r3, [pc, #324]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800595e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005962:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596a:	494e      	ldr	r1, [pc, #312]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005972:	e001      	b.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005974:	7cfb      	ldrb	r3, [r7, #19]
 8005976:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 809e 	beq.w	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005986:	2300      	movs	r3, #0
 8005988:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800598a:	4b46      	ldr	r3, [pc, #280]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800598c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800598e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005992:	2b00      	cmp	r3, #0
 8005994:	d101      	bne.n	800599a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005996:	2301      	movs	r3, #1
 8005998:	e000      	b.n	800599c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800599a:	2300      	movs	r3, #0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d00d      	beq.n	80059bc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059a0:	4b40      	ldr	r3, [pc, #256]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a4:	4a3f      	ldr	r2, [pc, #252]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059aa:	6593      	str	r3, [r2, #88]	; 0x58
 80059ac:	4b3d      	ldr	r3, [pc, #244]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b4:	60bb      	str	r3, [r7, #8]
 80059b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059b8:	2301      	movs	r3, #1
 80059ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059bc:	4b3a      	ldr	r3, [pc, #232]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4a39      	ldr	r2, [pc, #228]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80059c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059c8:	f7fc fc10 	bl	80021ec <HAL_GetTick>
 80059cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059ce:	e009      	b.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059d0:	f7fc fc0c 	bl	80021ec <HAL_GetTick>
 80059d4:	4602      	mov	r2, r0
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d902      	bls.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80059de:	2303      	movs	r3, #3
 80059e0:	74fb      	strb	r3, [r7, #19]
        break;
 80059e2:	e005      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80059e4:	4b30      	ldr	r3, [pc, #192]	; (8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d0ef      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80059f0:	7cfb      	ldrb	r3, [r7, #19]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d15a      	bne.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059f6:	4b2b      	ldr	r3, [pc, #172]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80059f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a00:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d01e      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	429a      	cmp	r2, r3
 8005a10:	d019      	beq.n	8005a46 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a12:	4b24      	ldr	r3, [pc, #144]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a1e:	4b21      	ldr	r3, [pc, #132]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a24:	4a1f      	ldr	r2, [pc, #124]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a2e:	4b1d      	ldr	r3, [pc, #116]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a34:	4a1b      	ldr	r2, [pc, #108]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a3e:	4a19      	ldr	r2, [pc, #100]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f003 0301 	and.w	r3, r3, #1
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d016      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a50:	f7fc fbcc 	bl	80021ec <HAL_GetTick>
 8005a54:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a56:	e00b      	b.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a58:	f7fc fbc8 	bl	80021ec <HAL_GetTick>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	1ad3      	subs	r3, r2, r3
 8005a62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a66:	4293      	cmp	r3, r2
 8005a68:	d902      	bls.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005a6a:	2303      	movs	r3, #3
 8005a6c:	74fb      	strb	r3, [r7, #19]
            break;
 8005a6e:	e006      	b.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a70:	4b0c      	ldr	r3, [pc, #48]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d0ec      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005a7e:	7cfb      	ldrb	r3, [r7, #19]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10b      	bne.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a84:	4b07      	ldr	r3, [pc, #28]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a92:	4904      	ldr	r1, [pc, #16]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a9a:	e009      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a9c:	7cfb      	ldrb	r3, [r7, #19]
 8005a9e:	74bb      	strb	r3, [r7, #18]
 8005aa0:	e006      	b.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005aa2:	bf00      	nop
 8005aa4:	40021000 	.word	0x40021000
 8005aa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aac:	7cfb      	ldrb	r3, [r7, #19]
 8005aae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ab0:	7c7b      	ldrb	r3, [r7, #17]
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d105      	bne.n	8005ac2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ab6:	4b8a      	ldr	r3, [pc, #552]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aba:	4a89      	ldr	r2, [pc, #548]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ac0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0301 	and.w	r3, r3, #1
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ace:	4b84      	ldr	r3, [pc, #528]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad4:	f023 0203 	bic.w	r2, r3, #3
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	4980      	ldr	r1, [pc, #512]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0302 	and.w	r3, r3, #2
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00a      	beq.n	8005b06 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005af0:	4b7b      	ldr	r3, [pc, #492]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005af2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af6:	f023 020c 	bic.w	r2, r3, #12
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005afe:	4978      	ldr	r1, [pc, #480]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0320 	and.w	r3, r3, #32
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00a      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b12:	4b73      	ldr	r3, [pc, #460]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b18:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b20:	496f      	ldr	r1, [pc, #444]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00a      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005b34:	4b6a      	ldr	r3, [pc, #424]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b42:	4967      	ldr	r1, [pc, #412]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d00a      	beq.n	8005b6c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005b56:	4b62      	ldr	r3, [pc, #392]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b5c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	495e      	ldr	r1, [pc, #376]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b66:	4313      	orrs	r3, r2
 8005b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b78:	4b59      	ldr	r3, [pc, #356]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b86:	4956      	ldr	r1, [pc, #344]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b88:	4313      	orrs	r3, r2
 8005b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d00a      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b9a:	4b51      	ldr	r3, [pc, #324]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ba0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba8:	494d      	ldr	r1, [pc, #308]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d028      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005bbc:	4b48      	ldr	r3, [pc, #288]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	4945      	ldr	r1, [pc, #276]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bda:	d106      	bne.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bdc:	4b40      	ldr	r3, [pc, #256]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	4a3f      	ldr	r2, [pc, #252]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005be6:	60d3      	str	r3, [r2, #12]
 8005be8:	e011      	b.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bf2:	d10c      	bne.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	3304      	adds	r3, #4
 8005bf8:	2101      	movs	r1, #1
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	f000 f882 	bl	8005d04 <RCCEx_PLLSAI1_Config>
 8005c00:	4603      	mov	r3, r0
 8005c02:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005c04:	7cfb      	ldrb	r3, [r7, #19]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d001      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005c0a:	7cfb      	ldrb	r3, [r7, #19]
 8005c0c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d028      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c1a:	4b31      	ldr	r3, [pc, #196]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c28:	492d      	ldr	r1, [pc, #180]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c38:	d106      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c3a:	4b29      	ldr	r3, [pc, #164]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	4a28      	ldr	r2, [pc, #160]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c44:	60d3      	str	r3, [r2, #12]
 8005c46:	e011      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c50:	d10c      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	3304      	adds	r3, #4
 8005c56:	2101      	movs	r1, #1
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 f853 	bl	8005d04 <RCCEx_PLLSAI1_Config>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c62:	7cfb      	ldrb	r3, [r7, #19]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d001      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005c68:	7cfb      	ldrb	r3, [r7, #19]
 8005c6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d01c      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c78:	4b19      	ldr	r3, [pc, #100]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c86:	4916      	ldr	r1, [pc, #88]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c96:	d10c      	bne.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	2102      	movs	r1, #2
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	f000 f830 	bl	8005d04 <RCCEx_PLLSAI1_Config>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ca8:	7cfb      	ldrb	r3, [r7, #19]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d001      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005cae:	7cfb      	ldrb	r3, [r7, #19]
 8005cb0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d00a      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cbe:	4b08      	ldr	r3, [pc, #32]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cc4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ccc:	4904      	ldr	r1, [pc, #16]	; (8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005cce:	4313      	orrs	r3, r2
 8005cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005cd4:	7cbb      	ldrb	r3, [r7, #18]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}
 8005cde:	bf00      	nop
 8005ce0:	40021000 	.word	0x40021000

08005ce4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005ce4:	b480      	push	{r7}
 8005ce6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005ce8:	4b05      	ldr	r3, [pc, #20]	; (8005d00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a04      	ldr	r2, [pc, #16]	; (8005d00 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005cee:	f043 0304 	orr.w	r3, r3, #4
 8005cf2:	6013      	str	r3, [r2, #0]
}
 8005cf4:	bf00      	nop
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfc:	4770      	bx	lr
 8005cfe:	bf00      	nop
 8005d00:	40021000 	.word	0x40021000

08005d04 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b084      	sub	sp, #16
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d12:	4b74      	ldr	r3, [pc, #464]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d018      	beq.n	8005d50 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d1e:	4b71      	ldr	r3, [pc, #452]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	f003 0203 	and.w	r2, r3, #3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	429a      	cmp	r2, r3
 8005d2c:	d10d      	bne.n	8005d4a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
       ||
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d009      	beq.n	8005d4a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d36:	4b6b      	ldr	r3, [pc, #428]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	091b      	lsrs	r3, r3, #4
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	1c5a      	adds	r2, r3, #1
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
       ||
 8005d46:	429a      	cmp	r2, r3
 8005d48:	d047      	beq.n	8005dda <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	73fb      	strb	r3, [r7, #15]
 8005d4e:	e044      	b.n	8005dda <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2b03      	cmp	r3, #3
 8005d56:	d018      	beq.n	8005d8a <RCCEx_PLLSAI1_Config+0x86>
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d825      	bhi.n	8005da8 <RCCEx_PLLSAI1_Config+0xa4>
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d002      	beq.n	8005d66 <RCCEx_PLLSAI1_Config+0x62>
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d009      	beq.n	8005d78 <RCCEx_PLLSAI1_Config+0x74>
 8005d64:	e020      	b.n	8005da8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d66:	4b5f      	ldr	r3, [pc, #380]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d11d      	bne.n	8005dae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d76:	e01a      	b.n	8005dae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d78:	4b5a      	ldr	r3, [pc, #360]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d116      	bne.n	8005db2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d88:	e013      	b.n	8005db2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005d8a:	4b56      	ldr	r3, [pc, #344]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d10f      	bne.n	8005db6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005d96:	4b53      	ldr	r3, [pc, #332]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005da6:	e006      	b.n	8005db6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005da8:	2301      	movs	r3, #1
 8005daa:	73fb      	strb	r3, [r7, #15]
      break;
 8005dac:	e004      	b.n	8005db8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dae:	bf00      	nop
 8005db0:	e002      	b.n	8005db8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005db2:	bf00      	nop
 8005db4:	e000      	b.n	8005db8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005db6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005db8:	7bfb      	ldrb	r3, [r7, #15]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10d      	bne.n	8005dda <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005dbe:	4b49      	ldr	r3, [pc, #292]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6819      	ldr	r1, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	430b      	orrs	r3, r1
 8005dd4:	4943      	ldr	r1, [pc, #268]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005dda:	7bfb      	ldrb	r3, [r7, #15]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d17c      	bne.n	8005eda <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005de0:	4b40      	ldr	r3, [pc, #256]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a3f      	ldr	r2, [pc, #252]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005de6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005dea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dec:	f7fc f9fe 	bl	80021ec <HAL_GetTick>
 8005df0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005df2:	e009      	b.n	8005e08 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005df4:	f7fc f9fa 	bl	80021ec <HAL_GetTick>
 8005df8:	4602      	mov	r2, r0
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d902      	bls.n	8005e08 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	73fb      	strb	r3, [r7, #15]
        break;
 8005e06:	e005      	b.n	8005e14 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e08:	4b36      	ldr	r3, [pc, #216]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1ef      	bne.n	8005df4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d15f      	bne.n	8005eda <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d110      	bne.n	8005e42 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e20:	4b30      	ldr	r3, [pc, #192]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005e28:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	6892      	ldr	r2, [r2, #8]
 8005e30:	0211      	lsls	r1, r2, #8
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	68d2      	ldr	r2, [r2, #12]
 8005e36:	06d2      	lsls	r2, r2, #27
 8005e38:	430a      	orrs	r2, r1
 8005e3a:	492a      	ldr	r1, [pc, #168]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	610b      	str	r3, [r1, #16]
 8005e40:	e027      	b.n	8005e92 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d112      	bne.n	8005e6e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e48:	4b26      	ldr	r3, [pc, #152]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005e50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	6892      	ldr	r2, [r2, #8]
 8005e58:	0211      	lsls	r1, r2, #8
 8005e5a:	687a      	ldr	r2, [r7, #4]
 8005e5c:	6912      	ldr	r2, [r2, #16]
 8005e5e:	0852      	lsrs	r2, r2, #1
 8005e60:	3a01      	subs	r2, #1
 8005e62:	0552      	lsls	r2, r2, #21
 8005e64:	430a      	orrs	r2, r1
 8005e66:	491f      	ldr	r1, [pc, #124]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	610b      	str	r3, [r1, #16]
 8005e6c:	e011      	b.n	8005e92 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e6e:	4b1d      	ldr	r3, [pc, #116]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e76:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6892      	ldr	r2, [r2, #8]
 8005e7e:	0211      	lsls	r1, r2, #8
 8005e80:	687a      	ldr	r2, [r7, #4]
 8005e82:	6952      	ldr	r2, [r2, #20]
 8005e84:	0852      	lsrs	r2, r2, #1
 8005e86:	3a01      	subs	r2, #1
 8005e88:	0652      	lsls	r2, r2, #25
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	4915      	ldr	r1, [pc, #84]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e8e:	4313      	orrs	r3, r2
 8005e90:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005e92:	4b14      	ldr	r3, [pc, #80]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a13      	ldr	r2, [pc, #76]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005e98:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e9c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e9e:	f7fc f9a5 	bl	80021ec <HAL_GetTick>
 8005ea2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ea4:	e009      	b.n	8005eba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ea6:	f7fc f9a1 	bl	80021ec <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d902      	bls.n	8005eba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	73fb      	strb	r3, [r7, #15]
          break;
 8005eb8:	e005      	b.n	8005ec6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005eba:	4b0a      	ldr	r3, [pc, #40]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d0ef      	beq.n	8005ea6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005ec6:	7bfb      	ldrb	r3, [r7, #15]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ecc:	4b05      	ldr	r3, [pc, #20]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ece:	691a      	ldr	r2, [r3, #16]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	699b      	ldr	r3, [r3, #24]
 8005ed4:	4903      	ldr	r1, [pc, #12]	; (8005ee4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005edc:	4618      	mov	r0, r3
 8005ede:	3710      	adds	r7, #16
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	40021000 	.word	0x40021000

08005ee8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b084      	sub	sp, #16
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e095      	b.n	8006026 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d108      	bne.n	8005f14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005f0a:	d009      	beq.n	8005f20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	61da      	str	r2, [r3, #28]
 8005f12:	e005      	b.n	8005f20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d106      	bne.n	8005f40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2200      	movs	r2, #0
 8005f36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f7fb fc32 	bl	80017a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f56:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f60:	d902      	bls.n	8005f68 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005f62:	2300      	movs	r3, #0
 8005f64:	60fb      	str	r3, [r7, #12]
 8005f66:	e002      	b.n	8005f6e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f6c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005f76:	d007      	beq.n	8005f88 <HAL_SPI_Init+0xa0>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f80:	d002      	beq.n	8005f88 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	689b      	ldr	r3, [r3, #8]
 8005f94:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f98:	431a      	orrs	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0302 	and.w	r3, r3, #2
 8005fa2:	431a      	orrs	r2, r3
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	695b      	ldr	r3, [r3, #20]
 8005fa8:	f003 0301 	and.w	r3, r3, #1
 8005fac:	431a      	orrs	r2, r3
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fb6:	431a      	orrs	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	69db      	ldr	r3, [r3, #28]
 8005fbc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005fc0:	431a      	orrs	r2, r3
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a1b      	ldr	r3, [r3, #32]
 8005fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fca:	ea42 0103 	orr.w	r1, r2, r3
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	430a      	orrs	r2, r1
 8005fdc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	699b      	ldr	r3, [r3, #24]
 8005fe2:	0c1b      	lsrs	r3, r3, #16
 8005fe4:	f003 0204 	and.w	r2, r3, #4
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fec:	f003 0310 	and.w	r3, r3, #16
 8005ff0:	431a      	orrs	r2, r3
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff6:	f003 0308 	and.w	r3, r3, #8
 8005ffa:	431a      	orrs	r2, r3
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006004:	ea42 0103 	orr.w	r1, r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	430a      	orrs	r2, r1
 8006014:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}
	...

08006030 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b086      	sub	sp, #24
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
 800603c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800603e:	2300      	movs	r3, #0
 8006040:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006048:	2b01      	cmp	r3, #1
 800604a:	d101      	bne.n	8006050 <HAL_SPI_TransmitReceive_DMA+0x20>
 800604c:	2302      	movs	r3, #2
 800604e:	e16c      	b.n	800632a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800605e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006066:	7dbb      	ldrb	r3, [r7, #22]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d00d      	beq.n	8006088 <HAL_SPI_TransmitReceive_DMA+0x58>
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006072:	d106      	bne.n	8006082 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d102      	bne.n	8006082 <HAL_SPI_TransmitReceive_DMA+0x52>
 800607c:	7dbb      	ldrb	r3, [r7, #22]
 800607e:	2b04      	cmp	r3, #4
 8006080:	d002      	beq.n	8006088 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006082:	2302      	movs	r3, #2
 8006084:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006086:	e14b      	b.n	8006320 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006088:	68bb      	ldr	r3, [r7, #8]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d005      	beq.n	800609a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d002      	beq.n	800609a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006094:	887b      	ldrh	r3, [r7, #2]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d102      	bne.n	80060a0 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800609e:	e13f      	b.n	8006320 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b04      	cmp	r3, #4
 80060aa:	d003      	beq.n	80060b4 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2205      	movs	r2, #5
 80060b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	887a      	ldrh	r2, [r7, #2]
 80060c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	887a      	ldrh	r2, [r7, #2]
 80060ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	887a      	ldrh	r2, [r7, #2]
 80060d6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	887a      	ldrh	r2, [r7, #2]
 80060de:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	2200      	movs	r2, #0
 80060e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2200      	movs	r2, #0
 80060ec:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80060fc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006106:	d908      	bls.n	800611a <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006116:	605a      	str	r2, [r3, #4]
 8006118:	e06f      	b.n	80061fa <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006128:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006134:	d126      	bne.n	8006184 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800613a:	f003 0301 	and.w	r3, r3, #1
 800613e:	2b00      	cmp	r3, #0
 8006140:	d10f      	bne.n	8006162 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	685a      	ldr	r2, [r3, #4]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006150:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006156:	b29b      	uxth	r3, r3
 8006158:	085b      	lsrs	r3, r3, #1
 800615a:	b29a      	uxth	r2, r3
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006160:	e010      	b.n	8006184 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006170:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006176:	b29b      	uxth	r3, r3
 8006178:	085b      	lsrs	r3, r3, #1
 800617a:	b29b      	uxth	r3, r3
 800617c:	3301      	adds	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800618e:	d134      	bne.n	80061fa <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800619e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	f003 0301 	and.w	r3, r3, #1
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d111      	bne.n	80061d4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061be:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	085b      	lsrs	r3, r3, #1
 80061ca:	b29a      	uxth	r2, r3
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80061d2:	e012      	b.n	80061fa <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	685a      	ldr	r2, [r3, #4]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061e2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061ea:	b29b      	uxth	r3, r3
 80061ec:	085b      	lsrs	r3, r3, #1
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	3301      	adds	r3, #1
 80061f2:	b29a      	uxth	r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b04      	cmp	r3, #4
 8006204:	d108      	bne.n	8006218 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800620a:	4a4a      	ldr	r2, [pc, #296]	; (8006334 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800620c:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006212:	4a49      	ldr	r2, [pc, #292]	; (8006338 <HAL_SPI_TransmitReceive_DMA+0x308>)
 8006214:	62da      	str	r2, [r3, #44]	; 0x2c
 8006216:	e007      	b.n	8006228 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621c:	4a47      	ldr	r2, [pc, #284]	; (800633c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 800621e:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006224:	4a46      	ldr	r2, [pc, #280]	; (8006340 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8006226:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800622c:	4a45      	ldr	r2, [pc, #276]	; (8006344 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800622e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006234:	2200      	movs	r2, #0
 8006236:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	330c      	adds	r3, #12
 8006242:	4619      	mov	r1, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006248:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006250:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006252:	f7fd fa71 	bl	8003738 <HAL_DMA_Start_IT>
 8006256:	4603      	mov	r3, r0
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00c      	beq.n	8006276 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006260:	f043 0210 	orr.w	r2, r3, #16
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2201      	movs	r2, #1
 8006270:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006274:	e054      	b.n	8006320 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f042 0201 	orr.w	r2, r2, #1
 8006284:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800628a:	2200      	movs	r2, #0
 800628c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006292:	2200      	movs	r2, #0
 8006294:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800629a:	2200      	movs	r2, #0
 800629c:	635a      	str	r2, [r3, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a2:	2200      	movs	r2, #0
 80062a4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	4619      	mov	r1, r3
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	330c      	adds	r3, #12
 80062b6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80062bc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80062be:	f7fd fa3b 	bl	8003738 <HAL_DMA_Start_IT>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00c      	beq.n	80062e2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062cc:	f043 0210 	orr.w	r2, r3, #16
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80062e0:	e01e      	b.n	8006320 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ec:	2b40      	cmp	r3, #64	; 0x40
 80062ee:	d007      	beq.n	8006300 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062fe:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685a      	ldr	r2, [r3, #4]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0220 	orr.w	r2, r2, #32
 800630e:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	685a      	ldr	r2, [r3, #4]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0202 	orr.w	r2, r2, #2
 800631e:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006328:	7dfb      	ldrb	r3, [r7, #23]
}
 800632a:	4618      	mov	r0, r3
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	080066cd 	.word	0x080066cd
 8006338:	08006595 	.word	0x08006595
 800633c:	080066e9 	.word	0x080066e9
 8006340:	0800663d 	.word	0x0800663d
 8006344:	08006705 	.word	0x08006705

08006348 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10e      	bne.n	8006388 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8006370:	2b00      	cmp	r3, #0
 8006372:	d009      	beq.n	8006388 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637a:	2b00      	cmp	r3, #0
 800637c:	d004      	beq.n	8006388 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	4798      	blx	r3
    return;
 8006386:	e0ce      	b.n	8006526 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	f003 0302 	and.w	r3, r3, #2
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <HAL_SPI_IRQHandler+0x5e>
 8006392:	69fb      	ldr	r3, [r7, #28]
 8006394:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006398:	2b00      	cmp	r3, #0
 800639a:	d004      	beq.n	80063a6 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	4798      	blx	r3
    return;
 80063a4:	e0bf      	b.n	8006526 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	f003 0320 	and.w	r3, r3, #32
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10a      	bne.n	80063c6 <HAL_SPI_IRQHandler+0x7e>
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d105      	bne.n	80063c6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	f000 80b0 	beq.w	8006526 <HAL_SPI_IRQHandler+0x1de>
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	f003 0320 	and.w	r3, r3, #32
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 80aa 	beq.w	8006526 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d023      	beq.n	8006424 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d011      	beq.n	800640c <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063ec:	f043 0204 	orr.w	r2, r3, #4
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80063f4:	2300      	movs	r3, #0
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	68db      	ldr	r3, [r3, #12]
 80063fe:	617b      	str	r3, [r7, #20]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	617b      	str	r3, [r7, #20]
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	e00b      	b.n	8006424 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800640c:	2300      	movs	r3, #0
 800640e:	613b      	str	r3, [r7, #16]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68db      	ldr	r3, [r3, #12]
 8006416:	613b      	str	r3, [r7, #16]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	613b      	str	r3, [r7, #16]
 8006420:	693b      	ldr	r3, [r7, #16]
        return;
 8006422:	e080      	b.n	8006526 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	f003 0320 	and.w	r3, r3, #32
 800642a:	2b00      	cmp	r3, #0
 800642c:	d014      	beq.n	8006458 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006432:	f043 0201 	orr.w	r2, r3, #1
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	689b      	ldr	r3, [r3, #8]
 8006444:	60fb      	str	r3, [r7, #12]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	681a      	ldr	r2, [r3, #0]
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006454:	601a      	str	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00c      	beq.n	800647c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006466:	f043 0208 	orr.w	r2, r3, #8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800646e:	2300      	movs	r3, #0
 8006470:	60bb      	str	r3, [r7, #8]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	60bb      	str	r3, [r7, #8]
 800647a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006480:	2b00      	cmp	r3, #0
 8006482:	d04f      	beq.n	8006524 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685a      	ldr	r2, [r3, #4]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006492:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d104      	bne.n	80064b0 <HAL_SPI_IRQHandler+0x168>
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d034      	beq.n	800651a <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f022 0203 	bic.w	r2, r2, #3
 80064be:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d011      	beq.n	80064ec <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064cc:	4a17      	ldr	r2, [pc, #92]	; (800652c <HAL_SPI_IRQHandler+0x1e4>)
 80064ce:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d4:	4618      	mov	r0, r3
 80064d6:	f7fd f98f 	bl	80037f8 <HAL_DMA_Abort_IT>
 80064da:	4603      	mov	r3, r0
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d005      	beq.n	80064ec <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064e4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d016      	beq.n	8006522 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064f8:	4a0c      	ldr	r2, [pc, #48]	; (800652c <HAL_SPI_IRQHandler+0x1e4>)
 80064fa:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006500:	4618      	mov	r0, r3
 8006502:	f7fd f979 	bl	80037f8 <HAL_DMA_Abort_IT>
 8006506:	4603      	mov	r3, r0
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006510:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8006518:	e003      	b.n	8006522 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f830 	bl	8006580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006520:	e000      	b.n	8006524 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8006522:	bf00      	nop
    return;
 8006524:	bf00      	nop
  }
}
 8006526:	3720      	adds	r7, #32
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	08006745 	.word	0x08006745

08006530 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr

08006544 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800654c:	bf00      	nop
 800654e:	370c      	adds	r7, #12
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8006558:	b480      	push	{r7}
 800655a:	b083      	sub	sp, #12
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr

0800656c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800656c:	b480      	push	{r7}
 800656e:	b083      	sub	sp, #12
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006574:	bf00      	nop
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr

08006580 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8006580:	b480      	push	{r7}
 8006582:	b083      	sub	sp, #12
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006588:	bf00      	nop
 800658a:	370c      	adds	r7, #12
 800658c:	46bd      	mov	sp, r7
 800658e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006592:	4770      	bx	lr

08006594 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006594:	b580      	push	{r7, lr}
 8006596:	b084      	sub	sp, #16
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80065a2:	f7fb fe23 	bl	80021ec <HAL_GetTick>
 80065a6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	f003 0320 	and.w	r3, r3, #32
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	d03c      	beq.n	8006630 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	685a      	ldr	r2, [r3, #4]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	f022 0220 	bic.w	r2, r2, #32
 80065c4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	689b      	ldr	r3, [r3, #8]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d10d      	bne.n	80065ea <SPI_DMAReceiveCplt+0x56>
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065d6:	d108      	bne.n	80065ea <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	685a      	ldr	r2, [r3, #4]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f022 0203 	bic.w	r2, r2, #3
 80065e6:	605a      	str	r2, [r3, #4]
 80065e8:	e007      	b.n	80065fa <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f022 0201 	bic.w	r2, r2, #1
 80065f8:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	2164      	movs	r1, #100	; 0x64
 80065fe:	68f8      	ldr	r0, [r7, #12]
 8006600:	f000 f9d4 	bl	80069ac <SPI_EndRxTransaction>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d002      	beq.n	8006610 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	2220      	movs	r2, #32
 800660e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006624:	2b00      	cmp	r3, #0
 8006626:	d003      	beq.n	8006630 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8006628:	68f8      	ldr	r0, [r7, #12]
 800662a:	f7ff ffa9 	bl	8006580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800662e:	e002      	b.n	8006636 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f7ff ff7d 	bl	8006530 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006636:	3710      	adds	r7, #16
 8006638:	46bd      	mov	sp, r7
 800663a:	bd80      	pop	{r7, pc}

0800663c <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006648:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800664a:	f7fb fdcf 	bl	80021ec <HAL_GetTick>
 800664e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f003 0320 	and.w	r3, r3, #32
 800665a:	2b20      	cmp	r3, #32
 800665c:	d030      	beq.n	80066c0 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0220 	bic.w	r2, r2, #32
 800666c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800666e:	68ba      	ldr	r2, [r7, #8]
 8006670:	2164      	movs	r1, #100	; 0x64
 8006672:	68f8      	ldr	r0, [r7, #12]
 8006674:	f000 f9f2 	bl	8006a5c <SPI_EndRxTxTransaction>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006682:	f043 0220 	orr.w	r2, r3, #32
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f022 0203 	bic.w	r2, r2, #3
 8006698:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d003      	beq.n	80066c0 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f7ff ff61 	bl	8006580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80066be:	e002      	b.n	80066c6 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7ff ff3f 	bl	8006544 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}

080066cc <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f7ff ff3c 	bl	8006558 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066e0:	bf00      	nop
 80066e2:	3710      	adds	r7, #16
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066e8:	b580      	push	{r7, lr}
 80066ea:	b084      	sub	sp, #16
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff ff38 	bl	800656c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80066fc:	bf00      	nop
 80066fe:	3710      	adds	r7, #16
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006710:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	685a      	ldr	r2, [r3, #4]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0203 	bic.w	r2, r2, #3
 8006720:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006726:	f043 0210 	orr.w	r2, r3, #16
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2201      	movs	r2, #1
 8006732:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f7ff ff22 	bl	8006580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800673c:	bf00      	nop
 800673e:	3710      	adds	r7, #16
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}

08006744 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006750:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006760:	68f8      	ldr	r0, [r7, #12]
 8006762:	f7ff ff0d 	bl	8006580 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006766:	bf00      	nop
 8006768:	3710      	adds	r7, #16
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
	...

08006770 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b088      	sub	sp, #32
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006780:	f7fb fd34 	bl	80021ec <HAL_GetTick>
 8006784:	4602      	mov	r2, r0
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	683a      	ldr	r2, [r7, #0]
 800678c:	4413      	add	r3, r2
 800678e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006790:	f7fb fd2c 	bl	80021ec <HAL_GetTick>
 8006794:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006796:	4b39      	ldr	r3, [pc, #228]	; (800687c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	015b      	lsls	r3, r3, #5
 800679c:	0d1b      	lsrs	r3, r3, #20
 800679e:	69fa      	ldr	r2, [r7, #28]
 80067a0:	fb02 f303 	mul.w	r3, r2, r3
 80067a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067a6:	e054      	b.n	8006852 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067ae:	d050      	beq.n	8006852 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067b0:	f7fb fd1c 	bl	80021ec <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	69fa      	ldr	r2, [r7, #28]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d902      	bls.n	80067c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d13d      	bne.n	8006842 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067de:	d111      	bne.n	8006804 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e8:	d004      	beq.n	80067f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067f2:	d107      	bne.n	8006804 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006802:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006808:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800680c:	d10f      	bne.n	800682e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800681c:	601a      	str	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800682c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2201      	movs	r2, #1
 8006832:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800683e:	2303      	movs	r3, #3
 8006840:	e017      	b.n	8006872 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d101      	bne.n	800684c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006848:	2300      	movs	r3, #0
 800684a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	3b01      	subs	r3, #1
 8006850:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	689a      	ldr	r2, [r3, #8]
 8006858:	68bb      	ldr	r3, [r7, #8]
 800685a:	4013      	ands	r3, r2
 800685c:	68ba      	ldr	r2, [r7, #8]
 800685e:	429a      	cmp	r2, r3
 8006860:	bf0c      	ite	eq
 8006862:	2301      	moveq	r3, #1
 8006864:	2300      	movne	r3, #0
 8006866:	b2db      	uxtb	r3, r3
 8006868:	461a      	mov	r2, r3
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	429a      	cmp	r2, r3
 800686e:	d19b      	bne.n	80067a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006870:	2300      	movs	r3, #0
}
 8006872:	4618      	mov	r0, r3
 8006874:	3720      	adds	r7, #32
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	20000004 	.word	0x20000004

08006880 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08a      	sub	sp, #40	; 0x28
 8006884:	af00      	add	r7, sp, #0
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	607a      	str	r2, [r7, #4]
 800688c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800688e:	2300      	movs	r3, #0
 8006890:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006892:	f7fb fcab 	bl	80021ec <HAL_GetTick>
 8006896:	4602      	mov	r2, r0
 8006898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800689a:	1a9b      	subs	r3, r3, r2
 800689c:	683a      	ldr	r2, [r7, #0]
 800689e:	4413      	add	r3, r2
 80068a0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80068a2:	f7fb fca3 	bl	80021ec <HAL_GetTick>
 80068a6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	330c      	adds	r3, #12
 80068ae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80068b0:	4b3d      	ldr	r3, [pc, #244]	; (80069a8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	4613      	mov	r3, r2
 80068b6:	009b      	lsls	r3, r3, #2
 80068b8:	4413      	add	r3, r2
 80068ba:	00da      	lsls	r2, r3, #3
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	0d1b      	lsrs	r3, r3, #20
 80068c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068c2:	fb02 f303 	mul.w	r3, r2, r3
 80068c6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80068c8:	e060      	b.n	800698c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80068d0:	d107      	bne.n	80068e2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d104      	bne.n	80068e2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80068d8:	69fb      	ldr	r3, [r7, #28]
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80068e0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80068e8:	d050      	beq.n	800698c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068ea:	f7fb fc7f 	bl	80021ec <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	6a3b      	ldr	r3, [r7, #32]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068f6:	429a      	cmp	r2, r3
 80068f8:	d902      	bls.n	8006900 <SPI_WaitFifoStateUntilTimeout+0x80>
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d13d      	bne.n	800697c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	685a      	ldr	r2, [r3, #4]
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800690e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006918:	d111      	bne.n	800693e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	689b      	ldr	r3, [r3, #8]
 800691e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006922:	d004      	beq.n	800692e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800692c:	d107      	bne.n	800693e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800693c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006946:	d10f      	bne.n	8006968 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006956:	601a      	str	r2, [r3, #0]
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	681a      	ldr	r2, [r3, #0]
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006966:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2200      	movs	r2, #0
 8006974:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e010      	b.n	800699e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006982:	2300      	movs	r3, #0
 8006984:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006986:	69bb      	ldr	r3, [r7, #24]
 8006988:	3b01      	subs	r3, #1
 800698a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	689a      	ldr	r2, [r3, #8]
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	4013      	ands	r3, r2
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	429a      	cmp	r2, r3
 800699a:	d196      	bne.n	80068ca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3728      	adds	r7, #40	; 0x28
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20000004 	.word	0x20000004

080069ac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b086      	sub	sp, #24
 80069b0:	af02      	add	r7, sp, #8
 80069b2:	60f8      	str	r0, [r7, #12]
 80069b4:	60b9      	str	r1, [r7, #8]
 80069b6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069c0:	d111      	bne.n	80069e6 <SPI_EndRxTransaction+0x3a>
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80069ca:	d004      	beq.n	80069d6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80069d4:	d107      	bne.n	80069e6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	681a      	ldr	r2, [r3, #0]
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069e4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2200      	movs	r2, #0
 80069ee:	2180      	movs	r1, #128	; 0x80
 80069f0:	68f8      	ldr	r0, [r7, #12]
 80069f2:	f7ff febd 	bl	8006770 <SPI_WaitFlagStateUntilTimeout>
 80069f6:	4603      	mov	r3, r0
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d007      	beq.n	8006a0c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a00:	f043 0220 	orr.w	r2, r3, #32
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e023      	b.n	8006a54 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a14:	d11d      	bne.n	8006a52 <SPI_EndRxTransaction+0xa6>
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a1e:	d004      	beq.n	8006a2a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a28:	d113      	bne.n	8006a52 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	68bb      	ldr	r3, [r7, #8]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f7ff ff22 	bl	8006880 <SPI_WaitFifoStateUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d007      	beq.n	8006a52 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a46:	f043 0220 	orr.w	r2, r3, #32
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e000      	b.n	8006a54 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af02      	add	r7, sp, #8
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	9300      	str	r3, [sp, #0]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006a74:	68f8      	ldr	r0, [r7, #12]
 8006a76:	f7ff ff03 	bl	8006880 <SPI_WaitFifoStateUntilTimeout>
 8006a7a:	4603      	mov	r3, r0
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d007      	beq.n	8006a90 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a84:	f043 0220 	orr.w	r2, r3, #32
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	e027      	b.n	8006ae0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	68bb      	ldr	r3, [r7, #8]
 8006a96:	2200      	movs	r2, #0
 8006a98:	2180      	movs	r1, #128	; 0x80
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f7ff fe68 	bl	8006770 <SPI_WaitFlagStateUntilTimeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d007      	beq.n	8006ab6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006aaa:	f043 0220 	orr.w	r2, r3, #32
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ab2:	2303      	movs	r3, #3
 8006ab4:	e014      	b.n	8006ae0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	68bb      	ldr	r3, [r7, #8]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ac2:	68f8      	ldr	r0, [r7, #12]
 8006ac4:	f7ff fedc 	bl	8006880 <SPI_WaitFifoStateUntilTimeout>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d007      	beq.n	8006ade <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad2:	f043 0220 	orr.w	r2, r3, #32
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e000      	b.n	8006ae0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006ade:	2300      	movs	r3, #0
}
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	3710      	adds	r7, #16
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}

08006ae8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b082      	sub	sp, #8
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d101      	bne.n	8006afa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
 8006af8:	e049      	b.n	8006b8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f7fb f9a2 	bl	8001e58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2202      	movs	r2, #2
 8006b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3304      	adds	r3, #4
 8006b24:	4619      	mov	r1, r3
 8006b26:	4610      	mov	r0, r2
 8006b28:	f000 ff40 	bl	80079ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2201      	movs	r2, #1
 8006b30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2201      	movs	r2, #1
 8006b40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2201      	movs	r2, #1
 8006b50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2201      	movs	r2, #1
 8006b60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2201      	movs	r2, #1
 8006b70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b8c:	2300      	movs	r3, #0
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3708      	adds	r7, #8
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b085      	sub	sp, #20
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d001      	beq.n	8006bb0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006bac:	2301      	movs	r3, #1
 8006bae:	e03b      	b.n	8006c28 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	2202      	movs	r2, #2
 8006bb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	68da      	ldr	r2, [r3, #12]
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f042 0201 	orr.w	r2, r2, #1
 8006bc6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a19      	ldr	r2, [pc, #100]	; (8006c34 <HAL_TIM_Base_Start_IT+0x9c>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d009      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x4e>
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bda:	d004      	beq.n	8006be6 <HAL_TIM_Base_Start_IT+0x4e>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4a15      	ldr	r2, [pc, #84]	; (8006c38 <HAL_TIM_Base_Start_IT+0xa0>)
 8006be2:	4293      	cmp	r3, r2
 8006be4:	d115      	bne.n	8006c12 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	689a      	ldr	r2, [r3, #8]
 8006bec:	4b13      	ldr	r3, [pc, #76]	; (8006c3c <HAL_TIM_Base_Start_IT+0xa4>)
 8006bee:	4013      	ands	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b06      	cmp	r3, #6
 8006bf6:	d015      	beq.n	8006c24 <HAL_TIM_Base_Start_IT+0x8c>
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bfe:	d011      	beq.n	8006c24 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	681a      	ldr	r2, [r3, #0]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c10:	e008      	b.n	8006c24 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f042 0201 	orr.w	r2, r2, #1
 8006c20:	601a      	str	r2, [r3, #0]
 8006c22:	e000      	b.n	8006c26 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006c24:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006c26:	2300      	movs	r3, #0
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3714      	adds	r7, #20
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr
 8006c34:	40012c00 	.word	0x40012c00
 8006c38:	40014000 	.word	0x40014000
 8006c3c:	00010007 	.word	0x00010007

08006c40 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b083      	sub	sp, #12
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0201 	bic.w	r2, r2, #1
 8006c56:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6a1a      	ldr	r2, [r3, #32]
 8006c5e:	f241 1311 	movw	r3, #4369	; 0x1111
 8006c62:	4013      	ands	r3, r2
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d10f      	bne.n	8006c88 <HAL_TIM_Base_Stop_IT+0x48>
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6a1a      	ldr	r2, [r3, #32]
 8006c6e:	f240 4344 	movw	r3, #1092	; 0x444
 8006c72:	4013      	ands	r3, r2
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d107      	bne.n	8006c88 <HAL_TIM_Base_Stop_IT+0x48>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	370c      	adds	r7, #12
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr

08006c9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b082      	sub	sp, #8
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006cac:	2301      	movs	r3, #1
 8006cae:	e049      	b.n	8006d44 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cb6:	b2db      	uxtb	r3, r3
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d106      	bne.n	8006cca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f841 	bl	8006d4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2202      	movs	r2, #2
 8006cce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	3304      	adds	r3, #4
 8006cda:	4619      	mov	r1, r3
 8006cdc:	4610      	mov	r0, r2
 8006cde:	f000 fe65 	bl	80079ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2201      	movs	r2, #1
 8006d06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2201      	movs	r2, #1
 8006d26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d42:	2300      	movs	r3, #0
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b083      	sub	sp, #12
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006d54:	bf00      	nop
 8006d56:	370c      	adds	r7, #12
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr

08006d60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d109      	bne.n	8006d84 <HAL_TIM_PWM_Start+0x24>
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	bf14      	ite	ne
 8006d7c:	2301      	movne	r3, #1
 8006d7e:	2300      	moveq	r3, #0
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	e03c      	b.n	8006dfe <HAL_TIM_PWM_Start+0x9e>
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	2b04      	cmp	r3, #4
 8006d88:	d109      	bne.n	8006d9e <HAL_TIM_PWM_Start+0x3e>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	bf14      	ite	ne
 8006d96:	2301      	movne	r3, #1
 8006d98:	2300      	moveq	r3, #0
 8006d9a:	b2db      	uxtb	r3, r3
 8006d9c:	e02f      	b.n	8006dfe <HAL_TIM_PWM_Start+0x9e>
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	2b08      	cmp	r3, #8
 8006da2:	d109      	bne.n	8006db8 <HAL_TIM_PWM_Start+0x58>
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006daa:	b2db      	uxtb	r3, r3
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	bf14      	ite	ne
 8006db0:	2301      	movne	r3, #1
 8006db2:	2300      	moveq	r3, #0
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	e022      	b.n	8006dfe <HAL_TIM_PWM_Start+0x9e>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	2b0c      	cmp	r3, #12
 8006dbc:	d109      	bne.n	8006dd2 <HAL_TIM_PWM_Start+0x72>
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	bf14      	ite	ne
 8006dca:	2301      	movne	r3, #1
 8006dcc:	2300      	moveq	r3, #0
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	e015      	b.n	8006dfe <HAL_TIM_PWM_Start+0x9e>
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	2b10      	cmp	r3, #16
 8006dd6:	d109      	bne.n	8006dec <HAL_TIM_PWM_Start+0x8c>
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	bf14      	ite	ne
 8006de4:	2301      	movne	r3, #1
 8006de6:	2300      	moveq	r3, #0
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	e008      	b.n	8006dfe <HAL_TIM_PWM_Start+0x9e>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	bf14      	ite	ne
 8006df8:	2301      	movne	r3, #1
 8006dfa:	2300      	moveq	r3, #0
 8006dfc:	b2db      	uxtb	r3, r3
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d001      	beq.n	8006e06 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	e07e      	b.n	8006f04 <HAL_TIM_PWM_Start+0x1a4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d104      	bne.n	8006e16 <HAL_TIM_PWM_Start+0xb6>
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2202      	movs	r2, #2
 8006e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006e14:	e023      	b.n	8006e5e <HAL_TIM_PWM_Start+0xfe>
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	2b04      	cmp	r3, #4
 8006e1a:	d104      	bne.n	8006e26 <HAL_TIM_PWM_Start+0xc6>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	2202      	movs	r2, #2
 8006e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006e24:	e01b      	b.n	8006e5e <HAL_TIM_PWM_Start+0xfe>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d104      	bne.n	8006e36 <HAL_TIM_PWM_Start+0xd6>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006e34:	e013      	b.n	8006e5e <HAL_TIM_PWM_Start+0xfe>
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b0c      	cmp	r3, #12
 8006e3a:	d104      	bne.n	8006e46 <HAL_TIM_PWM_Start+0xe6>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2202      	movs	r2, #2
 8006e40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006e44:	e00b      	b.n	8006e5e <HAL_TIM_PWM_Start+0xfe>
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	2b10      	cmp	r3, #16
 8006e4a:	d104      	bne.n	8006e56 <HAL_TIM_PWM_Start+0xf6>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2202      	movs	r2, #2
 8006e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006e54:	e003      	b.n	8006e5e <HAL_TIM_PWM_Start+0xfe>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2202      	movs	r2, #2
 8006e5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	2201      	movs	r2, #1
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f001 fa28 	bl	80082bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	4a26      	ldr	r2, [pc, #152]	; (8006f0c <HAL_TIM_PWM_Start+0x1ac>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d009      	beq.n	8006e8a <HAL_TIM_PWM_Start+0x12a>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a25      	ldr	r2, [pc, #148]	; (8006f10 <HAL_TIM_PWM_Start+0x1b0>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d004      	beq.n	8006e8a <HAL_TIM_PWM_Start+0x12a>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a23      	ldr	r2, [pc, #140]	; (8006f14 <HAL_TIM_PWM_Start+0x1b4>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d101      	bne.n	8006e8e <HAL_TIM_PWM_Start+0x12e>
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e000      	b.n	8006e90 <HAL_TIM_PWM_Start+0x130>
 8006e8e:	2300      	movs	r3, #0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d007      	beq.n	8006ea4 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006ea2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a18      	ldr	r2, [pc, #96]	; (8006f0c <HAL_TIM_PWM_Start+0x1ac>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d009      	beq.n	8006ec2 <HAL_TIM_PWM_Start+0x162>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb6:	d004      	beq.n	8006ec2 <HAL_TIM_PWM_Start+0x162>
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4a14      	ldr	r2, [pc, #80]	; (8006f10 <HAL_TIM_PWM_Start+0x1b0>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d115      	bne.n	8006eee <HAL_TIM_PWM_Start+0x18e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	689a      	ldr	r2, [r3, #8]
 8006ec8:	4b13      	ldr	r3, [pc, #76]	; (8006f18 <HAL_TIM_PWM_Start+0x1b8>)
 8006eca:	4013      	ands	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2b06      	cmp	r3, #6
 8006ed2:	d015      	beq.n	8006f00 <HAL_TIM_PWM_Start+0x1a0>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006eda:	d011      	beq.n	8006f00 <HAL_TIM_PWM_Start+0x1a0>
    {
      __HAL_TIM_ENABLE(htim);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681a      	ldr	r2, [r3, #0]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f042 0201 	orr.w	r2, r2, #1
 8006eea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006eec:	e008      	b.n	8006f00 <HAL_TIM_PWM_Start+0x1a0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681a      	ldr	r2, [r3, #0]
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f042 0201 	orr.w	r2, r2, #1
 8006efc:	601a      	str	r2, [r3, #0]
 8006efe:	e000      	b.n	8006f02 <HAL_TIM_PWM_Start+0x1a2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006f00:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006f02:	2300      	movs	r3, #0
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3710      	adds	r7, #16
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40012c00 	.word	0x40012c00
 8006f10:	40014000 	.word	0x40014000
 8006f14:	40014400 	.word	0x40014400
 8006f18:	00010007 	.word	0x00010007

08006f1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e049      	b.n	8006fc2 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f841 	bl	8006fca <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f000 fd26 	bl	80079ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006fd2:	bf00      	nop
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
	...

08006fe0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006fea:	2300      	movs	r3, #0
 8006fec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d104      	bne.n	8006ffe <HAL_TIM_IC_Start_IT+0x1e>
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	e023      	b.n	8007046 <HAL_TIM_IC_Start_IT+0x66>
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	2b04      	cmp	r3, #4
 8007002:	d104      	bne.n	800700e <HAL_TIM_IC_Start_IT+0x2e>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800700a:	b2db      	uxtb	r3, r3
 800700c:	e01b      	b.n	8007046 <HAL_TIM_IC_Start_IT+0x66>
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	2b08      	cmp	r3, #8
 8007012:	d104      	bne.n	800701e <HAL_TIM_IC_Start_IT+0x3e>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800701a:	b2db      	uxtb	r3, r3
 800701c:	e013      	b.n	8007046 <HAL_TIM_IC_Start_IT+0x66>
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	2b0c      	cmp	r3, #12
 8007022:	d104      	bne.n	800702e <HAL_TIM_IC_Start_IT+0x4e>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800702a:	b2db      	uxtb	r3, r3
 800702c:	e00b      	b.n	8007046 <HAL_TIM_IC_Start_IT+0x66>
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	2b10      	cmp	r3, #16
 8007032:	d104      	bne.n	800703e <HAL_TIM_IC_Start_IT+0x5e>
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800703a:	b2db      	uxtb	r3, r3
 800703c:	e003      	b.n	8007046 <HAL_TIM_IC_Start_IT+0x66>
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007044:	b2db      	uxtb	r3, r3
 8007046:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d104      	bne.n	8007058 <HAL_TIM_IC_Start_IT+0x78>
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007054:	b2db      	uxtb	r3, r3
 8007056:	e013      	b.n	8007080 <HAL_TIM_IC_Start_IT+0xa0>
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	2b04      	cmp	r3, #4
 800705c:	d104      	bne.n	8007068 <HAL_TIM_IC_Start_IT+0x88>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007064:	b2db      	uxtb	r3, r3
 8007066:	e00b      	b.n	8007080 <HAL_TIM_IC_Start_IT+0xa0>
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b08      	cmp	r3, #8
 800706c:	d104      	bne.n	8007078 <HAL_TIM_IC_Start_IT+0x98>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007074:	b2db      	uxtb	r3, r3
 8007076:	e003      	b.n	8007080 <HAL_TIM_IC_Start_IT+0xa0>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800707e:	b2db      	uxtb	r3, r3
 8007080:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8007082:	7bbb      	ldrb	r3, [r7, #14]
 8007084:	2b01      	cmp	r3, #1
 8007086:	d102      	bne.n	800708e <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8007088:	7b7b      	ldrb	r3, [r7, #13]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d001      	beq.n	8007092 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e0c9      	b.n	8007226 <HAL_TIM_IC_Start_IT+0x246>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007092:	683b      	ldr	r3, [r7, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d104      	bne.n	80070a2 <HAL_TIM_IC_Start_IT+0xc2>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070a0:	e023      	b.n	80070ea <HAL_TIM_IC_Start_IT+0x10a>
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b04      	cmp	r3, #4
 80070a6:	d104      	bne.n	80070b2 <HAL_TIM_IC_Start_IT+0xd2>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2202      	movs	r2, #2
 80070ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070b0:	e01b      	b.n	80070ea <HAL_TIM_IC_Start_IT+0x10a>
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	2b08      	cmp	r3, #8
 80070b6:	d104      	bne.n	80070c2 <HAL_TIM_IC_Start_IT+0xe2>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2202      	movs	r2, #2
 80070bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070c0:	e013      	b.n	80070ea <HAL_TIM_IC_Start_IT+0x10a>
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b0c      	cmp	r3, #12
 80070c6:	d104      	bne.n	80070d2 <HAL_TIM_IC_Start_IT+0xf2>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2202      	movs	r2, #2
 80070cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070d0:	e00b      	b.n	80070ea <HAL_TIM_IC_Start_IT+0x10a>
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	2b10      	cmp	r3, #16
 80070d6:	d104      	bne.n	80070e2 <HAL_TIM_IC_Start_IT+0x102>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2202      	movs	r2, #2
 80070dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070e0:	e003      	b.n	80070ea <HAL_TIM_IC_Start_IT+0x10a>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2202      	movs	r2, #2
 80070e6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d104      	bne.n	80070fa <HAL_TIM_IC_Start_IT+0x11a>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2202      	movs	r2, #2
 80070f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f8:	e013      	b.n	8007122 <HAL_TIM_IC_Start_IT+0x142>
 80070fa:	683b      	ldr	r3, [r7, #0]
 80070fc:	2b04      	cmp	r3, #4
 80070fe:	d104      	bne.n	800710a <HAL_TIM_IC_Start_IT+0x12a>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2202      	movs	r2, #2
 8007104:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007108:	e00b      	b.n	8007122 <HAL_TIM_IC_Start_IT+0x142>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	2b08      	cmp	r3, #8
 800710e:	d104      	bne.n	800711a <HAL_TIM_IC_Start_IT+0x13a>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007118:	e003      	b.n	8007122 <HAL_TIM_IC_Start_IT+0x142>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2202      	movs	r2, #2
 800711e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b0c      	cmp	r3, #12
 8007126:	d841      	bhi.n	80071ac <HAL_TIM_IC_Start_IT+0x1cc>
 8007128:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <HAL_TIM_IC_Start_IT+0x150>)
 800712a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712e:	bf00      	nop
 8007130:	08007165 	.word	0x08007165
 8007134:	080071ad 	.word	0x080071ad
 8007138:	080071ad 	.word	0x080071ad
 800713c:	080071ad 	.word	0x080071ad
 8007140:	08007177 	.word	0x08007177
 8007144:	080071ad 	.word	0x080071ad
 8007148:	080071ad 	.word	0x080071ad
 800714c:	080071ad 	.word	0x080071ad
 8007150:	08007189 	.word	0x08007189
 8007154:	080071ad 	.word	0x080071ad
 8007158:	080071ad 	.word	0x080071ad
 800715c:	080071ad 	.word	0x080071ad
 8007160:	0800719b 	.word	0x0800719b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68da      	ldr	r2, [r3, #12]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f042 0202 	orr.w	r2, r2, #2
 8007172:	60da      	str	r2, [r3, #12]
      break;
 8007174:	e01d      	b.n	80071b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	68da      	ldr	r2, [r3, #12]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f042 0204 	orr.w	r2, r2, #4
 8007184:	60da      	str	r2, [r3, #12]
      break;
 8007186:	e014      	b.n	80071b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 0208 	orr.w	r2, r2, #8
 8007196:	60da      	str	r2, [r3, #12]
      break;
 8007198:	e00b      	b.n	80071b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68da      	ldr	r2, [r3, #12]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f042 0210 	orr.w	r2, r2, #16
 80071a8:	60da      	str	r2, [r3, #12]
      break;
 80071aa:	e002      	b.n	80071b2 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	73fb      	strb	r3, [r7, #15]
      break;
 80071b0:	bf00      	nop
  }

  if (status == HAL_OK)
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d135      	bne.n	8007224 <HAL_TIM_IC_Start_IT+0x244>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	2201      	movs	r2, #1
 80071be:	6839      	ldr	r1, [r7, #0]
 80071c0:	4618      	mov	r0, r3
 80071c2:	f001 f87b 	bl	80082bc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a19      	ldr	r2, [pc, #100]	; (8007230 <HAL_TIM_IC_Start_IT+0x250>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d009      	beq.n	80071e4 <HAL_TIM_IC_Start_IT+0x204>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071d8:	d004      	beq.n	80071e4 <HAL_TIM_IC_Start_IT+0x204>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a15      	ldr	r2, [pc, #84]	; (8007234 <HAL_TIM_IC_Start_IT+0x254>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d115      	bne.n	8007210 <HAL_TIM_IC_Start_IT+0x230>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	689a      	ldr	r2, [r3, #8]
 80071ea:	4b13      	ldr	r3, [pc, #76]	; (8007238 <HAL_TIM_IC_Start_IT+0x258>)
 80071ec:	4013      	ands	r3, r2
 80071ee:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071f0:	68bb      	ldr	r3, [r7, #8]
 80071f2:	2b06      	cmp	r3, #6
 80071f4:	d015      	beq.n	8007222 <HAL_TIM_IC_Start_IT+0x242>
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071fc:	d011      	beq.n	8007222 <HAL_TIM_IC_Start_IT+0x242>
      {
        __HAL_TIM_ENABLE(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681a      	ldr	r2, [r3, #0]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f042 0201 	orr.w	r2, r2, #1
 800720c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800720e:	e008      	b.n	8007222 <HAL_TIM_IC_Start_IT+0x242>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f042 0201 	orr.w	r2, r2, #1
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	e000      	b.n	8007224 <HAL_TIM_IC_Start_IT+0x244>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007222:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8007224:	7bfb      	ldrb	r3, [r7, #15]
}
 8007226:	4618      	mov	r0, r3
 8007228:	3710      	adds	r7, #16
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}
 800722e:	bf00      	nop
 8007230:	40012c00 	.word	0x40012c00
 8007234:	40014000 	.word	0x40014000
 8007238:	00010007 	.word	0x00010007

0800723c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	691b      	ldr	r3, [r3, #16]
 800724a:	f003 0302 	and.w	r3, r3, #2
 800724e:	2b02      	cmp	r3, #2
 8007250:	d122      	bne.n	8007298 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	2b02      	cmp	r3, #2
 800725e:	d11b      	bne.n	8007298 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f06f 0202 	mvn.w	r2, #2
 8007268:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	699b      	ldr	r3, [r3, #24]
 8007276:	f003 0303 	and.w	r3, r3, #3
 800727a:	2b00      	cmp	r3, #0
 800727c:	d003      	beq.n	8007286 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f7fa f974 	bl	800156c <HAL_TIM_IC_CaptureCallback>
 8007284:	e005      	b.n	8007292 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007286:	6878      	ldr	r0, [r7, #4]
 8007288:	f000 fb71 	bl	800796e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fb78 	bl	8007982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	f003 0304 	and.w	r3, r3, #4
 80072a2:	2b04      	cmp	r3, #4
 80072a4:	d122      	bne.n	80072ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	68db      	ldr	r3, [r3, #12]
 80072ac:	f003 0304 	and.w	r3, r3, #4
 80072b0:	2b04      	cmp	r3, #4
 80072b2:	d11b      	bne.n	80072ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f06f 0204 	mvn.w	r2, #4
 80072bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2202      	movs	r2, #2
 80072c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	699b      	ldr	r3, [r3, #24]
 80072ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d003      	beq.n	80072da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7fa f94a 	bl	800156c <HAL_TIM_IC_CaptureCallback>
 80072d8:	e005      	b.n	80072e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072da:	6878      	ldr	r0, [r7, #4]
 80072dc:	f000 fb47 	bl	800796e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f000 fb4e 	bl	8007982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	691b      	ldr	r3, [r3, #16]
 80072f2:	f003 0308 	and.w	r3, r3, #8
 80072f6:	2b08      	cmp	r3, #8
 80072f8:	d122      	bne.n	8007340 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	f003 0308 	and.w	r3, r3, #8
 8007304:	2b08      	cmp	r3, #8
 8007306:	d11b      	bne.n	8007340 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f06f 0208 	mvn.w	r2, #8
 8007310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2204      	movs	r2, #4
 8007316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	69db      	ldr	r3, [r3, #28]
 800731e:	f003 0303 	and.w	r3, r3, #3
 8007322:	2b00      	cmp	r3, #0
 8007324:	d003      	beq.n	800732e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7fa f920 	bl	800156c <HAL_TIM_IC_CaptureCallback>
 800732c:	e005      	b.n	800733a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fb1d 	bl	800796e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 fb24 	bl	8007982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	2200      	movs	r2, #0
 800733e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	f003 0310 	and.w	r3, r3, #16
 800734a:	2b10      	cmp	r3, #16
 800734c:	d122      	bne.n	8007394 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	68db      	ldr	r3, [r3, #12]
 8007354:	f003 0310 	and.w	r3, r3, #16
 8007358:	2b10      	cmp	r3, #16
 800735a:	d11b      	bne.n	8007394 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f06f 0210 	mvn.w	r2, #16
 8007364:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	2208      	movs	r2, #8
 800736a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	69db      	ldr	r3, [r3, #28]
 8007372:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007376:	2b00      	cmp	r3, #0
 8007378:	d003      	beq.n	8007382 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800737a:	6878      	ldr	r0, [r7, #4]
 800737c:	f7fa f8f6 	bl	800156c <HAL_TIM_IC_CaptureCallback>
 8007380:	e005      	b.n	800738e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 faf3 	bl	800796e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f000 fafa 	bl	8007982 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2200      	movs	r2, #0
 8007392:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	691b      	ldr	r3, [r3, #16]
 800739a:	f003 0301 	and.w	r3, r3, #1
 800739e:	2b01      	cmp	r3, #1
 80073a0:	d10e      	bne.n	80073c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f003 0301 	and.w	r3, r3, #1
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d107      	bne.n	80073c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f06f 0201 	mvn.w	r2, #1
 80073b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7fa f99e 	bl	80016fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073ca:	2b80      	cmp	r3, #128	; 0x80
 80073cc:	d10e      	bne.n	80073ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	68db      	ldr	r3, [r3, #12]
 80073d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80073d8:	2b80      	cmp	r3, #128	; 0x80
 80073da:	d107      	bne.n	80073ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80073e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f001 f876 	bl	80084d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	691b      	ldr	r3, [r3, #16]
 80073f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073fa:	d10e      	bne.n	800741a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007406:	2b80      	cmp	r3, #128	; 0x80
 8007408:	d107      	bne.n	800741a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007412:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f001 f869 	bl	80084ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	d10e      	bne.n	8007446 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	68db      	ldr	r3, [r3, #12]
 800742e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d107      	bne.n	8007446 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800743e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 faa8 	bl	8007996 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	f003 0320 	and.w	r3, r3, #32
 8007450:	2b20      	cmp	r3, #32
 8007452:	d10e      	bne.n	8007472 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	f003 0320 	and.w	r3, r3, #32
 800745e:	2b20      	cmp	r3, #32
 8007460:	d107      	bne.n	8007472 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	f06f 0220 	mvn.w	r2, #32
 800746a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f001 f829 	bl	80084c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007472:	bf00      	nop
 8007474:	3708      	adds	r7, #8
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}

0800747a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800747a:	b580      	push	{r7, lr}
 800747c:	b086      	sub	sp, #24
 800747e:	af00      	add	r7, sp, #0
 8007480:	60f8      	str	r0, [r7, #12]
 8007482:	60b9      	str	r1, [r7, #8]
 8007484:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007490:	2b01      	cmp	r3, #1
 8007492:	d101      	bne.n	8007498 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007494:	2302      	movs	r3, #2
 8007496:	e088      	b.n	80075aa <HAL_TIM_IC_ConfigChannel+0x130>
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2201      	movs	r2, #1
 800749c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d11b      	bne.n	80074de <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80074b6:	f000 fd5b 	bl	8007f70 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	699a      	ldr	r2, [r3, #24]
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f022 020c 	bic.w	r2, r2, #12
 80074c8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	6999      	ldr	r1, [r3, #24]
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	689a      	ldr	r2, [r3, #8]
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	430a      	orrs	r2, r1
 80074da:	619a      	str	r2, [r3, #24]
 80074dc:	e060      	b.n	80075a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b04      	cmp	r3, #4
 80074e2:	d11c      	bne.n	800751e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80074f4:	f000 fdc1 	bl	800807a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	699a      	ldr	r2, [r3, #24]
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007506:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	6999      	ldr	r1, [r3, #24]
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	689b      	ldr	r3, [r3, #8]
 8007512:	021a      	lsls	r2, r3, #8
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	430a      	orrs	r2, r1
 800751a:	619a      	str	r2, [r3, #24]
 800751c:	e040      	b.n	80075a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b08      	cmp	r3, #8
 8007522:	d11b      	bne.n	800755c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8007534:	f000 fe0e 	bl	8008154 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	69da      	ldr	r2, [r3, #28]
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f022 020c 	bic.w	r2, r2, #12
 8007546:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	69d9      	ldr	r1, [r3, #28]
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	61da      	str	r2, [r3, #28]
 800755a:	e021      	b.n	80075a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2b0c      	cmp	r3, #12
 8007560:	d11c      	bne.n	800759c <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8007572:	f000 fe2b 	bl	80081cc <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	69da      	ldr	r2, [r3, #28]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007584:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	69d9      	ldr	r1, [r3, #28]
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	689b      	ldr	r3, [r3, #8]
 8007590:	021a      	lsls	r2, r3, #8
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	430a      	orrs	r2, r1
 8007598:	61da      	str	r2, [r3, #28]
 800759a:	e001      	b.n	80075a0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800759c:	2301      	movs	r3, #1
 800759e:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80075a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
	...

080075b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	60f8      	str	r0, [r7, #12]
 80075bc:	60b9      	str	r1, [r7, #8]
 80075be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80075c0:	2300      	movs	r3, #0
 80075c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d101      	bne.n	80075d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80075ce:	2302      	movs	r3, #2
 80075d0:	e0ff      	b.n	80077d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2b14      	cmp	r3, #20
 80075de:	f200 80f0 	bhi.w	80077c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80075e2:	a201      	add	r2, pc, #4	; (adr r2, 80075e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80075e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075e8:	0800763d 	.word	0x0800763d
 80075ec:	080077c3 	.word	0x080077c3
 80075f0:	080077c3 	.word	0x080077c3
 80075f4:	080077c3 	.word	0x080077c3
 80075f8:	0800767d 	.word	0x0800767d
 80075fc:	080077c3 	.word	0x080077c3
 8007600:	080077c3 	.word	0x080077c3
 8007604:	080077c3 	.word	0x080077c3
 8007608:	080076bf 	.word	0x080076bf
 800760c:	080077c3 	.word	0x080077c3
 8007610:	080077c3 	.word	0x080077c3
 8007614:	080077c3 	.word	0x080077c3
 8007618:	080076ff 	.word	0x080076ff
 800761c:	080077c3 	.word	0x080077c3
 8007620:	080077c3 	.word	0x080077c3
 8007624:	080077c3 	.word	0x080077c3
 8007628:	08007741 	.word	0x08007741
 800762c:	080077c3 	.word	0x080077c3
 8007630:	080077c3 	.word	0x080077c3
 8007634:	080077c3 	.word	0x080077c3
 8007638:	08007781 	.word	0x08007781
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	68b9      	ldr	r1, [r7, #8]
 8007642:	4618      	mov	r0, r3
 8007644:	f000 fa16 	bl	8007a74 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	699a      	ldr	r2, [r3, #24]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	f042 0208 	orr.w	r2, r2, #8
 8007656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	699a      	ldr	r2, [r3, #24]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f022 0204 	bic.w	r2, r2, #4
 8007666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	6999      	ldr	r1, [r3, #24]
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	691a      	ldr	r2, [r3, #16]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	430a      	orrs	r2, r1
 8007678:	619a      	str	r2, [r3, #24]
      break;
 800767a:	e0a5      	b.n	80077c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68b9      	ldr	r1, [r7, #8]
 8007682:	4618      	mov	r0, r3
 8007684:	f000 fa72 	bl	8007b6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	699a      	ldr	r2, [r3, #24]
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	699a      	ldr	r2, [r3, #24]
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6999      	ldr	r1, [r3, #24]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	691b      	ldr	r3, [r3, #16]
 80076b2:	021a      	lsls	r2, r3, #8
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	430a      	orrs	r2, r1
 80076ba:	619a      	str	r2, [r3, #24]
      break;
 80076bc:	e084      	b.n	80077c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	68b9      	ldr	r1, [r7, #8]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f000 facb 	bl	8007c60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	69da      	ldr	r2, [r3, #28]
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	f042 0208 	orr.w	r2, r2, #8
 80076d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	69da      	ldr	r2, [r3, #28]
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f022 0204 	bic.w	r2, r2, #4
 80076e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	69d9      	ldr	r1, [r3, #28]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	691a      	ldr	r2, [r3, #16]
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	430a      	orrs	r2, r1
 80076fa:	61da      	str	r2, [r3, #28]
      break;
 80076fc:	e064      	b.n	80077c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68b9      	ldr	r1, [r7, #8]
 8007704:	4618      	mov	r0, r3
 8007706:	f000 fb23 	bl	8007d50 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69da      	ldr	r2, [r3, #28]
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69da      	ldr	r2, [r3, #28]
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	69d9      	ldr	r1, [r3, #28]
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	691b      	ldr	r3, [r3, #16]
 8007734:	021a      	lsls	r2, r3, #8
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	430a      	orrs	r2, r1
 800773c:	61da      	str	r2, [r3, #28]
      break;
 800773e:	e043      	b.n	80077c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	68b9      	ldr	r1, [r7, #8]
 8007746:	4618      	mov	r0, r3
 8007748:	f000 fb60 	bl	8007e0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f042 0208 	orr.w	r2, r2, #8
 800775a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0204 	bic.w	r2, r2, #4
 800776a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	691a      	ldr	r2, [r3, #16]
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	430a      	orrs	r2, r1
 800777c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800777e:	e023      	b.n	80077c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	68b9      	ldr	r1, [r7, #8]
 8007786:	4618      	mov	r0, r3
 8007788:	f000 fb98 	bl	8007ebc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800779a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	691b      	ldr	r3, [r3, #16]
 80077b6:	021a      	lsls	r2, r3, #8
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80077c0:	e002      	b.n	80077c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80077c2:	2301      	movs	r3, #1
 80077c4:	75fb      	strb	r3, [r7, #23]
      break;
 80077c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2200      	movs	r2, #0
 80077cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop

080077dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80077e6:	2300      	movs	r3, #0
 80077e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077f0:	2b01      	cmp	r3, #1
 80077f2:	d101      	bne.n	80077f8 <HAL_TIM_ConfigClockSource+0x1c>
 80077f4:	2302      	movs	r3, #2
 80077f6:	e0b6      	b.n	8007966 <HAL_TIM_ConfigClockSource+0x18a>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2202      	movs	r2, #2
 8007804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	689b      	ldr	r3, [r3, #8]
 800780e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007816:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800781a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800781c:	68bb      	ldr	r3, [r7, #8]
 800781e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007822:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	68ba      	ldr	r2, [r7, #8]
 800782a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007834:	d03e      	beq.n	80078b4 <HAL_TIM_ConfigClockSource+0xd8>
 8007836:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800783a:	f200 8087 	bhi.w	800794c <HAL_TIM_ConfigClockSource+0x170>
 800783e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007842:	f000 8086 	beq.w	8007952 <HAL_TIM_ConfigClockSource+0x176>
 8007846:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800784a:	d87f      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x170>
 800784c:	2b70      	cmp	r3, #112	; 0x70
 800784e:	d01a      	beq.n	8007886 <HAL_TIM_ConfigClockSource+0xaa>
 8007850:	2b70      	cmp	r3, #112	; 0x70
 8007852:	d87b      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x170>
 8007854:	2b60      	cmp	r3, #96	; 0x60
 8007856:	d050      	beq.n	80078fa <HAL_TIM_ConfigClockSource+0x11e>
 8007858:	2b60      	cmp	r3, #96	; 0x60
 800785a:	d877      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x170>
 800785c:	2b50      	cmp	r3, #80	; 0x50
 800785e:	d03c      	beq.n	80078da <HAL_TIM_ConfigClockSource+0xfe>
 8007860:	2b50      	cmp	r3, #80	; 0x50
 8007862:	d873      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x170>
 8007864:	2b40      	cmp	r3, #64	; 0x40
 8007866:	d058      	beq.n	800791a <HAL_TIM_ConfigClockSource+0x13e>
 8007868:	2b40      	cmp	r3, #64	; 0x40
 800786a:	d86f      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x170>
 800786c:	2b30      	cmp	r3, #48	; 0x30
 800786e:	d064      	beq.n	800793a <HAL_TIM_ConfigClockSource+0x15e>
 8007870:	2b30      	cmp	r3, #48	; 0x30
 8007872:	d86b      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x170>
 8007874:	2b20      	cmp	r3, #32
 8007876:	d060      	beq.n	800793a <HAL_TIM_ConfigClockSource+0x15e>
 8007878:	2b20      	cmp	r3, #32
 800787a:	d867      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x170>
 800787c:	2b00      	cmp	r3, #0
 800787e:	d05c      	beq.n	800793a <HAL_TIM_ConfigClockSource+0x15e>
 8007880:	2b10      	cmp	r3, #16
 8007882:	d05a      	beq.n	800793a <HAL_TIM_ConfigClockSource+0x15e>
 8007884:	e062      	b.n	800794c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007892:	683b      	ldr	r3, [r7, #0]
 8007894:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007896:	f000 fcf1 	bl	800827c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	689b      	ldr	r3, [r3, #8]
 80078a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80078a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	68ba      	ldr	r2, [r7, #8]
 80078b0:	609a      	str	r2, [r3, #8]
      break;
 80078b2:	e04f      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80078bc:	683b      	ldr	r3, [r7, #0]
 80078be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80078c0:	683b      	ldr	r3, [r7, #0]
 80078c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80078c4:	f000 fcda 	bl	800827c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	689a      	ldr	r2, [r3, #8]
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80078d6:	609a      	str	r2, [r3, #8]
      break;
 80078d8:	e03c      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078e6:	461a      	mov	r2, r3
 80078e8:	f000 fb98 	bl	800801c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	2150      	movs	r1, #80	; 0x50
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 fca7 	bl	8008246 <TIM_ITRx_SetConfig>
      break;
 80078f8:	e02c      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007906:	461a      	mov	r2, r3
 8007908:	f000 fbf4 	bl	80080f4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2160      	movs	r1, #96	; 0x60
 8007912:	4618      	mov	r0, r3
 8007914:	f000 fc97 	bl	8008246 <TIM_ITRx_SetConfig>
      break;
 8007918:	e01c      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007926:	461a      	mov	r2, r3
 8007928:	f000 fb78 	bl	800801c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	2140      	movs	r1, #64	; 0x40
 8007932:	4618      	mov	r0, r3
 8007934:	f000 fc87 	bl	8008246 <TIM_ITRx_SetConfig>
      break;
 8007938:	e00c      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681a      	ldr	r2, [r3, #0]
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	4619      	mov	r1, r3
 8007944:	4610      	mov	r0, r2
 8007946:	f000 fc7e 	bl	8008246 <TIM_ITRx_SetConfig>
      break;
 800794a:	e003      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	73fb      	strb	r3, [r7, #15]
      break;
 8007950:	e000      	b.n	8007954 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8007952:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2201      	movs	r2, #1
 8007958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	2200      	movs	r2, #0
 8007960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007964:	7bfb      	ldrb	r3, [r7, #15]
}
 8007966:	4618      	mov	r0, r3
 8007968:	3710      	adds	r7, #16
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}

0800796e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800796e:	b480      	push	{r7}
 8007970:	b083      	sub	sp, #12
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007982:	b480      	push	{r7}
 8007984:	b083      	sub	sp, #12
 8007986:	af00      	add	r7, sp, #0
 8007988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800798a:	bf00      	nop
 800798c:	370c      	adds	r7, #12
 800798e:	46bd      	mov	sp, r7
 8007990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007994:	4770      	bx	lr

08007996 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
	...

080079ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80079ac:	b480      	push	{r7}
 80079ae:	b085      	sub	sp, #20
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	4a2a      	ldr	r2, [pc, #168]	; (8007a68 <TIM_Base_SetConfig+0xbc>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d003      	beq.n	80079cc <TIM_Base_SetConfig+0x20>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ca:	d108      	bne.n	80079de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	68fa      	ldr	r2, [r7, #12]
 80079da:	4313      	orrs	r3, r2
 80079dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	4a21      	ldr	r2, [pc, #132]	; (8007a68 <TIM_Base_SetConfig+0xbc>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d00b      	beq.n	80079fe <TIM_Base_SetConfig+0x52>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079ec:	d007      	beq.n	80079fe <TIM_Base_SetConfig+0x52>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4a1e      	ldr	r2, [pc, #120]	; (8007a6c <TIM_Base_SetConfig+0xc0>)
 80079f2:	4293      	cmp	r3, r2
 80079f4:	d003      	beq.n	80079fe <TIM_Base_SetConfig+0x52>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	4a1d      	ldr	r2, [pc, #116]	; (8007a70 <TIM_Base_SetConfig+0xc4>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d108      	bne.n	8007a10 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	68fa      	ldr	r2, [r7, #12]
 8007a0c:	4313      	orrs	r3, r2
 8007a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007a16:	683b      	ldr	r3, [r7, #0]
 8007a18:	695b      	ldr	r3, [r3, #20]
 8007a1a:	4313      	orrs	r3, r2
 8007a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	689a      	ldr	r2, [r3, #8]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	4a0c      	ldr	r2, [pc, #48]	; (8007a68 <TIM_Base_SetConfig+0xbc>)
 8007a38:	4293      	cmp	r3, r2
 8007a3a:	d007      	beq.n	8007a4c <TIM_Base_SetConfig+0xa0>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4a0b      	ldr	r2, [pc, #44]	; (8007a6c <TIM_Base_SetConfig+0xc0>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d003      	beq.n	8007a4c <TIM_Base_SetConfig+0xa0>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	4a0a      	ldr	r2, [pc, #40]	; (8007a70 <TIM_Base_SetConfig+0xc4>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d103      	bne.n	8007a54 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	691a      	ldr	r2, [r3, #16]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2201      	movs	r2, #1
 8007a58:	615a      	str	r2, [r3, #20]
}
 8007a5a:	bf00      	nop
 8007a5c:	3714      	adds	r7, #20
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a64:	4770      	bx	lr
 8007a66:	bf00      	nop
 8007a68:	40012c00 	.word	0x40012c00
 8007a6c:	40014000 	.word	0x40014000
 8007a70:	40014400 	.word	0x40014400

08007a74 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b087      	sub	sp, #28
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
 8007a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	f023 0201 	bic.w	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6a1b      	ldr	r3, [r3, #32]
 8007a8e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aa2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007aa6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 0303 	bic.w	r3, r3, #3
 8007aae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68fa      	ldr	r2, [r7, #12]
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	f023 0302 	bic.w	r3, r3, #2
 8007ac0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	689b      	ldr	r3, [r3, #8]
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	4313      	orrs	r3, r2
 8007aca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	4a24      	ldr	r2, [pc, #144]	; (8007b60 <TIM_OC1_SetConfig+0xec>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d007      	beq.n	8007ae4 <TIM_OC1_SetConfig+0x70>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	4a23      	ldr	r2, [pc, #140]	; (8007b64 <TIM_OC1_SetConfig+0xf0>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d003      	beq.n	8007ae4 <TIM_OC1_SetConfig+0x70>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	4a22      	ldr	r2, [pc, #136]	; (8007b68 <TIM_OC1_SetConfig+0xf4>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d10c      	bne.n	8007afe <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ae4:	697b      	ldr	r3, [r7, #20]
 8007ae6:	f023 0308 	bic.w	r3, r3, #8
 8007aea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	68db      	ldr	r3, [r3, #12]
 8007af0:	697a      	ldr	r2, [r7, #20]
 8007af2:	4313      	orrs	r3, r2
 8007af4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	f023 0304 	bic.w	r3, r3, #4
 8007afc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	4a17      	ldr	r2, [pc, #92]	; (8007b60 <TIM_OC1_SetConfig+0xec>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d007      	beq.n	8007b16 <TIM_OC1_SetConfig+0xa2>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	4a16      	ldr	r2, [pc, #88]	; (8007b64 <TIM_OC1_SetConfig+0xf0>)
 8007b0a:	4293      	cmp	r3, r2
 8007b0c:	d003      	beq.n	8007b16 <TIM_OC1_SetConfig+0xa2>
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4a15      	ldr	r2, [pc, #84]	; (8007b68 <TIM_OC1_SetConfig+0xf4>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d111      	bne.n	8007b3a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007b16:	693b      	ldr	r3, [r7, #16]
 8007b18:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007b26:	683b      	ldr	r3, [r7, #0]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	693a      	ldr	r2, [r7, #16]
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	693a      	ldr	r2, [r7, #16]
 8007b36:	4313      	orrs	r3, r2
 8007b38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	693a      	ldr	r2, [r7, #16]
 8007b3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007b46:	683b      	ldr	r3, [r7, #0]
 8007b48:	685a      	ldr	r2, [r3, #4]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	697a      	ldr	r2, [r7, #20]
 8007b52:	621a      	str	r2, [r3, #32]
}
 8007b54:	bf00      	nop
 8007b56:	371c      	adds	r7, #28
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr
 8007b60:	40012c00 	.word	0x40012c00
 8007b64:	40014000 	.word	0x40014000
 8007b68:	40014400 	.word	0x40014400

08007b6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b087      	sub	sp, #28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
 8007b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a1b      	ldr	r3, [r3, #32]
 8007b7a:	f023 0210 	bic.w	r2, r3, #16
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a1b      	ldr	r3, [r3, #32]
 8007b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	685b      	ldr	r3, [r3, #4]
 8007b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	699b      	ldr	r3, [r3, #24]
 8007b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007b9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007b9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ba6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	021b      	lsls	r3, r3, #8
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	f023 0320 	bic.w	r3, r3, #32
 8007bba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	011b      	lsls	r3, r3, #4
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	4a22      	ldr	r2, [pc, #136]	; (8007c54 <TIM_OC2_SetConfig+0xe8>)
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d10d      	bne.n	8007bec <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	68db      	ldr	r3, [r3, #12]
 8007bdc:	011b      	lsls	r3, r3, #4
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007bea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	4a19      	ldr	r2, [pc, #100]	; (8007c54 <TIM_OC2_SetConfig+0xe8>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d007      	beq.n	8007c04 <TIM_OC2_SetConfig+0x98>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a18      	ldr	r2, [pc, #96]	; (8007c58 <TIM_OC2_SetConfig+0xec>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d003      	beq.n	8007c04 <TIM_OC2_SetConfig+0x98>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	4a17      	ldr	r2, [pc, #92]	; (8007c5c <TIM_OC2_SetConfig+0xf0>)
 8007c00:	4293      	cmp	r3, r2
 8007c02:	d113      	bne.n	8007c2c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c0a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c12:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	695b      	ldr	r3, [r3, #20]
 8007c18:	009b      	lsls	r3, r3, #2
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007c20:	683b      	ldr	r3, [r7, #0]
 8007c22:	699b      	ldr	r3, [r3, #24]
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	693a      	ldr	r2, [r7, #16]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	693a      	ldr	r2, [r7, #16]
 8007c30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	685a      	ldr	r2, [r3, #4]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	697a      	ldr	r2, [r7, #20]
 8007c44:	621a      	str	r2, [r3, #32]
}
 8007c46:	bf00      	nop
 8007c48:	371c      	adds	r7, #28
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	40012c00 	.word	0x40012c00
 8007c58:	40014000 	.word	0x40014000
 8007c5c:	40014400 	.word	0x40014400

08007c60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b087      	sub	sp, #28
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a1b      	ldr	r3, [r3, #32]
 8007c6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a1b      	ldr	r3, [r3, #32]
 8007c7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	685b      	ldr	r3, [r3, #4]
 8007c80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	69db      	ldr	r3, [r3, #28]
 8007c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	f023 0303 	bic.w	r3, r3, #3
 8007c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	68fa      	ldr	r2, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007cae:	683b      	ldr	r3, [r7, #0]
 8007cb0:	689b      	ldr	r3, [r3, #8]
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	697a      	ldr	r2, [r7, #20]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	4a21      	ldr	r2, [pc, #132]	; (8007d44 <TIM_OC3_SetConfig+0xe4>)
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d10d      	bne.n	8007cde <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	021b      	lsls	r3, r3, #8
 8007cd0:	697a      	ldr	r2, [r7, #20]
 8007cd2:	4313      	orrs	r3, r2
 8007cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a18      	ldr	r2, [pc, #96]	; (8007d44 <TIM_OC3_SetConfig+0xe4>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d007      	beq.n	8007cf6 <TIM_OC3_SetConfig+0x96>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a17      	ldr	r2, [pc, #92]	; (8007d48 <TIM_OC3_SetConfig+0xe8>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d003      	beq.n	8007cf6 <TIM_OC3_SetConfig+0x96>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a16      	ldr	r2, [pc, #88]	; (8007d4c <TIM_OC3_SetConfig+0xec>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d113      	bne.n	8007d1e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	011b      	lsls	r3, r3, #4
 8007d0c:	693a      	ldr	r2, [r7, #16]
 8007d0e:	4313      	orrs	r3, r2
 8007d10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	011b      	lsls	r3, r3, #4
 8007d18:	693a      	ldr	r2, [r7, #16]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	693a      	ldr	r2, [r7, #16]
 8007d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685a      	ldr	r2, [r3, #4]
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	697a      	ldr	r2, [r7, #20]
 8007d36:	621a      	str	r2, [r3, #32]
}
 8007d38:	bf00      	nop
 8007d3a:	371c      	adds	r7, #28
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d42:	4770      	bx	lr
 8007d44:	40012c00 	.word	0x40012c00
 8007d48:	40014000 	.word	0x40014000
 8007d4c:	40014400 	.word	0x40014400

08007d50 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b087      	sub	sp, #28
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6a1b      	ldr	r3, [r3, #32]
 8007d5e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6a1b      	ldr	r3, [r3, #32]
 8007d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	69db      	ldr	r3, [r3, #28]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	021b      	lsls	r3, r3, #8
 8007d92:	68fa      	ldr	r2, [r7, #12]
 8007d94:	4313      	orrs	r3, r2
 8007d96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007d9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	689b      	ldr	r3, [r3, #8]
 8007da4:	031b      	lsls	r3, r3, #12
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	4a14      	ldr	r2, [pc, #80]	; (8007e00 <TIM_OC4_SetConfig+0xb0>)
 8007db0:	4293      	cmp	r3, r2
 8007db2:	d007      	beq.n	8007dc4 <TIM_OC4_SetConfig+0x74>
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	4a13      	ldr	r2, [pc, #76]	; (8007e04 <TIM_OC4_SetConfig+0xb4>)
 8007db8:	4293      	cmp	r3, r2
 8007dba:	d003      	beq.n	8007dc4 <TIM_OC4_SetConfig+0x74>
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	4a12      	ldr	r2, [pc, #72]	; (8007e08 <TIM_OC4_SetConfig+0xb8>)
 8007dc0:	4293      	cmp	r3, r2
 8007dc2:	d109      	bne.n	8007dd8 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007dca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	695b      	ldr	r3, [r3, #20]
 8007dd0:	019b      	lsls	r3, r3, #6
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	4313      	orrs	r3, r2
 8007dd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	697a      	ldr	r2, [r7, #20]
 8007ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	68fa      	ldr	r2, [r7, #12]
 8007de2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	685a      	ldr	r2, [r3, #4]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	693a      	ldr	r2, [r7, #16]
 8007df0:	621a      	str	r2, [r3, #32]
}
 8007df2:	bf00      	nop
 8007df4:	371c      	adds	r7, #28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	40012c00 	.word	0x40012c00
 8007e04:	40014000 	.word	0x40014000
 8007e08:	40014400 	.word	0x40014400

08007e0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b087      	sub	sp, #28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
 8007e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6a1b      	ldr	r3, [r3, #32]
 8007e1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a1b      	ldr	r3, [r3, #32]
 8007e26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	685b      	ldr	r3, [r3, #4]
 8007e2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	68fa      	ldr	r2, [r7, #12]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007e50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	689b      	ldr	r3, [r3, #8]
 8007e56:	041b      	lsls	r3, r3, #16
 8007e58:	693a      	ldr	r2, [r7, #16]
 8007e5a:	4313      	orrs	r3, r2
 8007e5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	4a13      	ldr	r2, [pc, #76]	; (8007eb0 <TIM_OC5_SetConfig+0xa4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d007      	beq.n	8007e76 <TIM_OC5_SetConfig+0x6a>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	4a12      	ldr	r2, [pc, #72]	; (8007eb4 <TIM_OC5_SetConfig+0xa8>)
 8007e6a:	4293      	cmp	r3, r2
 8007e6c:	d003      	beq.n	8007e76 <TIM_OC5_SetConfig+0x6a>
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	4a11      	ldr	r2, [pc, #68]	; (8007eb8 <TIM_OC5_SetConfig+0xac>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d109      	bne.n	8007e8a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	021b      	lsls	r3, r3, #8
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	4313      	orrs	r3, r2
 8007e88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	68fa      	ldr	r2, [r7, #12]
 8007e94:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007e96:	683b      	ldr	r3, [r7, #0]
 8007e98:	685a      	ldr	r2, [r3, #4]
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	693a      	ldr	r2, [r7, #16]
 8007ea2:	621a      	str	r2, [r3, #32]
}
 8007ea4:	bf00      	nop
 8007ea6:	371c      	adds	r7, #28
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	40012c00 	.word	0x40012c00
 8007eb4:	40014000 	.word	0x40014000
 8007eb8:	40014400 	.word	0x40014400

08007ebc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b087      	sub	sp, #28
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	685b      	ldr	r3, [r3, #4]
 8007edc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007eee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	021b      	lsls	r3, r3, #8
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	4313      	orrs	r3, r2
 8007efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007efc:	693b      	ldr	r3, [r7, #16]
 8007efe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	051b      	lsls	r3, r3, #20
 8007f0a:	693a      	ldr	r2, [r7, #16]
 8007f0c:	4313      	orrs	r3, r2
 8007f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a14      	ldr	r2, [pc, #80]	; (8007f64 <TIM_OC6_SetConfig+0xa8>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d007      	beq.n	8007f28 <TIM_OC6_SetConfig+0x6c>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a13      	ldr	r2, [pc, #76]	; (8007f68 <TIM_OC6_SetConfig+0xac>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d003      	beq.n	8007f28 <TIM_OC6_SetConfig+0x6c>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	4a12      	ldr	r2, [pc, #72]	; (8007f6c <TIM_OC6_SetConfig+0xb0>)
 8007f24:	4293      	cmp	r3, r2
 8007f26:	d109      	bne.n	8007f3c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	695b      	ldr	r3, [r3, #20]
 8007f34:	029b      	lsls	r3, r3, #10
 8007f36:	697a      	ldr	r2, [r7, #20]
 8007f38:	4313      	orrs	r3, r2
 8007f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	697a      	ldr	r2, [r7, #20]
 8007f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	68fa      	ldr	r2, [r7, #12]
 8007f46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	693a      	ldr	r2, [r7, #16]
 8007f54:	621a      	str	r2, [r3, #32]
}
 8007f56:	bf00      	nop
 8007f58:	371c      	adds	r7, #28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	40012c00 	.word	0x40012c00
 8007f68:	40014000 	.word	0x40014000
 8007f6c:	40014400 	.word	0x40014400

08007f70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6a1b      	ldr	r3, [r3, #32]
 8007f82:	f023 0201 	bic.w	r2, r3, #1
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	699b      	ldr	r3, [r3, #24]
 8007f8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6a1b      	ldr	r3, [r3, #32]
 8007f94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4a1e      	ldr	r2, [pc, #120]	; (8008014 <TIM_TI1_SetConfig+0xa4>)
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d007      	beq.n	8007fae <TIM_TI1_SetConfig+0x3e>
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa4:	d003      	beq.n	8007fae <TIM_TI1_SetConfig+0x3e>
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	4a1b      	ldr	r2, [pc, #108]	; (8008018 <TIM_TI1_SetConfig+0xa8>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d101      	bne.n	8007fb2 <TIM_TI1_SetConfig+0x42>
 8007fae:	2301      	movs	r3, #1
 8007fb0:	e000      	b.n	8007fb4 <TIM_TI1_SetConfig+0x44>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d008      	beq.n	8007fca <TIM_TI1_SetConfig+0x5a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007fb8:	697b      	ldr	r3, [r7, #20]
 8007fba:	f023 0303 	bic.w	r3, r3, #3
 8007fbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007fc0:	697a      	ldr	r2, [r7, #20]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	617b      	str	r3, [r7, #20]
 8007fc8:	e003      	b.n	8007fd2 <TIM_TI1_SetConfig+0x62>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	f043 0301 	orr.w	r3, r3, #1
 8007fd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fd2:	697b      	ldr	r3, [r7, #20]
 8007fd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	011b      	lsls	r3, r3, #4
 8007fde:	b2db      	uxtb	r3, r3
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fe6:	693b      	ldr	r3, [r7, #16]
 8007fe8:	f023 030a 	bic.w	r3, r3, #10
 8007fec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	f003 030a 	and.w	r3, r3, #10
 8007ff4:	693a      	ldr	r2, [r7, #16]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	693a      	ldr	r2, [r7, #16]
 8008004:	621a      	str	r2, [r3, #32]
}
 8008006:	bf00      	nop
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr
 8008012:	bf00      	nop
 8008014:	40012c00 	.word	0x40012c00
 8008018:	40014000 	.word	0x40014000

0800801c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800801c:	b480      	push	{r7}
 800801e:	b087      	sub	sp, #28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	6a1b      	ldr	r3, [r3, #32]
 800802c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6a1b      	ldr	r3, [r3, #32]
 8008032:	f023 0201 	bic.w	r2, r3, #1
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	011b      	lsls	r3, r3, #4
 800804c:	693a      	ldr	r2, [r7, #16]
 800804e:	4313      	orrs	r3, r2
 8008050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008052:	697b      	ldr	r3, [r7, #20]
 8008054:	f023 030a 	bic.w	r3, r3, #10
 8008058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	4313      	orrs	r3, r2
 8008060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	697a      	ldr	r2, [r7, #20]
 800806c:	621a      	str	r2, [r3, #32]
}
 800806e:	bf00      	nop
 8008070:	371c      	adds	r7, #28
 8008072:	46bd      	mov	sp, r7
 8008074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008078:	4770      	bx	lr

0800807a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800807a:	b480      	push	{r7}
 800807c:	b087      	sub	sp, #28
 800807e:	af00      	add	r7, sp, #0
 8008080:	60f8      	str	r0, [r7, #12]
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	607a      	str	r2, [r7, #4]
 8008086:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6a1b      	ldr	r3, [r3, #32]
 800808c:	f023 0210 	bic.w	r2, r3, #16
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	699b      	ldr	r3, [r3, #24]
 8008098:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	021b      	lsls	r3, r3, #8
 80080ac:	697a      	ldr	r2, [r7, #20]
 80080ae:	4313      	orrs	r3, r2
 80080b0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	031b      	lsls	r3, r3, #12
 80080be:	b29b      	uxth	r3, r3
 80080c0:	697a      	ldr	r2, [r7, #20]
 80080c2:	4313      	orrs	r3, r2
 80080c4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80080cc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	011b      	lsls	r3, r3, #4
 80080d2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80080d6:	693a      	ldr	r2, [r7, #16]
 80080d8:	4313      	orrs	r3, r2
 80080da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	697a      	ldr	r2, [r7, #20]
 80080e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	621a      	str	r2, [r3, #32]
}
 80080e8:	bf00      	nop
 80080ea:	371c      	adds	r7, #28
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	f023 0210 	bic.w	r2, r3, #16
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	699b      	ldr	r3, [r3, #24]
 8008110:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	6a1b      	ldr	r3, [r3, #32]
 8008116:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800811e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	031b      	lsls	r3, r3, #12
 8008124:	697a      	ldr	r2, [r7, #20]
 8008126:	4313      	orrs	r3, r2
 8008128:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008130:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008132:	68bb      	ldr	r3, [r7, #8]
 8008134:	011b      	lsls	r3, r3, #4
 8008136:	693a      	ldr	r2, [r7, #16]
 8008138:	4313      	orrs	r3, r2
 800813a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	697a      	ldr	r2, [r7, #20]
 8008140:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	621a      	str	r2, [r3, #32]
}
 8008148:	bf00      	nop
 800814a:	371c      	adds	r7, #28
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr

08008154 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008154:	b480      	push	{r7}
 8008156:	b087      	sub	sp, #28
 8008158:	af00      	add	r7, sp, #0
 800815a:	60f8      	str	r0, [r7, #12]
 800815c:	60b9      	str	r1, [r7, #8]
 800815e:	607a      	str	r2, [r7, #4]
 8008160:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	69db      	ldr	r3, [r3, #28]
 8008172:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	6a1b      	ldr	r3, [r3, #32]
 8008178:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	f023 0303 	bic.w	r3, r3, #3
 8008180:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008182:	697a      	ldr	r2, [r7, #20]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	4313      	orrs	r3, r2
 8008188:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800818a:	697b      	ldr	r3, [r7, #20]
 800818c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008190:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	011b      	lsls	r3, r3, #4
 8008196:	b2db      	uxtb	r3, r3
 8008198:	697a      	ldr	r2, [r7, #20]
 800819a:	4313      	orrs	r3, r2
 800819c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80081a4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	021b      	lsls	r3, r3, #8
 80081aa:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80081ae:	693a      	ldr	r2, [r7, #16]
 80081b0:	4313      	orrs	r3, r2
 80081b2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	621a      	str	r2, [r3, #32]
}
 80081c0:	bf00      	nop
 80081c2:	371c      	adds	r7, #28
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b087      	sub	sp, #28
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	60f8      	str	r0, [r7, #12]
 80081d4:	60b9      	str	r1, [r7, #8]
 80081d6:	607a      	str	r2, [r7, #4]
 80081d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6a1b      	ldr	r3, [r3, #32]
 80081f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081f8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	021b      	lsls	r3, r3, #8
 80081fe:	697a      	ldr	r2, [r7, #20]
 8008200:	4313      	orrs	r3, r2
 8008202:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800820a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800820c:	683b      	ldr	r3, [r7, #0]
 800820e:	031b      	lsls	r3, r3, #12
 8008210:	b29b      	uxth	r3, r3
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	4313      	orrs	r3, r2
 8008216:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800821e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	031b      	lsls	r3, r3, #12
 8008224:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008228:	693a      	ldr	r2, [r7, #16]
 800822a:	4313      	orrs	r3, r2
 800822c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	697a      	ldr	r2, [r7, #20]
 8008232:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	621a      	str	r2, [r3, #32]
}
 800823a:	bf00      	nop
 800823c:	371c      	adds	r7, #28
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008246:	b480      	push	{r7}
 8008248:	b085      	sub	sp, #20
 800824a:	af00      	add	r7, sp, #0
 800824c:	6078      	str	r0, [r7, #4]
 800824e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	689b      	ldr	r3, [r3, #8]
 8008254:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800825c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800825e:	683a      	ldr	r2, [r7, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	4313      	orrs	r3, r2
 8008264:	f043 0307 	orr.w	r3, r3, #7
 8008268:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	609a      	str	r2, [r3, #8]
}
 8008270:	bf00      	nop
 8008272:	3714      	adds	r7, #20
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr

0800827c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800827c:	b480      	push	{r7}
 800827e:	b087      	sub	sp, #28
 8008280:	af00      	add	r7, sp, #0
 8008282:	60f8      	str	r0, [r7, #12]
 8008284:	60b9      	str	r1, [r7, #8]
 8008286:	607a      	str	r2, [r7, #4]
 8008288:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	689b      	ldr	r3, [r3, #8]
 800828e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008290:	697b      	ldr	r3, [r7, #20]
 8008292:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008296:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008298:	683b      	ldr	r3, [r7, #0]
 800829a:	021a      	lsls	r2, r3, #8
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	431a      	orrs	r2, r3
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	4313      	orrs	r3, r2
 80082a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	697a      	ldr	r2, [r7, #20]
 80082ae:	609a      	str	r2, [r3, #8]
}
 80082b0:	bf00      	nop
 80082b2:	371c      	adds	r7, #28
 80082b4:	46bd      	mov	sp, r7
 80082b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ba:	4770      	bx	lr

080082bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082bc:	b480      	push	{r7}
 80082be:	b087      	sub	sp, #28
 80082c0:	af00      	add	r7, sp, #0
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082c8:	68bb      	ldr	r3, [r7, #8]
 80082ca:	f003 031f 	and.w	r3, r3, #31
 80082ce:	2201      	movs	r2, #1
 80082d0:	fa02 f303 	lsl.w	r3, r2, r3
 80082d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6a1a      	ldr	r2, [r3, #32]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	43db      	mvns	r3, r3
 80082de:	401a      	ands	r2, r3
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a1a      	ldr	r2, [r3, #32]
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f003 031f 	and.w	r3, r3, #31
 80082ee:	6879      	ldr	r1, [r7, #4]
 80082f0:	fa01 f303 	lsl.w	r3, r1, r3
 80082f4:	431a      	orrs	r2, r3
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	621a      	str	r2, [r3, #32]
}
 80082fa:	bf00      	nop
 80082fc:	371c      	adds	r7, #28
 80082fe:	46bd      	mov	sp, r7
 8008300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008304:	4770      	bx	lr
	...

08008308 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008308:	b480      	push	{r7}
 800830a:	b085      	sub	sp, #20
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008318:	2b01      	cmp	r3, #1
 800831a:	d101      	bne.n	8008320 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800831c:	2302      	movs	r3, #2
 800831e:	e04f      	b.n	80083c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2201      	movs	r2, #1
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2202      	movs	r2, #2
 800832c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	685b      	ldr	r3, [r3, #4]
 8008336:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a21      	ldr	r2, [pc, #132]	; (80083cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d108      	bne.n	800835c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008350:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	4313      	orrs	r3, r2
 800835a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008362:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	4313      	orrs	r3, r2
 800836c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	68fa      	ldr	r2, [r7, #12]
 8008374:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a14      	ldr	r2, [pc, #80]	; (80083cc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d009      	beq.n	8008394 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008388:	d004      	beq.n	8008394 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a10      	ldr	r2, [pc, #64]	; (80083d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d10c      	bne.n	80083ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800839a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	68ba      	ldr	r2, [r7, #8]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	681b      	ldr	r3, [r3, #0]
 80083aa:	68ba      	ldr	r2, [r7, #8]
 80083ac:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2201      	movs	r2, #1
 80083b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3714      	adds	r7, #20
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr
 80083cc:	40012c00 	.word	0x40012c00
 80083d0:	40014000 	.word	0x40014000

080083d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80083d4:	b480      	push	{r7}
 80083d6:	b085      	sub	sp, #20
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80083de:	2300      	movs	r3, #0
 80083e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d101      	bne.n	80083f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80083ec:	2302      	movs	r3, #2
 80083ee:	e060      	b.n	80084b2 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	689b      	ldr	r3, [r3, #8]
 8008410:	4313      	orrs	r3, r2
 8008412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	4313      	orrs	r3, r2
 8008420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	4313      	orrs	r3, r2
 800842e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	691b      	ldr	r3, [r3, #16]
 800843a:	4313      	orrs	r3, r2
 800843c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	695b      	ldr	r3, [r3, #20]
 8008448:	4313      	orrs	r3, r2
 800844a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008452:	683b      	ldr	r3, [r7, #0]
 8008454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008456:	4313      	orrs	r3, r2
 8008458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	041b      	lsls	r3, r3, #16
 8008466:	4313      	orrs	r3, r2
 8008468:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	4a14      	ldr	r2, [pc, #80]	; (80084c0 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8008470:	4293      	cmp	r3, r2
 8008472:	d115      	bne.n	80084a0 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847e:	051b      	lsls	r3, r3, #20
 8008480:	4313      	orrs	r3, r2
 8008482:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	4313      	orrs	r3, r2
 8008490:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	6a1b      	ldr	r3, [r3, #32]
 800849c:	4313      	orrs	r3, r2
 800849e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2200      	movs	r2, #0
 80084ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084b0:	2300      	movs	r3, #0
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	40012c00 	.word	0x40012c00

080084c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80084c4:	b480      	push	{r7}
 80084c6:	b083      	sub	sp, #12
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80084cc:	bf00      	nop
 80084ce:	370c      	adds	r7, #12
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80084e0:	bf00      	nop
 80084e2:	370c      	adds	r7, #12
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr

080084ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80084ec:	b480      	push	{r7}
 80084ee:	b083      	sub	sp, #12
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80084f4:	bf00      	nop
 80084f6:	370c      	adds	r7, #12
 80084f8:	46bd      	mov	sp, r7
 80084fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fe:	4770      	bx	lr

08008500 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e040      	b.n	8008594 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008516:	2b00      	cmp	r3, #0
 8008518:	d106      	bne.n	8008528 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2200      	movs	r2, #0
 800851e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008522:	6878      	ldr	r0, [r7, #4]
 8008524:	f7f9 fd78 	bl	8002018 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2224      	movs	r2, #36	; 0x24
 800852c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	681a      	ldr	r2, [r3, #0]
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	f022 0201 	bic.w	r2, r2, #1
 800853c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 f82c 	bl	800859c <UART_SetConfig>
 8008544:	4603      	mov	r3, r0
 8008546:	2b01      	cmp	r3, #1
 8008548:	d101      	bne.n	800854e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	e022      	b.n	8008594 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008552:	2b00      	cmp	r3, #0
 8008554:	d002      	beq.n	800855c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f000 fa4c 	bl	80089f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	685a      	ldr	r2, [r3, #4]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800856a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689a      	ldr	r2, [r3, #8]
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800857a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	681a      	ldr	r2, [r3, #0]
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	f042 0201 	orr.w	r2, r2, #1
 800858a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f000 fad3 	bl	8008b38 <UART_CheckIdleState>
 8008592:	4603      	mov	r3, r0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3708      	adds	r7, #8
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}

0800859c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800859c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085a0:	b08a      	sub	sp, #40	; 0x28
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80085a6:	2300      	movs	r3, #0
 80085a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	689a      	ldr	r2, [r3, #8]
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	691b      	ldr	r3, [r3, #16]
 80085b4:	431a      	orrs	r2, r3
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	695b      	ldr	r3, [r3, #20]
 80085ba:	431a      	orrs	r2, r3
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	69db      	ldr	r3, [r3, #28]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681a      	ldr	r2, [r3, #0]
 80085ca:	4bb4      	ldr	r3, [pc, #720]	; (800889c <UART_SetConfig+0x300>)
 80085cc:	4013      	ands	r3, r2
 80085ce:	68fa      	ldr	r2, [r7, #12]
 80085d0:	6812      	ldr	r2, [r2, #0]
 80085d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80085d4:	430b      	orrs	r3, r1
 80085d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	685b      	ldr	r3, [r3, #4]
 80085de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	68da      	ldr	r2, [r3, #12]
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	430a      	orrs	r2, r1
 80085ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	699b      	ldr	r3, [r3, #24]
 80085f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	4aa9      	ldr	r2, [pc, #676]	; (80088a0 <UART_SetConfig+0x304>)
 80085fa:	4293      	cmp	r3, r2
 80085fc:	d004      	beq.n	8008608 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	6a1b      	ldr	r3, [r3, #32]
 8008602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008604:	4313      	orrs	r3, r2
 8008606:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008618:	430a      	orrs	r2, r1
 800861a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4aa0      	ldr	r2, [pc, #640]	; (80088a4 <UART_SetConfig+0x308>)
 8008622:	4293      	cmp	r3, r2
 8008624:	d126      	bne.n	8008674 <UART_SetConfig+0xd8>
 8008626:	4ba0      	ldr	r3, [pc, #640]	; (80088a8 <UART_SetConfig+0x30c>)
 8008628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800862c:	f003 0303 	and.w	r3, r3, #3
 8008630:	2b03      	cmp	r3, #3
 8008632:	d81b      	bhi.n	800866c <UART_SetConfig+0xd0>
 8008634:	a201      	add	r2, pc, #4	; (adr r2, 800863c <UART_SetConfig+0xa0>)
 8008636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800863a:	bf00      	nop
 800863c:	0800864d 	.word	0x0800864d
 8008640:	0800865d 	.word	0x0800865d
 8008644:	08008655 	.word	0x08008655
 8008648:	08008665 	.word	0x08008665
 800864c:	2301      	movs	r3, #1
 800864e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008652:	e080      	b.n	8008756 <UART_SetConfig+0x1ba>
 8008654:	2302      	movs	r3, #2
 8008656:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800865a:	e07c      	b.n	8008756 <UART_SetConfig+0x1ba>
 800865c:	2304      	movs	r3, #4
 800865e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008662:	e078      	b.n	8008756 <UART_SetConfig+0x1ba>
 8008664:	2308      	movs	r3, #8
 8008666:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800866a:	e074      	b.n	8008756 <UART_SetConfig+0x1ba>
 800866c:	2310      	movs	r3, #16
 800866e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008672:	e070      	b.n	8008756 <UART_SetConfig+0x1ba>
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a8c      	ldr	r2, [pc, #560]	; (80088ac <UART_SetConfig+0x310>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d138      	bne.n	80086f0 <UART_SetConfig+0x154>
 800867e:	4b8a      	ldr	r3, [pc, #552]	; (80088a8 <UART_SetConfig+0x30c>)
 8008680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008684:	f003 030c 	and.w	r3, r3, #12
 8008688:	2b0c      	cmp	r3, #12
 800868a:	d82d      	bhi.n	80086e8 <UART_SetConfig+0x14c>
 800868c:	a201      	add	r2, pc, #4	; (adr r2, 8008694 <UART_SetConfig+0xf8>)
 800868e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008692:	bf00      	nop
 8008694:	080086c9 	.word	0x080086c9
 8008698:	080086e9 	.word	0x080086e9
 800869c:	080086e9 	.word	0x080086e9
 80086a0:	080086e9 	.word	0x080086e9
 80086a4:	080086d9 	.word	0x080086d9
 80086a8:	080086e9 	.word	0x080086e9
 80086ac:	080086e9 	.word	0x080086e9
 80086b0:	080086e9 	.word	0x080086e9
 80086b4:	080086d1 	.word	0x080086d1
 80086b8:	080086e9 	.word	0x080086e9
 80086bc:	080086e9 	.word	0x080086e9
 80086c0:	080086e9 	.word	0x080086e9
 80086c4:	080086e1 	.word	0x080086e1
 80086c8:	2300      	movs	r3, #0
 80086ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086ce:	e042      	b.n	8008756 <UART_SetConfig+0x1ba>
 80086d0:	2302      	movs	r3, #2
 80086d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086d6:	e03e      	b.n	8008756 <UART_SetConfig+0x1ba>
 80086d8:	2304      	movs	r3, #4
 80086da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086de:	e03a      	b.n	8008756 <UART_SetConfig+0x1ba>
 80086e0:	2308      	movs	r3, #8
 80086e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086e6:	e036      	b.n	8008756 <UART_SetConfig+0x1ba>
 80086e8:	2310      	movs	r3, #16
 80086ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086ee:	e032      	b.n	8008756 <UART_SetConfig+0x1ba>
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4a6a      	ldr	r2, [pc, #424]	; (80088a0 <UART_SetConfig+0x304>)
 80086f6:	4293      	cmp	r3, r2
 80086f8:	d12a      	bne.n	8008750 <UART_SetConfig+0x1b4>
 80086fa:	4b6b      	ldr	r3, [pc, #428]	; (80088a8 <UART_SetConfig+0x30c>)
 80086fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008700:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008704:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008708:	d01a      	beq.n	8008740 <UART_SetConfig+0x1a4>
 800870a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800870e:	d81b      	bhi.n	8008748 <UART_SetConfig+0x1ac>
 8008710:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008714:	d00c      	beq.n	8008730 <UART_SetConfig+0x194>
 8008716:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800871a:	d815      	bhi.n	8008748 <UART_SetConfig+0x1ac>
 800871c:	2b00      	cmp	r3, #0
 800871e:	d003      	beq.n	8008728 <UART_SetConfig+0x18c>
 8008720:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008724:	d008      	beq.n	8008738 <UART_SetConfig+0x19c>
 8008726:	e00f      	b.n	8008748 <UART_SetConfig+0x1ac>
 8008728:	2300      	movs	r3, #0
 800872a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800872e:	e012      	b.n	8008756 <UART_SetConfig+0x1ba>
 8008730:	2302      	movs	r3, #2
 8008732:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008736:	e00e      	b.n	8008756 <UART_SetConfig+0x1ba>
 8008738:	2304      	movs	r3, #4
 800873a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800873e:	e00a      	b.n	8008756 <UART_SetConfig+0x1ba>
 8008740:	2308      	movs	r3, #8
 8008742:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008746:	e006      	b.n	8008756 <UART_SetConfig+0x1ba>
 8008748:	2310      	movs	r3, #16
 800874a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800874e:	e002      	b.n	8008756 <UART_SetConfig+0x1ba>
 8008750:	2310      	movs	r3, #16
 8008752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	4a51      	ldr	r2, [pc, #324]	; (80088a0 <UART_SetConfig+0x304>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d17a      	bne.n	8008856 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008764:	2b08      	cmp	r3, #8
 8008766:	d824      	bhi.n	80087b2 <UART_SetConfig+0x216>
 8008768:	a201      	add	r2, pc, #4	; (adr r2, 8008770 <UART_SetConfig+0x1d4>)
 800876a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800876e:	bf00      	nop
 8008770:	08008795 	.word	0x08008795
 8008774:	080087b3 	.word	0x080087b3
 8008778:	0800879d 	.word	0x0800879d
 800877c:	080087b3 	.word	0x080087b3
 8008780:	080087a3 	.word	0x080087a3
 8008784:	080087b3 	.word	0x080087b3
 8008788:	080087b3 	.word	0x080087b3
 800878c:	080087b3 	.word	0x080087b3
 8008790:	080087ab 	.word	0x080087ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008794:	f7fd f824 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 8008798:	61f8      	str	r0, [r7, #28]
        break;
 800879a:	e010      	b.n	80087be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800879c:	4b44      	ldr	r3, [pc, #272]	; (80088b0 <UART_SetConfig+0x314>)
 800879e:	61fb      	str	r3, [r7, #28]
        break;
 80087a0:	e00d      	b.n	80087be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80087a2:	f7fc ff85 	bl	80056b0 <HAL_RCC_GetSysClockFreq>
 80087a6:	61f8      	str	r0, [r7, #28]
        break;
 80087a8:	e009      	b.n	80087be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80087aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80087ae:	61fb      	str	r3, [r7, #28]
        break;
 80087b0:	e005      	b.n	80087be <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80087b2:	2300      	movs	r3, #0
 80087b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80087bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80087be:	69fb      	ldr	r3, [r7, #28]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 8107 	beq.w	80089d4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	4613      	mov	r3, r2
 80087cc:	005b      	lsls	r3, r3, #1
 80087ce:	4413      	add	r3, r2
 80087d0:	69fa      	ldr	r2, [r7, #28]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d305      	bcc.n	80087e2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80087dc:	69fa      	ldr	r2, [r7, #28]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d903      	bls.n	80087ea <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80087e2:	2301      	movs	r3, #1
 80087e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80087e8:	e0f4      	b.n	80089d4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80087ea:	69fb      	ldr	r3, [r7, #28]
 80087ec:	2200      	movs	r2, #0
 80087ee:	461c      	mov	r4, r3
 80087f0:	4615      	mov	r5, r2
 80087f2:	f04f 0200 	mov.w	r2, #0
 80087f6:	f04f 0300 	mov.w	r3, #0
 80087fa:	022b      	lsls	r3, r5, #8
 80087fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008800:	0222      	lsls	r2, r4, #8
 8008802:	68f9      	ldr	r1, [r7, #12]
 8008804:	6849      	ldr	r1, [r1, #4]
 8008806:	0849      	lsrs	r1, r1, #1
 8008808:	2000      	movs	r0, #0
 800880a:	4688      	mov	r8, r1
 800880c:	4681      	mov	r9, r0
 800880e:	eb12 0a08 	adds.w	sl, r2, r8
 8008812:	eb43 0b09 	adc.w	fp, r3, r9
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	2200      	movs	r2, #0
 800881c:	603b      	str	r3, [r7, #0]
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008824:	4650      	mov	r0, sl
 8008826:	4659      	mov	r1, fp
 8008828:	f7f7 fd22 	bl	8000270 <__aeabi_uldivmod>
 800882c:	4602      	mov	r2, r0
 800882e:	460b      	mov	r3, r1
 8008830:	4613      	mov	r3, r2
 8008832:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008834:	69bb      	ldr	r3, [r7, #24]
 8008836:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800883a:	d308      	bcc.n	800884e <UART_SetConfig+0x2b2>
 800883c:	69bb      	ldr	r3, [r7, #24]
 800883e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008842:	d204      	bcs.n	800884e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	60da      	str	r2, [r3, #12]
 800884c:	e0c2      	b.n	80089d4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008854:	e0be      	b.n	80089d4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800885e:	d16a      	bne.n	8008936 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8008860:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008864:	2b08      	cmp	r3, #8
 8008866:	d834      	bhi.n	80088d2 <UART_SetConfig+0x336>
 8008868:	a201      	add	r2, pc, #4	; (adr r2, 8008870 <UART_SetConfig+0x2d4>)
 800886a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800886e:	bf00      	nop
 8008870:	08008895 	.word	0x08008895
 8008874:	080088b5 	.word	0x080088b5
 8008878:	080088bd 	.word	0x080088bd
 800887c:	080088d3 	.word	0x080088d3
 8008880:	080088c3 	.word	0x080088c3
 8008884:	080088d3 	.word	0x080088d3
 8008888:	080088d3 	.word	0x080088d3
 800888c:	080088d3 	.word	0x080088d3
 8008890:	080088cb 	.word	0x080088cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008894:	f7fc ffa4 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 8008898:	61f8      	str	r0, [r7, #28]
        break;
 800889a:	e020      	b.n	80088de <UART_SetConfig+0x342>
 800889c:	efff69f3 	.word	0xefff69f3
 80088a0:	40008000 	.word	0x40008000
 80088a4:	40013800 	.word	0x40013800
 80088a8:	40021000 	.word	0x40021000
 80088ac:	40004400 	.word	0x40004400
 80088b0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80088b4:	f7fc ffaa 	bl	800580c <HAL_RCC_GetPCLK2Freq>
 80088b8:	61f8      	str	r0, [r7, #28]
        break;
 80088ba:	e010      	b.n	80088de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088bc:	4b4c      	ldr	r3, [pc, #304]	; (80089f0 <UART_SetConfig+0x454>)
 80088be:	61fb      	str	r3, [r7, #28]
        break;
 80088c0:	e00d      	b.n	80088de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088c2:	f7fc fef5 	bl	80056b0 <HAL_RCC_GetSysClockFreq>
 80088c6:	61f8      	str	r0, [r7, #28]
        break;
 80088c8:	e009      	b.n	80088de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088ce:	61fb      	str	r3, [r7, #28]
        break;
 80088d0:	e005      	b.n	80088de <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80088d2:	2300      	movs	r3, #0
 80088d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80088d6:	2301      	movs	r3, #1
 80088d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80088dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088de:	69fb      	ldr	r3, [r7, #28]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d077      	beq.n	80089d4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80088e4:	69fb      	ldr	r3, [r7, #28]
 80088e6:	005a      	lsls	r2, r3, #1
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	685b      	ldr	r3, [r3, #4]
 80088ec:	085b      	lsrs	r3, r3, #1
 80088ee:	441a      	add	r2, r3
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	685b      	ldr	r3, [r3, #4]
 80088f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80088f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	2b0f      	cmp	r3, #15
 80088fe:	d916      	bls.n	800892e <UART_SetConfig+0x392>
 8008900:	69bb      	ldr	r3, [r7, #24]
 8008902:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008906:	d212      	bcs.n	800892e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	b29b      	uxth	r3, r3
 800890c:	f023 030f 	bic.w	r3, r3, #15
 8008910:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008912:	69bb      	ldr	r3, [r7, #24]
 8008914:	085b      	lsrs	r3, r3, #1
 8008916:	b29b      	uxth	r3, r3
 8008918:	f003 0307 	and.w	r3, r3, #7
 800891c:	b29a      	uxth	r2, r3
 800891e:	8afb      	ldrh	r3, [r7, #22]
 8008920:	4313      	orrs	r3, r2
 8008922:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	8afa      	ldrh	r2, [r7, #22]
 800892a:	60da      	str	r2, [r3, #12]
 800892c:	e052      	b.n	80089d4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008934:	e04e      	b.n	80089d4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008936:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800893a:	2b08      	cmp	r3, #8
 800893c:	d827      	bhi.n	800898e <UART_SetConfig+0x3f2>
 800893e:	a201      	add	r2, pc, #4	; (adr r2, 8008944 <UART_SetConfig+0x3a8>)
 8008940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008944:	08008969 	.word	0x08008969
 8008948:	08008971 	.word	0x08008971
 800894c:	08008979 	.word	0x08008979
 8008950:	0800898f 	.word	0x0800898f
 8008954:	0800897f 	.word	0x0800897f
 8008958:	0800898f 	.word	0x0800898f
 800895c:	0800898f 	.word	0x0800898f
 8008960:	0800898f 	.word	0x0800898f
 8008964:	08008987 	.word	0x08008987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008968:	f7fc ff3a 	bl	80057e0 <HAL_RCC_GetPCLK1Freq>
 800896c:	61f8      	str	r0, [r7, #28]
        break;
 800896e:	e014      	b.n	800899a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008970:	f7fc ff4c 	bl	800580c <HAL_RCC_GetPCLK2Freq>
 8008974:	61f8      	str	r0, [r7, #28]
        break;
 8008976:	e010      	b.n	800899a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008978:	4b1d      	ldr	r3, [pc, #116]	; (80089f0 <UART_SetConfig+0x454>)
 800897a:	61fb      	str	r3, [r7, #28]
        break;
 800897c:	e00d      	b.n	800899a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800897e:	f7fc fe97 	bl	80056b0 <HAL_RCC_GetSysClockFreq>
 8008982:	61f8      	str	r0, [r7, #28]
        break;
 8008984:	e009      	b.n	800899a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800898a:	61fb      	str	r3, [r7, #28]
        break;
 800898c:	e005      	b.n	800899a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800898e:	2300      	movs	r3, #0
 8008990:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008998:	bf00      	nop
    }

    if (pclk != 0U)
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d019      	beq.n	80089d4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	085a      	lsrs	r2, r3, #1
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	441a      	add	r2, r3
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80089b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80089b4:	69bb      	ldr	r3, [r7, #24]
 80089b6:	2b0f      	cmp	r3, #15
 80089b8:	d909      	bls.n	80089ce <UART_SetConfig+0x432>
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c0:	d205      	bcs.n	80089ce <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	b29a      	uxth	r2, r3
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60da      	str	r2, [r3, #12]
 80089cc:	e002      	b.n	80089d4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80089ce:	2301      	movs	r3, #1
 80089d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	2200      	movs	r2, #0
 80089d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	2200      	movs	r2, #0
 80089de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80089e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3728      	adds	r7, #40	; 0x28
 80089e8:	46bd      	mov	sp, r7
 80089ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80089ee:	bf00      	nop
 80089f0:	00f42400 	.word	0x00f42400

080089f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80089f4:	b480      	push	{r7}
 80089f6:	b083      	sub	sp, #12
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a00:	f003 0301 	and.w	r3, r3, #1
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d00a      	beq.n	8008a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	685b      	ldr	r3, [r3, #4]
 8008a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	430a      	orrs	r2, r1
 8008a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a22:	f003 0302 	and.w	r3, r3, #2
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00a      	beq.n	8008a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	685b      	ldr	r3, [r3, #4]
 8008a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	430a      	orrs	r2, r1
 8008a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	f003 0304 	and.w	r3, r3, #4
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d00a      	beq.n	8008a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	685b      	ldr	r3, [r3, #4]
 8008a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a66:	f003 0308 	and.w	r3, r3, #8
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00a      	beq.n	8008a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	685b      	ldr	r3, [r3, #4]
 8008a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	430a      	orrs	r2, r1
 8008a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a88:	f003 0310 	and.w	r3, r3, #16
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00a      	beq.n	8008aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00a      	beq.n	8008ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d01a      	beq.n	8008b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008af2:	d10a      	bne.n	8008b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00a      	beq.n	8008b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	605a      	str	r2, [r3, #4]
  }
}
 8008b2c:	bf00      	nop
 8008b2e:	370c      	adds	r7, #12
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b38:	b580      	push	{r7, lr}
 8008b3a:	b086      	sub	sp, #24
 8008b3c:	af02      	add	r7, sp, #8
 8008b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008b48:	f7f9 fb50 	bl	80021ec <HAL_GetTick>
 8008b4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0308 	and.w	r3, r3, #8
 8008b58:	2b08      	cmp	r3, #8
 8008b5a:	d10e      	bne.n	8008b7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b60:	9300      	str	r3, [sp, #0]
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2200      	movs	r2, #0
 8008b66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008b6a:	6878      	ldr	r0, [r7, #4]
 8008b6c:	f000 f82d 	bl	8008bca <UART_WaitOnFlagUntilTimeout>
 8008b70:	4603      	mov	r3, r0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d001      	beq.n	8008b7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b76:	2303      	movs	r3, #3
 8008b78:	e023      	b.n	8008bc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	f003 0304 	and.w	r3, r3, #4
 8008b84:	2b04      	cmp	r3, #4
 8008b86:	d10e      	bne.n	8008ba6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008b8c:	9300      	str	r3, [sp, #0]
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f817 	bl	8008bca <UART_WaitOnFlagUntilTimeout>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d001      	beq.n	8008ba6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ba2:	2303      	movs	r3, #3
 8008ba4:	e00d      	b.n	8008bc2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2220      	movs	r2, #32
 8008baa:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2220      	movs	r2, #32
 8008bb0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2200      	movs	r2, #0
 8008bbc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b09c      	sub	sp, #112	; 0x70
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	60f8      	str	r0, [r7, #12]
 8008bd2:	60b9      	str	r1, [r7, #8]
 8008bd4:	603b      	str	r3, [r7, #0]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008bda:	e0a5      	b.n	8008d28 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008bdc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008be2:	f000 80a1 	beq.w	8008d28 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008be6:	f7f9 fb01 	bl	80021ec <HAL_GetTick>
 8008bea:	4602      	mov	r2, r0
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	1ad3      	subs	r3, r2, r3
 8008bf0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d302      	bcc.n	8008bfc <UART_WaitOnFlagUntilTimeout+0x32>
 8008bf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d13e      	bne.n	8008c7a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c04:	e853 3f00 	ldrex	r3, [r3]
 8008c08:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c0c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c10:	667b      	str	r3, [r7, #100]	; 0x64
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	461a      	mov	r2, r3
 8008c18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c1a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c1c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c1e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c22:	e841 2300 	strex	r3, r2, [r1]
 8008c26:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008c28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d1e6      	bne.n	8008bfc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	3308      	adds	r3, #8
 8008c34:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c38:	e853 3f00 	ldrex	r3, [r3]
 8008c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c40:	f023 0301 	bic.w	r3, r3, #1
 8008c44:	663b      	str	r3, [r7, #96]	; 0x60
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3308      	adds	r3, #8
 8008c4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008c4e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008c50:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c52:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c54:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c56:	e841 2300 	strex	r3, r2, [r1]
 8008c5a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d1e5      	bne.n	8008c2e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2220      	movs	r2, #32
 8008c66:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2220      	movs	r2, #32
 8008c6c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2200      	movs	r2, #0
 8008c72:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008c76:	2303      	movs	r3, #3
 8008c78:	e067      	b.n	8008d4a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	f003 0304 	and.w	r3, r3, #4
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d04f      	beq.n	8008d28 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	69db      	ldr	r3, [r3, #28]
 8008c8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c96:	d147      	bne.n	8008d28 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008ca0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008caa:	e853 3f00 	ldrex	r3, [r3]
 8008cae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cb2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008cb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8008cc2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008cc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008cc8:	e841 2300 	strex	r3, r2, [r1]
 8008ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d1e6      	bne.n	8008ca2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3308      	adds	r3, #8
 8008cda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	e853 3f00 	ldrex	r3, [r3]
 8008ce2:	613b      	str	r3, [r7, #16]
   return(result);
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	f023 0301 	bic.w	r3, r3, #1
 8008cea:	66bb      	str	r3, [r7, #104]	; 0x68
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	3308      	adds	r3, #8
 8008cf2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008cf4:	623a      	str	r2, [r7, #32]
 8008cf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cf8:	69f9      	ldr	r1, [r7, #28]
 8008cfa:	6a3a      	ldr	r2, [r7, #32]
 8008cfc:	e841 2300 	strex	r3, r2, [r1]
 8008d00:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d02:	69bb      	ldr	r3, [r7, #24]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d1e5      	bne.n	8008cd4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2220      	movs	r2, #32
 8008d0c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2220      	movs	r2, #32
 8008d12:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2220      	movs	r2, #32
 8008d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008d24:	2303      	movs	r3, #3
 8008d26:	e010      	b.n	8008d4a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	69da      	ldr	r2, [r3, #28]
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	4013      	ands	r3, r2
 8008d32:	68ba      	ldr	r2, [r7, #8]
 8008d34:	429a      	cmp	r2, r3
 8008d36:	bf0c      	ite	eq
 8008d38:	2301      	moveq	r3, #1
 8008d3a:	2300      	movne	r3, #0
 8008d3c:	b2db      	uxtb	r3, r3
 8008d3e:	461a      	mov	r2, r3
 8008d40:	79fb      	ldrb	r3, [r7, #7]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	f43f af4a 	beq.w	8008bdc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008d48:	2300      	movs	r3, #0
}
 8008d4a:	4618      	mov	r0, r3
 8008d4c:	3770      	adds	r7, #112	; 0x70
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	bd80      	pop	{r7, pc}

08008d52 <u8g_IsBBXIntersection>:
  }
}


uint8_t u8g_IsBBXIntersection(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, u8g_uint_t w, u8g_uint_t h)
{
 8008d52:	b490      	push	{r4, r7}
 8008d54:	b084      	sub	sp, #16
 8008d56:	af00      	add	r7, sp, #0
 8008d58:	6078      	str	r0, [r7, #4]
 8008d5a:	4608      	mov	r0, r1
 8008d5c:	4611      	mov	r1, r2
 8008d5e:	461a      	mov	r2, r3
 8008d60:	4603      	mov	r3, r0
 8008d62:	70fb      	strb	r3, [r7, #3]
 8008d64:	460b      	mov	r3, r1
 8008d66:	70bb      	strb	r3, [r7, #2]
 8008d68:	4613      	mov	r3, r2
 8008d6a:	707b      	strb	r3, [r7, #1]
  register u8g_uint_t tmp;
  tmp = y;
 8008d6c:	78bc      	ldrb	r4, [r7, #2]
  tmp += h;
 8008d6e:	7e3b      	ldrb	r3, [r7, #24]
 8008d70:	4423      	add	r3, r4
 8008d72:	b2dc      	uxtb	r4, r3
  tmp--;
 8008d74:	4623      	mov	r3, r4
 8008d76:	3b01      	subs	r3, #1
 8008d78:	b2dc      	uxtb	r4, r3
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8008d86:	73fa      	strb	r2, [r7, #15]
 8008d88:	73bb      	strb	r3, [r7, #14]
 8008d8a:	78bb      	ldrb	r3, [r7, #2]
 8008d8c:	737b      	strb	r3, [r7, #13]
 8008d8e:	4623      	mov	r3, r4
 8008d90:	733b      	strb	r3, [r7, #12]
  if ( v0 <= a1 )
 8008d92:	7bba      	ldrb	r2, [r7, #14]
 8008d94:	7b7b      	ldrb	r3, [r7, #13]
 8008d96:	429a      	cmp	r2, r3
 8008d98:	d30d      	bcc.n	8008db6 <u8g_IsBBXIntersection+0x64>
    if ( v1 >= a0 )
 8008d9a:	7bfa      	ldrb	r2, [r7, #15]
 8008d9c:	7b3b      	ldrb	r3, [r7, #12]
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d801      	bhi.n	8008da6 <u8g_IsBBXIntersection+0x54>
      return 1;
 8008da2:	2301      	movs	r3, #1
 8008da4:	e014      	b.n	8008dd0 <u8g_IsBBXIntersection+0x7e>
      if ( v0 > v1 )
 8008da6:	7b7a      	ldrb	r2, [r7, #13]
 8008da8:	7b3b      	ldrb	r3, [r7, #12]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d901      	bls.n	8008db2 <u8g_IsBBXIntersection+0x60>
	return 1;
 8008dae:	2301      	movs	r3, #1
 8008db0:	e00e      	b.n	8008dd0 <u8g_IsBBXIntersection+0x7e>
	return 0;
 8008db2:	2300      	movs	r3, #0
 8008db4:	e00c      	b.n	8008dd0 <u8g_IsBBXIntersection+0x7e>
    if ( v1 >= a0 )
 8008db6:	7bfa      	ldrb	r2, [r7, #15]
 8008db8:	7b3b      	ldrb	r3, [r7, #12]
 8008dba:	429a      	cmp	r2, r3
 8008dbc:	d807      	bhi.n	8008dce <u8g_IsBBXIntersection+0x7c>
      if ( v0 > v1 )
 8008dbe:	7b7a      	ldrb	r2, [r7, #13]
 8008dc0:	7b3b      	ldrb	r3, [r7, #12]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d901      	bls.n	8008dca <u8g_IsBBXIntersection+0x78>
	return 1;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e002      	b.n	8008dd0 <u8g_IsBBXIntersection+0x7e>
	return 0;
 8008dca:	2300      	movs	r3, #0
 8008dcc:	e000      	b.n	8008dd0 <u8g_IsBBXIntersection+0x7e>
      return 0;
 8008dce:	2300      	movs	r3, #0
  if ( u8g_is_intersection_decision_tree(u8g->current_page.y0, u8g->current_page.y1, y, tmp) == 0 )
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d101      	bne.n	8008dd8 <u8g_IsBBXIntersection+0x86>
    return 0; 
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	e032      	b.n	8008e3e <u8g_IsBBXIntersection+0xec>
  
  tmp = x;
 8008dd8:	78fc      	ldrb	r4, [r7, #3]
  tmp += w;
 8008dda:	787b      	ldrb	r3, [r7, #1]
 8008ddc:	4423      	add	r3, r4
 8008dde:	b2dc      	uxtb	r4, r3
  tmp--;
 8008de0:	4623      	mov	r3, r4
 8008de2:	3b01      	subs	r3, #1
 8008de4:	b2dc      	uxtb	r4, r3
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008df2:	72fa      	strb	r2, [r7, #11]
 8008df4:	72bb      	strb	r3, [r7, #10]
 8008df6:	78fb      	ldrb	r3, [r7, #3]
 8008df8:	727b      	strb	r3, [r7, #9]
 8008dfa:	4623      	mov	r3, r4
 8008dfc:	723b      	strb	r3, [r7, #8]
  if ( v0 <= a1 )
 8008dfe:	7aba      	ldrb	r2, [r7, #10]
 8008e00:	7a7b      	ldrb	r3, [r7, #9]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d30d      	bcc.n	8008e22 <u8g_IsBBXIntersection+0xd0>
    if ( v1 >= a0 )
 8008e06:	7afa      	ldrb	r2, [r7, #11]
 8008e08:	7a3b      	ldrb	r3, [r7, #8]
 8008e0a:	429a      	cmp	r2, r3
 8008e0c:	d801      	bhi.n	8008e12 <u8g_IsBBXIntersection+0xc0>
      return 1;
 8008e0e:	2301      	movs	r3, #1
 8008e10:	e014      	b.n	8008e3c <u8g_IsBBXIntersection+0xea>
      if ( v0 > v1 )
 8008e12:	7a7a      	ldrb	r2, [r7, #9]
 8008e14:	7a3b      	ldrb	r3, [r7, #8]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d901      	bls.n	8008e1e <u8g_IsBBXIntersection+0xcc>
	return 1;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e00e      	b.n	8008e3c <u8g_IsBBXIntersection+0xea>
	return 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	e00c      	b.n	8008e3c <u8g_IsBBXIntersection+0xea>
    if ( v1 >= a0 )
 8008e22:	7afa      	ldrb	r2, [r7, #11]
 8008e24:	7a3b      	ldrb	r3, [r7, #8]
 8008e26:	429a      	cmp	r2, r3
 8008e28:	d807      	bhi.n	8008e3a <u8g_IsBBXIntersection+0xe8>
      if ( v0 > v1 )
 8008e2a:	7a7a      	ldrb	r2, [r7, #9]
 8008e2c:	7a3b      	ldrb	r3, [r7, #8]
 8008e2e:	429a      	cmp	r2, r3
 8008e30:	d901      	bls.n	8008e36 <u8g_IsBBXIntersection+0xe4>
	return 1;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e002      	b.n	8008e3c <u8g_IsBBXIntersection+0xea>
	return 0;
 8008e36:	2300      	movs	r3, #0
 8008e38:	e000      	b.n	8008e3c <u8g_IsBBXIntersection+0xea>
      return 0;
 8008e3a:	2300      	movs	r3, #0
  return u8g_is_intersection_decision_tree(u8g->current_page.x0, u8g->current_page.x1, x, tmp);
 8008e3c:	bf00      	nop
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3710      	adds	r7, #16
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bc90      	pop	{r4, r7}
 8008e46:	4770      	bx	lr

08008e48 <u8g_InitCom>:
*/

#include "u8g.h"

uint8_t u8g_InitCom(u8g_t *u8g, u8g_dev_t *dev, uint8_t clk_cycle_time)
{
 8008e48:	b590      	push	{r4, r7, lr}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	60f8      	str	r0, [r7, #12]
 8008e50:	60b9      	str	r1, [r7, #8]
 8008e52:	4613      	mov	r3, r2
 8008e54:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_INIT, clk_cycle_time, NULL);
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	689c      	ldr	r4, [r3, #8]
 8008e5a:	79fa      	ldrb	r2, [r7, #7]
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	2101      	movs	r1, #1
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	47a0      	blx	r4
 8008e64:	4603      	mov	r3, r0
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3714      	adds	r7, #20
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd90      	pop	{r4, r7, pc}

08008e6e <u8g_SetChipSelect>:
  dev->com_fn(u8g, U8G_COM_MSG_STOP, 0, NULL);
}

/* cs contains the chip number, which should be enabled */
void u8g_SetChipSelect(u8g_t *u8g, u8g_dev_t *dev, uint8_t cs)
{
 8008e6e:	b590      	push	{r4, r7, lr}
 8008e70:	b085      	sub	sp, #20
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	60f8      	str	r0, [r7, #12]
 8008e76:	60b9      	str	r1, [r7, #8]
 8008e78:	4613      	mov	r3, r2
 8008e7a:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_CHIP_SELECT, cs, NULL);
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	689c      	ldr	r4, [r3, #8]
 8008e80:	79fa      	ldrb	r2, [r7, #7]
 8008e82:	2300      	movs	r3, #0
 8008e84:	2103      	movs	r1, #3
 8008e86:	68f8      	ldr	r0, [r7, #12]
 8008e88:	47a0      	blx	r4
}
 8008e8a:	bf00      	nop
 8008e8c:	3714      	adds	r7, #20
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd90      	pop	{r4, r7, pc}

08008e92 <u8g_SetResetLow>:

void u8g_SetResetLow(u8g_t *u8g, u8g_dev_t *dev)
{
 8008e92:	b590      	push	{r4, r7, lr}
 8008e94:	b083      	sub	sp, #12
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
 8008e9a:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 0, NULL);
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	689c      	ldr	r4, [r3, #8]
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2104      	movs	r1, #4
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	47a0      	blx	r4
}
 8008eaa:	bf00      	nop
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd90      	pop	{r4, r7, pc}

08008eb2 <u8g_SetResetHigh>:

void u8g_SetResetHigh(u8g_t *u8g, u8g_dev_t *dev)
{
 8008eb2:	b590      	push	{r4, r7, lr}
 8008eb4:	b083      	sub	sp, #12
 8008eb6:	af00      	add	r7, sp, #0
 8008eb8:	6078      	str	r0, [r7, #4]
 8008eba:	6039      	str	r1, [r7, #0]
  dev->com_fn(u8g, U8G_COM_MSG_RESET, 1, NULL);
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	689c      	ldr	r4, [r3, #8]
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	2104      	movs	r1, #4
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	47a0      	blx	r4
}
 8008eca:	bf00      	nop
 8008ecc:	370c      	adds	r7, #12
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bd90      	pop	{r4, r7, pc}

08008ed2 <u8g_SetAddress>:


void u8g_SetAddress(u8g_t *u8g, u8g_dev_t *dev, uint8_t address)
{
 8008ed2:	b590      	push	{r4, r7, lr}
 8008ed4:	b085      	sub	sp, #20
 8008ed6:	af00      	add	r7, sp, #0
 8008ed8:	60f8      	str	r0, [r7, #12]
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	4613      	mov	r3, r2
 8008ede:	71fb      	strb	r3, [r7, #7]
  dev->com_fn(u8g, U8G_COM_MSG_ADDRESS, address, NULL);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	689c      	ldr	r4, [r3, #8]
 8008ee4:	79fa      	ldrb	r2, [r7, #7]
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	2102      	movs	r1, #2
 8008eea:	68f8      	ldr	r0, [r7, #12]
 8008eec:	47a0      	blx	r4
}
 8008eee:	bf00      	nop
 8008ef0:	3714      	adds	r7, #20
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	bd90      	pop	{r4, r7, pc}

08008ef6 <u8g_WriteByte>:

uint8_t u8g_WriteByte(u8g_t *u8g, u8g_dev_t *dev, uint8_t val)
{
 8008ef6:	b590      	push	{r4, r7, lr}
 8008ef8:	b085      	sub	sp, #20
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	60f8      	str	r0, [r7, #12]
 8008efe:	60b9      	str	r1, [r7, #8]
 8008f00:	4613      	mov	r3, r2
 8008f02:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_BYTE, val, NULL);
 8008f04:	68bb      	ldr	r3, [r7, #8]
 8008f06:	689c      	ldr	r4, [r3, #8]
 8008f08:	79fa      	ldrb	r2, [r7, #7]
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	2105      	movs	r1, #5
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	47a0      	blx	r4
 8008f12:	4603      	mov	r3, r0
}
 8008f14:	4618      	mov	r0, r3
 8008f16:	3714      	adds	r7, #20
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	bd90      	pop	{r4, r7, pc}

08008f1c <u8g_WriteSequence>:

uint8_t u8g_WriteSequence(u8g_t *u8g, u8g_dev_t *dev, uint8_t cnt, uint8_t *seq)
{
 8008f1c:	b590      	push	{r4, r7, lr}
 8008f1e:	b085      	sub	sp, #20
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	60f8      	str	r0, [r7, #12]
 8008f24:	60b9      	str	r1, [r7, #8]
 8008f26:	603b      	str	r3, [r7, #0]
 8008f28:	4613      	mov	r3, r2
 8008f2a:	71fb      	strb	r3, [r7, #7]
  return dev->com_fn(u8g, U8G_COM_MSG_WRITE_SEQ, cnt, seq);
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	689c      	ldr	r4, [r3, #8]
 8008f30:	79fa      	ldrb	r2, [r7, #7]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	2106      	movs	r1, #6
 8008f36:	68f8      	ldr	r0, [r7, #12]
 8008f38:	47a0      	blx	r4
 8008f3a:	4603      	mov	r3, r0
}
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	3714      	adds	r7, #20
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd90      	pop	{r4, r7, pc}

08008f44 <u8g_WriteEscSeqP>:
#define U8G_ESC_255 255, 255
#define U8G_ESC_RST(x) 255, (0xc0 | ((x)&0x0f))

*/
uint8_t u8g_WriteEscSeqP(u8g_t *u8g, u8g_dev_t *dev, const uint8_t *esc_seq)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b086      	sub	sp, #24
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
  uint8_t is_escape = 0;
 8008f50:	2300      	movs	r3, #0
 8008f52:	75fb      	strb	r3, [r7, #23]
  uint8_t value;
  for(;;)
  {
    value = u8g_pgm_read(esc_seq);
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	781b      	ldrb	r3, [r3, #0]
 8008f58:	75bb      	strb	r3, [r7, #22]
    if ( is_escape == 0 )
 8008f5a:	7dfb      	ldrb	r3, [r7, #23]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d110      	bne.n	8008f82 <u8g_WriteEscSeqP+0x3e>
    {
      if ( value != 255 )
 8008f60:	7dbb      	ldrb	r3, [r7, #22]
 8008f62:	2bff      	cmp	r3, #255	; 0xff
 8008f64:	d00a      	beq.n	8008f7c <u8g_WriteEscSeqP+0x38>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8008f66:	7dbb      	ldrb	r3, [r7, #22]
 8008f68:	461a      	mov	r2, r3
 8008f6a:	68b9      	ldr	r1, [r7, #8]
 8008f6c:	68f8      	ldr	r0, [r7, #12]
 8008f6e:	f7ff ffc2 	bl	8008ef6 <u8g_WriteByte>
 8008f72:	4603      	mov	r3, r0
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d160      	bne.n	800903a <u8g_WriteEscSeqP+0xf6>
          return 0;
 8008f78:	2300      	movs	r3, #0
 8008f7a:	e064      	b.n	8009046 <u8g_WriteEscSeqP+0x102>
      }
      else
      {
        is_escape = 1;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	75fb      	strb	r3, [r7, #23]
 8008f80:	e05b      	b.n	800903a <u8g_WriteEscSeqP+0xf6>
      }
    }
    else
    {
      if ( value == 255 )
 8008f82:	7dbb      	ldrb	r3, [r7, #22]
 8008f84:	2bff      	cmp	r3, #255	; 0xff
 8008f86:	d10a      	bne.n	8008f9e <u8g_WriteEscSeqP+0x5a>
      {
        if ( u8g_WriteByte(u8g, dev, value) == 0 )
 8008f88:	7dbb      	ldrb	r3, [r7, #22]
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	68b9      	ldr	r1, [r7, #8]
 8008f8e:	68f8      	ldr	r0, [r7, #12]
 8008f90:	f7ff ffb1 	bl	8008ef6 <u8g_WriteByte>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d14d      	bne.n	8009036 <u8g_WriteEscSeqP+0xf2>
          return 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	e053      	b.n	8009046 <u8g_WriteEscSeqP+0x102>
      }
      else if ( value == 254 )
 8008f9e:	7dbb      	ldrb	r3, [r7, #22]
 8008fa0:	2bfe      	cmp	r3, #254	; 0xfe
 8008fa2:	d04e      	beq.n	8009042 <u8g_WriteEscSeqP+0xfe>
      {
        break;
      }
      else if ( value >= 0x0f0 )
 8008fa4:	7dbb      	ldrb	r3, [r7, #22]
 8008fa6:	2bef      	cmp	r3, #239	; 0xef
 8008fa8:	d845      	bhi.n	8009036 <u8g_WriteEscSeqP+0xf2>
      {
        /* not yet used, do nothing */
      }
      else if ( value >= 0xe0  )
 8008faa:	7dbb      	ldrb	r3, [r7, #22]
 8008fac:	2bdf      	cmp	r3, #223	; 0xdf
 8008fae:	d909      	bls.n	8008fc4 <u8g_WriteEscSeqP+0x80>
      {
        u8g_SetAddress(u8g, dev, value & 0x0f);
 8008fb0:	7dbb      	ldrb	r3, [r7, #22]
 8008fb2:	f003 030f 	and.w	r3, r3, #15
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	461a      	mov	r2, r3
 8008fba:	68b9      	ldr	r1, [r7, #8]
 8008fbc:	68f8      	ldr	r0, [r7, #12]
 8008fbe:	f7ff ff88 	bl	8008ed2 <u8g_SetAddress>
 8008fc2:	e038      	b.n	8009036 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xd0 )
 8008fc4:	7dbb      	ldrb	r3, [r7, #22]
 8008fc6:	2bcf      	cmp	r3, #207	; 0xcf
 8008fc8:	d909      	bls.n	8008fde <u8g_WriteEscSeqP+0x9a>
      {
        u8g_SetChipSelect(u8g, dev, value & 0x0f);
 8008fca:	7dbb      	ldrb	r3, [r7, #22]
 8008fcc:	f003 030f 	and.w	r3, r3, #15
 8008fd0:	b2db      	uxtb	r3, r3
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	68b9      	ldr	r1, [r7, #8]
 8008fd6:	68f8      	ldr	r0, [r7, #12]
 8008fd8:	f7ff ff49 	bl	8008e6e <u8g_SetChipSelect>
 8008fdc:	e02b      	b.n	8009036 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xc0 )
 8008fde:	7dbb      	ldrb	r3, [r7, #22]
 8008fe0:	2bbf      	cmp	r3, #191	; 0xbf
 8008fe2:	d91c      	bls.n	800901e <u8g_WriteEscSeqP+0xda>
      {
        u8g_SetResetLow(u8g, dev);
 8008fe4:	68b9      	ldr	r1, [r7, #8]
 8008fe6:	68f8      	ldr	r0, [r7, #12]
 8008fe8:	f7ff ff53 	bl	8008e92 <u8g_SetResetLow>
        value &= 0x0f;
 8008fec:	7dbb      	ldrb	r3, [r7, #22]
 8008fee:	f003 030f 	and.w	r3, r3, #15
 8008ff2:	75bb      	strb	r3, [r7, #22]
        value <<= 4;
 8008ff4:	7dbb      	ldrb	r3, [r7, #22]
 8008ff6:	011b      	lsls	r3, r3, #4
 8008ff8:	75bb      	strb	r3, [r7, #22]
        value+=2;
 8008ffa:	7dbb      	ldrb	r3, [r7, #22]
 8008ffc:	3302      	adds	r3, #2
 8008ffe:	75bb      	strb	r3, [r7, #22]
        u8g_Delay(value);
 8009000:	7dbb      	ldrb	r3, [r7, #22]
 8009002:	b29b      	uxth	r3, r3
 8009004:	4618      	mov	r0, r3
 8009006:	f7f7 ff61 	bl	8000ecc <u8g_Delay>
        u8g_SetResetHigh(u8g, dev);
 800900a:	68b9      	ldr	r1, [r7, #8]
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f7ff ff50 	bl	8008eb2 <u8g_SetResetHigh>
        u8g_Delay(value);
 8009012:	7dbb      	ldrb	r3, [r7, #22]
 8009014:	b29b      	uxth	r3, r3
 8009016:	4618      	mov	r0, r3
 8009018:	f7f7 ff58 	bl	8000ecc <u8g_Delay>
 800901c:	e00b      	b.n	8009036 <u8g_WriteEscSeqP+0xf2>
      }
      else if ( value >= 0xbe )
 800901e:	7dbb      	ldrb	r3, [r7, #22]
 8009020:	2bbd      	cmp	r3, #189	; 0xbd
 8009022:	d808      	bhi.n	8009036 <u8g_WriteEscSeqP+0xf2>
      {
	/* not yet implemented */
        /* u8g_SetVCC(u8g, dev, value & 0x01); */
      }
      else if ( value <= 127 )
 8009024:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009028:	2b00      	cmp	r3, #0
 800902a:	db04      	blt.n	8009036 <u8g_WriteEscSeqP+0xf2>
      {
        u8g_Delay(value);
 800902c:	7dbb      	ldrb	r3, [r7, #22]
 800902e:	b29b      	uxth	r3, r3
 8009030:	4618      	mov	r0, r3
 8009032:	f7f7 ff4b 	bl	8000ecc <u8g_Delay>
      }
      is_escape = 0;
 8009036:	2300      	movs	r3, #0
 8009038:	75fb      	strb	r3, [r7, #23]
    }
    esc_seq++;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	3301      	adds	r3, #1
 800903e:	607b      	str	r3, [r7, #4]
    value = u8g_pgm_read(esc_seq);
 8009040:	e788      	b.n	8008f54 <u8g_WriteEscSeqP+0x10>
        break;
 8009042:	bf00      	nop
  }
  return 1;
 8009044:	2301      	movs	r3, #1
}
 8009046:	4618      	mov	r0, r3
 8009048:	3718      	adds	r7, #24
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <u8g_com_null_fn>:
*/

#include "u8g.h"

uint8_t u8g_com_null_fn(u8g_t *u8g, uint8_t msg, uint8_t arg_val, void *arg_ptr)
{
 8009050:	b480      	push	{r7}
 8009052:	b085      	sub	sp, #20
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	607b      	str	r3, [r7, #4]
 800905a:	460b      	mov	r3, r1
 800905c:	72fb      	strb	r3, [r7, #11]
 800905e:	4613      	mov	r3, r2
 8009060:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 8009062:	7afb      	ldrb	r3, [r7, #11]
 8009064:	2b06      	cmp	r3, #6
 8009066:	d811      	bhi.n	800908c <u8g_com_null_fn+0x3c>
 8009068:	a201      	add	r2, pc, #4	; (adr r2, 8009070 <u8g_com_null_fn+0x20>)
 800906a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906e:	bf00      	nop
 8009070:	0800908d 	.word	0x0800908d
 8009074:	0800908d 	.word	0x0800908d
 8009078:	0800908d 	.word	0x0800908d
 800907c:	0800908d 	.word	0x0800908d
 8009080:	0800908d 	.word	0x0800908d
 8009084:	0800908d 	.word	0x0800908d
 8009088:	0800908d 	.word	0x0800908d
    case U8G_COM_MSG_WRITE_BYTE:
      break;
    case U8G_COM_MSG_WRITE_SEQ:
      break;
  }
  return 1;
 800908c:	2301      	movs	r3, #1
}
 800908e:	4618      	mov	r0, r3
 8009090:	3714      	adds	r7, #20
 8009092:	46bd      	mov	sp, r7
 8009094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop

0800909c <u8g_dev_sh1106_128x64_fn>:
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
}

uint8_t u8g_dev_sh1106_128x64_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	60f8      	str	r0, [r7, #12]
 80090a4:	60b9      	str	r1, [r7, #8]
 80090a6:	603b      	str	r3, [r7, #0]
 80090a8:	4613      	mov	r3, r2
 80090aa:	71fb      	strb	r3, [r7, #7]
  switch(msg)
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	3b0a      	subs	r3, #10
 80090b0:	2b0b      	cmp	r3, #11
 80090b2:	d878      	bhi.n	80091a6 <u8g_dev_sh1106_128x64_fn+0x10a>
 80090b4:	a201      	add	r2, pc, #4	; (adr r2, 80090bc <u8g_dev_sh1106_128x64_fn+0x20>)
 80090b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ba:	bf00      	nop
 80090bc:	080090ed 	.word	0x080090ed
 80090c0:	080091a7 	.word	0x080091a7
 80090c4:	080091a7 	.word	0x080091a7
 80090c8:	080091a7 	.word	0x080091a7
 80090cc:	080091a7 	.word	0x080091a7
 80090d0:	0800916d 	.word	0x0800916d
 80090d4:	08009151 	.word	0x08009151
 80090d8:	0800915f 	.word	0x0800915f
 80090dc:	080091a7 	.word	0x080091a7
 80090e0:	080091a7 	.word	0x080091a7
 80090e4:	080091a7 	.word	0x080091a7
 80090e8:	08009103 	.word	0x08009103
  {
    case U8G_DEV_MSG_INIT:
      u8g_InitCom(u8g, dev, U8G_SPI_CLK_CYCLE_300NS);
 80090ec:	2202      	movs	r2, #2
 80090ee:	68b9      	ldr	r1, [r7, #8]
 80090f0:	68f8      	ldr	r0, [r7, #12]
 80090f2:	f7ff fea9 	bl	8008e48 <u8g_InitCom>
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd1306_128x64_init_seq);
 80090f6:	4a31      	ldr	r2, [pc, #196]	; (80091bc <u8g_dev_sh1106_128x64_fn+0x120>)
 80090f8:	68b9      	ldr	r1, [r7, #8]
 80090fa:	68f8      	ldr	r0, [r7, #12]
 80090fc:	f7ff ff22 	bl	8008f44 <u8g_WriteEscSeqP>
      break;
 8009100:	e051      	b.n	80091a6 <u8g_dev_sh1106_128x64_fn+0x10a>
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_NEXT:
      {
        u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	685b      	ldr	r3, [r3, #4]
 8009106:	617b      	str	r3, [r7, #20]
        u8g_WriteEscSeqP(u8g, dev, u8g_dev_sh1106_128x64_data_start);    
 8009108:	4a2d      	ldr	r2, [pc, #180]	; (80091c0 <u8g_dev_sh1106_128x64_fn+0x124>)
 800910a:	68b9      	ldr	r1, [r7, #8]
 800910c:	68f8      	ldr	r0, [r7, #12]
 800910e:	f7ff ff19 	bl	8008f44 <u8g_WriteEscSeqP>
        u8g_WriteByte(u8g, dev, 0x0b0 | pb->p.page); /* select current page (SSD1306) */
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	791b      	ldrb	r3, [r3, #4]
 8009116:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800911a:	b2db      	uxtb	r3, r3
 800911c:	461a      	mov	r2, r3
 800911e:	68b9      	ldr	r1, [r7, #8]
 8009120:	68f8      	ldr	r0, [r7, #12]
 8009122:	f7ff fee8 	bl	8008ef6 <u8g_WriteByte>
        u8g_SetAddress(u8g, dev, 1);           /* data mode */
 8009126:	2201      	movs	r2, #1
 8009128:	68b9      	ldr	r1, [r7, #8]
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f7ff fed1 	bl	8008ed2 <u8g_SetAddress>
        if ( u8g_pb_WriteBuffer(pb, u8g, dev) == 0 )
 8009130:	68ba      	ldr	r2, [r7, #8]
 8009132:	68f9      	ldr	r1, [r7, #12]
 8009134:	6978      	ldr	r0, [r7, #20]
 8009136:	f000 fe73 	bl	8009e20 <u8g_pb_WriteBuffer>
 800913a:	4603      	mov	r3, r0
 800913c:	2b00      	cmp	r3, #0
 800913e:	d101      	bne.n	8009144 <u8g_dev_sh1106_128x64_fn+0xa8>
          return 0;
 8009140:	2300      	movs	r3, #0
 8009142:	e037      	b.n	80091b4 <u8g_dev_sh1106_128x64_fn+0x118>
        u8g_SetChipSelect(u8g, dev, 0);
 8009144:	2200      	movs	r2, #0
 8009146:	68b9      	ldr	r1, [r7, #8]
 8009148:	68f8      	ldr	r0, [r7, #12]
 800914a:	f7ff fe90 	bl	8008e6e <u8g_SetChipSelect>
      }
      break;
 800914e:	e02a      	b.n	80091a6 <u8g_dev_sh1106_128x64_fn+0x10a>
    case U8G_DEV_MSG_SLEEP_ON:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_on);    
 8009150:	4a1c      	ldr	r2, [pc, #112]	; (80091c4 <u8g_dev_sh1106_128x64_fn+0x128>)
 8009152:	68b9      	ldr	r1, [r7, #8]
 8009154:	68f8      	ldr	r0, [r7, #12]
 8009156:	f7ff fef5 	bl	8008f44 <u8g_WriteEscSeqP>
      return 1;
 800915a:	2301      	movs	r3, #1
 800915c:	e02a      	b.n	80091b4 <u8g_dev_sh1106_128x64_fn+0x118>
    case U8G_DEV_MSG_SLEEP_OFF:
      u8g_WriteEscSeqP(u8g, dev, u8g_dev_ssd13xx_sleep_off);    
 800915e:	4a1a      	ldr	r2, [pc, #104]	; (80091c8 <u8g_dev_sh1106_128x64_fn+0x12c>)
 8009160:	68b9      	ldr	r1, [r7, #8]
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f7ff feee 	bl	8008f44 <u8g_WriteEscSeqP>
      return 1;
 8009168:	2301      	movs	r3, #1
 800916a:	e023      	b.n	80091b4 <u8g_dev_sh1106_128x64_fn+0x118>
    case U8G_DEV_MSG_CONTRAST:
    {
	u8g_SetChipSelect(u8g, dev, 1);
 800916c:	2201      	movs	r2, #1
 800916e:	68b9      	ldr	r1, [r7, #8]
 8009170:	68f8      	ldr	r0, [r7, #12]
 8009172:	f7ff fe7c 	bl	8008e6e <u8g_SetChipSelect>
	u8g_SetAddress(u8g, dev, 0); /* instruction mode */
 8009176:	2200      	movs	r2, #0
 8009178:	68b9      	ldr	r1, [r7, #8]
 800917a:	68f8      	ldr	r0, [r7, #12]
 800917c:	f7ff fea9 	bl	8008ed2 <u8g_SetAddress>
	u8g_WriteByte(u8g, dev, 0x81);
 8009180:	2281      	movs	r2, #129	; 0x81
 8009182:	68b9      	ldr	r1, [r7, #8]
 8009184:	68f8      	ldr	r0, [r7, #12]
 8009186:	f7ff feb6 	bl	8008ef6 <u8g_WriteByte>
	u8g_WriteByte(u8g, dev, *(uint8_t *) arg);
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	461a      	mov	r2, r3
 8009190:	68b9      	ldr	r1, [r7, #8]
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f7ff feaf 	bl	8008ef6 <u8g_WriteByte>
	u8g_SetChipSelect(u8g, dev, 0);
 8009198:	2200      	movs	r2, #0
 800919a:	68b9      	ldr	r1, [r7, #8]
 800919c:	68f8      	ldr	r0, [r7, #12]
 800919e:	f7ff fe66 	bl	8008e6e <u8g_SetChipSelect>
	return 1;
 80091a2:	2301      	movs	r3, #1
 80091a4:	e006      	b.n	80091b4 <u8g_dev_sh1106_128x64_fn+0x118>
    }
  }
  return u8g_dev_pb8v1_base_fn(u8g, dev, msg, arg);
 80091a6:	79fa      	ldrb	r2, [r7, #7]
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	68b9      	ldr	r1, [r7, #8]
 80091ac:	68f8      	ldr	r0, [r7, #12]
 80091ae:	f000 fef5 	bl	8009f9c <u8g_dev_pb8v1_base_fn>
 80091b2:	4603      	mov	r3, r0
}
 80091b4:	4618      	mov	r0, r3
 80091b6:	3718      	adds	r7, #24
 80091b8:	46bd      	mov	sp, r7
 80091ba:	bd80      	pop	{r7, pc}
 80091bc:	0800b460 	.word	0x0800b460
 80091c0:	0800b488 	.word	0x0800b488
 80091c4:	0800b490 	.word	0x0800b490
 80091c8:	0800b49c 	.word	0x0800b49c

080091cc <u8g_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE;
static uint8_t u8g_font_get_byte(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 80091cc:	b480      	push	{r7}
 80091ce:	b083      	sub	sp, #12
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
 80091d4:	460b      	mov	r3, r1
 80091d6:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80091d8:	78fb      	ldrb	r3, [r7, #3]
 80091da:	687a      	ldr	r2, [r7, #4]
 80091dc:	4413      	add	r3, r2
 80091de:	607b      	str	r3, [r7, #4]
  return u8g_pgm_read( (u8g_pgm_uint8_t *)font );  
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	781b      	ldrb	r3, [r3, #0]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	370c      	adds	r7, #12
 80091e8:	46bd      	mov	sp, r7
 80091ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ee:	4770      	bx	lr

080091f0 <u8g_font_get_word>:

static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset) U8G_NOINLINE; 
static uint16_t u8g_font_get_word(const u8g_fntpgm_uint8_t *font, uint8_t offset)
{
 80091f0:	b480      	push	{r7}
 80091f2:	b085      	sub	sp, #20
 80091f4:	af00      	add	r7, sp, #0
 80091f6:	6078      	str	r0, [r7, #4]
 80091f8:	460b      	mov	r3, r1
 80091fa:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80091fc:	78fb      	ldrb	r3, [r7, #3]
 80091fe:	687a      	ldr	r2, [r7, #4]
 8009200:	4413      	add	r3, r2
 8009202:	607b      	str	r3, [r7, #4]
    pos = u8g_pgm_read( (u8g_pgm_uint8_t *)font );
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	781b      	ldrb	r3, [r3, #0]
 8009208:	81fb      	strh	r3, [r7, #14]
    font++;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	3301      	adds	r3, #1
 800920e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8009210:	89fb      	ldrh	r3, [r7, #14]
 8009212:	021b      	lsls	r3, r3, #8
 8009214:	81fb      	strh	r3, [r7, #14]
    pos += u8g_pgm_read( (u8g_pgm_uint8_t *)font);
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	781b      	ldrb	r3, [r3, #0]
 800921a:	b29a      	uxth	r2, r3
 800921c:	89fb      	ldrh	r3, [r7, #14]
 800921e:	4413      	add	r3, r2
 8009220:	81fb      	strh	r3, [r7, #14]
    return pos;
 8009222:	89fb      	ldrh	r3, [r7, #14]
}
 8009224:	4618      	mov	r0, r3
 8009226:	3714      	adds	r7, #20
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <u8g_font_GetFormat>:
/*========================================================================*/
/* direct access on the font */

static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFormat(const u8g_fntpgm_uint8_t *font)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b082      	sub	sp, #8
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 0);
 8009238:	2100      	movs	r1, #0
 800923a:	6878      	ldr	r0, [r7, #4]
 800923c:	f7ff ffc6 	bl	80091cc <u8g_font_get_byte>
 8009240:	4603      	mov	r3, r0
}
 8009242:	4618      	mov	r0, r3
 8009244:	3708      	adds	r7, #8
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}

0800924a <u8g_font_GetFontGlyphStructureSize>:

static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font) U8G_NOINLINE;
static uint8_t u8g_font_GetFontGlyphStructureSize(const u8g_fntpgm_uint8_t *font)
{
 800924a:	b580      	push	{r7, lr}
 800924c:	b082      	sub	sp, #8
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  switch(u8g_font_GetFormat(font))
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7ff ffec 	bl	8009230 <u8g_font_GetFormat>
 8009258:	4603      	mov	r3, r0
 800925a:	2b02      	cmp	r3, #2
 800925c:	d00a      	beq.n	8009274 <u8g_font_GetFontGlyphStructureSize+0x2a>
 800925e:	2b02      	cmp	r3, #2
 8009260:	dc0a      	bgt.n	8009278 <u8g_font_GetFontGlyphStructureSize+0x2e>
 8009262:	2b00      	cmp	r3, #0
 8009264:	d002      	beq.n	800926c <u8g_font_GetFontGlyphStructureSize+0x22>
 8009266:	2b01      	cmp	r3, #1
 8009268:	d002      	beq.n	8009270 <u8g_font_GetFontGlyphStructureSize+0x26>
 800926a:	e005      	b.n	8009278 <u8g_font_GetFontGlyphStructureSize+0x2e>
  {
    case 0: return 6;
 800926c:	2306      	movs	r3, #6
 800926e:	e004      	b.n	800927a <u8g_font_GetFontGlyphStructureSize+0x30>
    case 1: return 3;
 8009270:	2303      	movs	r3, #3
 8009272:	e002      	b.n	800927a <u8g_font_GetFontGlyphStructureSize+0x30>
    case 2: return 6;
 8009274:	2306      	movs	r3, #6
 8009276:	e000      	b.n	800927a <u8g_font_GetFontGlyphStructureSize+0x30>
  }
  return 3;
 8009278:	2303      	movs	r3, #3
}
 800927a:	4618      	mov	r0, r3
 800927c:	3708      	adds	r7, #8
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <u8g_font_GetCapitalAHeight>:
{
  return u8g_font_get_byte(font, 4);
}

uint8_t u8g_font_GetCapitalAHeight(const void *font)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b082      	sub	sp, #8
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 5);
 800928a:	2105      	movs	r1, #5
 800928c:	6878      	ldr	r0, [r7, #4]
 800928e:	f7ff ff9d 	bl	80091cc <u8g_font_get_byte>
 8009292:	4603      	mov	r3, r0
}
 8009294:	4618      	mov	r0, r3
 8009296:	3708      	adds	r7, #8
 8009298:	46bd      	mov	sp, r7
 800929a:	bd80      	pop	{r7, pc}

0800929c <u8g_font_GetEncoding65Pos>:

uint16_t u8g_font_GetEncoding65Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding65Pos(const void *font)
{
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 6);
 80092a4:	2106      	movs	r1, #6
 80092a6:	6878      	ldr	r0, [r7, #4]
 80092a8:	f7ff ffa2 	bl	80091f0 <u8g_font_get_word>
 80092ac:	4603      	mov	r3, r0
}
 80092ae:	4618      	mov	r0, r3
 80092b0:	3708      	adds	r7, #8
 80092b2:	46bd      	mov	sp, r7
 80092b4:	bd80      	pop	{r7, pc}

080092b6 <u8g_font_GetEncoding97Pos>:

uint16_t u8g_font_GetEncoding97Pos(const void *font) U8G_NOINLINE;
uint16_t u8g_font_GetEncoding97Pos(const void *font)
{
 80092b6:	b580      	push	{r7, lr}
 80092b8:	b082      	sub	sp, #8
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
    return u8g_font_get_word(font, 8);
 80092be:	2108      	movs	r1, #8
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f7ff ff95 	bl	80091f0 <u8g_font_get_word>
 80092c6:	4603      	mov	r3, r0
}
 80092c8:	4618      	mov	r0, r3
 80092ca:	3708      	adds	r7, #8
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}

080092d0 <u8g_font_GetFontStartEncoding>:

uint8_t u8g_font_GetFontStartEncoding(const void *font)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	b082      	sub	sp, #8
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 10);
 80092d8:	210a      	movs	r1, #10
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f7ff ff76 	bl	80091cc <u8g_font_get_byte>
 80092e0:	4603      	mov	r3, r0
}
 80092e2:	4618      	mov	r0, r3
 80092e4:	3708      	adds	r7, #8
 80092e6:	46bd      	mov	sp, r7
 80092e8:	bd80      	pop	{r7, pc}

080092ea <u8g_font_GetFontEndEncoding>:

uint8_t u8g_font_GetFontEndEncoding(const void *font)
{
 80092ea:	b580      	push	{r7, lr}
 80092ec:	b082      	sub	sp, #8
 80092ee:	af00      	add	r7, sp, #0
 80092f0:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 11);
 80092f2:	210b      	movs	r1, #11
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f7ff ff69 	bl	80091cc <u8g_font_get_byte>
 80092fa:	4603      	mov	r3, r0
}
 80092fc:	4618      	mov	r0, r3
 80092fe:	3708      	adds	r7, #8
 8009300:	46bd      	mov	sp, r7
 8009302:	bd80      	pop	{r7, pc}

08009304 <u8g_font_GetLowerGDescent>:

int8_t u8g_font_GetLowerGDescent(const void *font)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 12);
 800930c:	210c      	movs	r1, #12
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f7ff ff5c 	bl	80091cc <u8g_font_get_byte>
 8009314:	4603      	mov	r3, r0
 8009316:	b25b      	sxtb	r3, r3
}
 8009318:	4618      	mov	r0, r3
 800931a:	3708      	adds	r7, #8
 800931c:	46bd      	mov	sp, r7
 800931e:	bd80      	pop	{r7, pc}

08009320 <u8g_font_GetFontAscent>:

int8_t u8g_font_GetFontAscent(const void *font)
{
 8009320:	b580      	push	{r7, lr}
 8009322:	b082      	sub	sp, #8
 8009324:	af00      	add	r7, sp, #0
 8009326:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 13);
 8009328:	210d      	movs	r1, #13
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f7ff ff4e 	bl	80091cc <u8g_font_get_byte>
 8009330:	4603      	mov	r3, r0
 8009332:	b25b      	sxtb	r3, r3
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}

0800933c <u8g_font_GetFontDescent>:

int8_t u8g_font_GetFontDescent(const void *font)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 14);
 8009344:	210e      	movs	r1, #14
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f7ff ff40 	bl	80091cc <u8g_font_get_byte>
 800934c:	4603      	mov	r3, r0
 800934e:	b25b      	sxtb	r3, r3
}
 8009350:	4618      	mov	r0, r3
 8009352:	3708      	adds	r7, #8
 8009354:	46bd      	mov	sp, r7
 8009356:	bd80      	pop	{r7, pc}

08009358 <u8g_font_GetFontXAscent>:

int8_t u8g_font_GetFontXAscent(const void *font)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b082      	sub	sp, #8
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 15);
 8009360:	210f      	movs	r1, #15
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f7ff ff32 	bl	80091cc <u8g_font_get_byte>
 8009368:	4603      	mov	r3, r0
 800936a:	b25b      	sxtb	r3, r3
}
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <u8g_font_GetFontXDescent>:

int8_t u8g_font_GetFontXDescent(const void *font)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b082      	sub	sp, #8
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  return u8g_font_get_byte(font, 16);
 800937c:	2110      	movs	r1, #16
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f7ff ff24 	bl	80091cc <u8g_font_get_byte>
 8009384:	4603      	mov	r3, r0
 8009386:	b25b      	sxtb	r3, r3
}
 8009388:	4618      	mov	r0, r3
 800938a:	3708      	adds	r7, #8
 800938c:	46bd      	mov	sp, r7
 800938e:	bd80      	pop	{r7, pc}

08009390 <u8g_font_GetGlyphDataStart>:


/* return the data start for a font and the glyph pointer */
static uint8_t *u8g_font_GetGlyphDataStart(const void *font, u8g_glyph_t g)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b082      	sub	sp, #8
 8009394:	af00      	add	r7, sp, #0
 8009396:	6078      	str	r0, [r7, #4]
 8009398:	6039      	str	r1, [r7, #0]
  return ((u8g_fntpgm_uint8_t *)g) + u8g_font_GetFontGlyphStructureSize(font);
 800939a:	6878      	ldr	r0, [r7, #4]
 800939c:	f7ff ff55 	bl	800924a <u8g_font_GetFontGlyphStructureSize>
 80093a0:	4603      	mov	r3, r0
 80093a2:	461a      	mov	r2, r3
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	4413      	add	r3, r2
}
 80093a8:	4618      	mov	r0, r3
 80093aa:	3708      	adds	r7, #8
 80093ac:	46bd      	mov	sp, r7
 80093ae:	bd80      	pop	{r7, pc}

080093b0 <u8g_CopyGlyphDataToCache>:

/*========================================================================*/
/* glyph handling */

static void u8g_CopyGlyphDataToCache(u8g_t *u8g, u8g_glyph_t g)
{
 80093b0:	b580      	push	{r7, lr}
 80093b2:	b084      	sub	sp, #16
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
 80093b8:	6039      	str	r1, [r7, #0]
  uint8_t tmp;
  switch( u8g_font_GetFormat(u8g->font) )
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	689b      	ldr	r3, [r3, #8]
 80093be:	4618      	mov	r0, r3
 80093c0:	f7ff ff36 	bl	8009230 <u8g_font_GetFormat>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d001      	beq.n	80093ce <u8g_CopyGlyphDataToCache+0x1e>
 80093ca:	2b02      	cmp	r3, #2
 80093cc:	d11c      	bne.n	8009408 <u8g_CopyGlyphDataToCache+0x58>
    3             DWIDTH                                          signed
    4             BBX xoffset                                    signed
    5             BBX yoffset                                    signed
  byte 0 == 255 indicates empty glyph
  */
      u8g->glyph_width =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	781a      	ldrb	r2, [r3, #0]
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	77da      	strb	r2, [r3, #31]
      u8g->glyph_height =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	3301      	adds	r3, #1
 80093da:	781a      	ldrb	r2, [r3, #0]
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f883 2020 	strb.w	r2, [r3, #32]
      u8g->glyph_dx =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 3 );
 80093e2:	683b      	ldr	r3, [r7, #0]
 80093e4:	3303      	adds	r3, #3
 80093e6:	781b      	ldrb	r3, [r3, #0]
 80093e8:	b25a      	sxtb	r2, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	771a      	strb	r2, [r3, #28]
      u8g->glyph_x =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 4 );
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	3304      	adds	r3, #4
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	b25a      	sxtb	r2, r3
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	775a      	strb	r2, [r3, #29]
      u8g->glyph_y =  u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 5 );
 80093fa:	683b      	ldr	r3, [r7, #0]
 80093fc:	3305      	adds	r3, #5
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	b25a      	sxtb	r2, r3
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	779a      	strb	r2, [r3, #30]
      break;
 8009406:	e036      	b.n	8009476 <u8g_CopyGlyphDataToCache+0xc6>
  2             data size                                           unsigned -(BBX width + 7)/8 * BBX height  --> lower 4 Bit
  2             DWIDTH                                          signed --> upper  4 Bit
  byte 0 == 255 indicates empty glyph
      */
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 0 );
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	781b      	ldrb	r3, [r3, #0]
 800940c:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_y =  tmp & 15;
 800940e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009412:	f003 030f 	and.w	r3, r3, #15
 8009416:	b25a      	sxtb	r2, r3
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	779a      	strb	r2, [r3, #30]
      u8g->glyph_y-=2;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8009422:	b2db      	uxtb	r3, r3
 8009424:	3b02      	subs	r3, #2
 8009426:	b2db      	uxtb	r3, r3
 8009428:	b25a      	sxtb	r2, r3
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	779a      	strb	r2, [r3, #30]
      tmp >>= 4;
 800942e:	7bfb      	ldrb	r3, [r7, #15]
 8009430:	091b      	lsrs	r3, r3, #4
 8009432:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_x =  tmp;
 8009434:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	775a      	strb	r2, [r3, #29]
    
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 1 );
 800943c:	683b      	ldr	r3, [r7, #0]
 800943e:	3301      	adds	r3, #1
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_height =  tmp & 15;
 8009444:	7bfb      	ldrb	r3, [r7, #15]
 8009446:	f003 030f 	and.w	r3, r3, #15
 800944a:	b2da      	uxtb	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	f883 2020 	strb.w	r2, [r3, #32]
      tmp >>= 4;
 8009452:	7bfb      	ldrb	r3, [r7, #15]
 8009454:	091b      	lsrs	r3, r3, #4
 8009456:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_width =  tmp;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	7bfa      	ldrb	r2, [r7, #15]
 800945c:	77da      	strb	r2, [r3, #31]
      
      tmp = u8g_pgm_read( ((u8g_pgm_uint8_t *)g) + 2 );
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	3302      	adds	r3, #2
 8009462:	781b      	ldrb	r3, [r3, #0]
 8009464:	73fb      	strb	r3, [r7, #15]
      tmp >>= 4;
 8009466:	7bfb      	ldrb	r3, [r7, #15]
 8009468:	091b      	lsrs	r3, r3, #4
 800946a:	73fb      	strb	r3, [r7, #15]
      u8g->glyph_dx = tmp;
 800946c:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	771a      	strb	r2, [r3, #28]
    
      
      break;
 8009474:	bf00      	nop
  }
}
 8009476:	bf00      	nop
 8009478:	3710      	adds	r7, #16
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <u8g_FillEmptyGlyphCache>:

//void u8g_FillEmptyGlyphCache(u8g_t *u8g) U8G_NOINLINE;
static void u8g_FillEmptyGlyphCache(u8g_t *u8g)
{
 800947e:	b480      	push	{r7}
 8009480:	b083      	sub	sp, #12
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  u8g->glyph_dx = 0;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2200      	movs	r2, #0
 800948a:	771a      	strb	r2, [r3, #28]
  u8g->glyph_width = 0;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2200      	movs	r2, #0
 8009490:	77da      	strb	r2, [r3, #31]
  u8g->glyph_height = 0;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	2200      	movs	r2, #0
 8009496:	f883 2020 	strb.w	r2, [r3, #32]
  u8g->glyph_x = 0;
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2200      	movs	r2, #0
 800949e:	775a      	strb	r2, [r3, #29]
  u8g->glyph_y = 0;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2200      	movs	r2, #0
 80094a4:	779a      	strb	r2, [r3, #30]
}
 80094a6:	bf00      	nop
 80094a8:	370c      	adds	r7, #12
 80094aa:	46bd      	mov	sp, r7
 80094ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b0:	4770      	bx	lr

080094b2 <u8g_GetGlyph>:
/*
  Find (with some speed optimization) and return a pointer to the glyph data structure
  Also uncompress (format 1) and copy the content of the data structure to the u8g structure
*/
u8g_glyph_t u8g_GetGlyph(u8g_t *u8g, uint8_t requested_encoding)
{
 80094b2:	b580      	push	{r7, lr}
 80094b4:	b086      	sub	sp, #24
 80094b6:	af00      	add	r7, sp, #0
 80094b8:	6078      	str	r0, [r7, #4]
 80094ba:	460b      	mov	r3, r1
 80094bc:	70fb      	strb	r3, [r7, #3]
  uint8_t *p = (uint8_t *)(u8g->font);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	689b      	ldr	r3, [r3, #8]
 80094c2:	617b      	str	r3, [r7, #20]
  uint8_t font_format = u8g_font_GetFormat(u8g->font);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	689b      	ldr	r3, [r3, #8]
 80094c8:	4618      	mov	r0, r3
 80094ca:	f7ff feb1 	bl	8009230 <u8g_font_GetFormat>
 80094ce:	4603      	mov	r3, r0
 80094d0:	743b      	strb	r3, [r7, #16]
  uint8_t data_structure_size = u8g_font_GetFontGlyphStructureSize(u8g->font);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7ff feb7 	bl	800924a <u8g_font_GetFontGlyphStructureSize>
 80094dc:	4603      	mov	r3, r0
 80094de:	73fb      	strb	r3, [r7, #15]
  uint8_t start, end;
  uint16_t pos;
  uint8_t i;
  uint8_t mask = 255;
 80094e0:	23ff      	movs	r3, #255	; 0xff
 80094e2:	747b      	strb	r3, [r7, #17]

  if ( font_format == 1 )
 80094e4:	7c3b      	ldrb	r3, [r7, #16]
 80094e6:	2b01      	cmp	r3, #1
 80094e8:	d101      	bne.n	80094ee <u8g_GetGlyph+0x3c>
    mask = 15;
 80094ea:	230f      	movs	r3, #15
 80094ec:	747b      	strb	r3, [r7, #17]
  
  start = u8g_font_GetFontStartEncoding(u8g->font);
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	4618      	mov	r0, r3
 80094f4:	f7ff feec 	bl	80092d0 <u8g_font_GetFontStartEncoding>
 80094f8:	4603      	mov	r3, r0
 80094fa:	74fb      	strb	r3, [r7, #19]
  end = u8g_font_GetFontEndEncoding(u8g->font);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff fef2 	bl	80092ea <u8g_font_GetFontEndEncoding>
 8009506:	4603      	mov	r3, r0
 8009508:	73bb      	strb	r3, [r7, #14]

  pos = u8g_font_GetEncoding97Pos(u8g->font);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	689b      	ldr	r3, [r3, #8]
 800950e:	4618      	mov	r0, r3
 8009510:	f7ff fed1 	bl	80092b6 <u8g_font_GetEncoding97Pos>
 8009514:	4603      	mov	r3, r0
 8009516:	81bb      	strh	r3, [r7, #12]
  if ( requested_encoding >= 97 && pos > 0 )
 8009518:	78fb      	ldrb	r3, [r7, #3]
 800951a:	2b60      	cmp	r3, #96	; 0x60
 800951c:	d909      	bls.n	8009532 <u8g_GetGlyph+0x80>
 800951e:	89bb      	ldrh	r3, [r7, #12]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d006      	beq.n	8009532 <u8g_GetGlyph+0x80>
  {
    p+= pos;
 8009524:	89bb      	ldrh	r3, [r7, #12]
 8009526:	697a      	ldr	r2, [r7, #20]
 8009528:	4413      	add	r3, r2
 800952a:	617b      	str	r3, [r7, #20]
    start = 97;
 800952c:	2361      	movs	r3, #97	; 0x61
 800952e:	74fb      	strb	r3, [r7, #19]
 8009530:	e016      	b.n	8009560 <u8g_GetGlyph+0xae>
  }
  else 
  {
    pos = u8g_font_GetEncoding65Pos(u8g->font);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	4618      	mov	r0, r3
 8009538:	f7ff feb0 	bl	800929c <u8g_font_GetEncoding65Pos>
 800953c:	4603      	mov	r3, r0
 800953e:	81bb      	strh	r3, [r7, #12]
    if ( requested_encoding >= 65 && pos > 0 )
 8009540:	78fb      	ldrb	r3, [r7, #3]
 8009542:	2b40      	cmp	r3, #64	; 0x40
 8009544:	d909      	bls.n	800955a <u8g_GetGlyph+0xa8>
 8009546:	89bb      	ldrh	r3, [r7, #12]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d006      	beq.n	800955a <u8g_GetGlyph+0xa8>
    {
      p+= pos;
 800954c:	89bb      	ldrh	r3, [r7, #12]
 800954e:	697a      	ldr	r2, [r7, #20]
 8009550:	4413      	add	r3, r2
 8009552:	617b      	str	r3, [r7, #20]
      start = 65;
 8009554:	2341      	movs	r3, #65	; 0x41
 8009556:	74fb      	strb	r3, [r7, #19]
 8009558:	e002      	b.n	8009560 <u8g_GetGlyph+0xae>
    }
    else
      p += U8G_FONT_DATA_STRUCT_SIZE;       /* skip font general information */  
 800955a:	697b      	ldr	r3, [r7, #20]
 800955c:	3311      	adds	r3, #17
 800955e:	617b      	str	r3, [r7, #20]
  }
  
  if ( requested_encoding > end )
 8009560:	78fa      	ldrb	r2, [r7, #3]
 8009562:	7bbb      	ldrb	r3, [r7, #14]
 8009564:	429a      	cmp	r2, r3
 8009566:	d904      	bls.n	8009572 <u8g_GetGlyph+0xc0>
  {
    u8g_FillEmptyGlyphCache(u8g);
 8009568:	6878      	ldr	r0, [r7, #4]
 800956a:	f7ff ff88 	bl	800947e <u8g_FillEmptyGlyphCache>
    return NULL;                      /* not found */
 800956e:	2300      	movs	r3, #0
 8009570:	e032      	b.n	80095d8 <u8g_GetGlyph+0x126>
  }
  
  i = start;
 8009572:	7cfb      	ldrb	r3, [r7, #19]
 8009574:	74bb      	strb	r3, [r7, #18]
  if ( i <= end )
 8009576:	7cba      	ldrb	r2, [r7, #18]
 8009578:	7bbb      	ldrb	r3, [r7, #14]
 800957a:	429a      	cmp	r2, r3
 800957c:	d828      	bhi.n	80095d0 <u8g_GetGlyph+0x11e>
  {
    for(;;)
    {
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	781b      	ldrb	r3, [r3, #0]
 8009582:	2bff      	cmp	r3, #255	; 0xff
 8009584:	d103      	bne.n	800958e <u8g_GetGlyph+0xdc>
      {
        p += 1;
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	3301      	adds	r3, #1
 800958a:	617b      	str	r3, [r7, #20]
 800958c:	e017      	b.n	80095be <u8g_GetGlyph+0x10c>
      }
      else
      {
        if ( i == requested_encoding )
 800958e:	7cba      	ldrb	r2, [r7, #18]
 8009590:	78fb      	ldrb	r3, [r7, #3]
 8009592:	429a      	cmp	r2, r3
 8009594:	d105      	bne.n	80095a2 <u8g_GetGlyph+0xf0>
        {
          u8g_CopyGlyphDataToCache(u8g, p);
 8009596:	6979      	ldr	r1, [r7, #20]
 8009598:	6878      	ldr	r0, [r7, #4]
 800959a:	f7ff ff09 	bl	80093b0 <u8g_CopyGlyphDataToCache>
          return p;
 800959e:	697b      	ldr	r3, [r7, #20]
 80095a0:	e01a      	b.n	80095d8 <u8g_GetGlyph+0x126>
        }
        p += u8g_pgm_read( ((u8g_pgm_uint8_t *)(p)) + 2 ) & mask;
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	3302      	adds	r3, #2
 80095a6:	781a      	ldrb	r2, [r3, #0]
 80095a8:	7c7b      	ldrb	r3, [r7, #17]
 80095aa:	4013      	ands	r3, r2
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	461a      	mov	r2, r3
 80095b0:	697b      	ldr	r3, [r7, #20]
 80095b2:	4413      	add	r3, r2
 80095b4:	617b      	str	r3, [r7, #20]
        p += data_structure_size;
 80095b6:	7bfb      	ldrb	r3, [r7, #15]
 80095b8:	697a      	ldr	r2, [r7, #20]
 80095ba:	4413      	add	r3, r2
 80095bc:	617b      	str	r3, [r7, #20]
      }
      if ( i == end )
 80095be:	7cba      	ldrb	r2, [r7, #18]
 80095c0:	7bbb      	ldrb	r3, [r7, #14]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d003      	beq.n	80095ce <u8g_GetGlyph+0x11c>
        break;
      i++;
 80095c6:	7cbb      	ldrb	r3, [r7, #18]
 80095c8:	3301      	adds	r3, #1
 80095ca:	74bb      	strb	r3, [r7, #18]
      if ( u8g_pgm_read((u8g_pgm_uint8_t *)(p)) == 255 )
 80095cc:	e7d7      	b.n	800957e <u8g_GetGlyph+0xcc>
        break;
 80095ce:	bf00      	nop
    }
  }
  
  u8g_FillEmptyGlyphCache(u8g);
 80095d0:	6878      	ldr	r0, [r7, #4]
 80095d2:	f7ff ff54 	bl	800947e <u8g_FillEmptyGlyphCache>
    
  return NULL;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3718      	adds	r7, #24
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <u8g_draw_glyph>:
  return u8g->glyph_dx;
}
#endif

int8_t u8g_draw_glyph(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t encoding)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b088      	sub	sp, #32
 80095e4:	af02      	add	r7, sp, #8
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	4608      	mov	r0, r1
 80095ea:	4611      	mov	r1, r2
 80095ec:	461a      	mov	r2, r3
 80095ee:	4603      	mov	r3, r0
 80095f0:	70fb      	strb	r3, [r7, #3]
 80095f2:	460b      	mov	r3, r1
 80095f4:	70bb      	strb	r3, [r7, #2]
 80095f6:	4613      	mov	r3, r2
 80095f8:	707b      	strb	r3, [r7, #1]
  uint8_t w, h;
  uint8_t i, j;
  u8g_uint_t ix, iy;

  {
    u8g_glyph_t g = u8g_GetGlyph(u8g, encoding);
 80095fa:	787b      	ldrb	r3, [r7, #1]
 80095fc:	4619      	mov	r1, r3
 80095fe:	6878      	ldr	r0, [r7, #4]
 8009600:	f7ff ff57 	bl	80094b2 <u8g_GetGlyph>
 8009604:	60f8      	str	r0, [r7, #12]
    if ( g == NULL  )
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d101      	bne.n	8009610 <u8g_draw_glyph+0x30>
      return 0;
 800960c:	2300      	movs	r3, #0
 800960e:	e06d      	b.n	80096ec <u8g_draw_glyph+0x10c>
    data = u8g_font_GetGlyphDataStart(u8g->font, g);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	68f9      	ldr	r1, [r7, #12]
 8009616:	4618      	mov	r0, r3
 8009618:	f7ff feba 	bl	8009390 <u8g_font_GetGlyphDataStart>
 800961c:	6178      	str	r0, [r7, #20]
  }
  
  w = u8g->glyph_width;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	7fdb      	ldrb	r3, [r3, #31]
 8009622:	72fb      	strb	r3, [r7, #11]
  h = u8g->glyph_height;
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	f893 3020 	ldrb.w	r3, [r3, #32]
 800962a:	72bb      	strb	r3, [r7, #10]
  
  x += u8g->glyph_x;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f993 301d 	ldrsb.w	r3, [r3, #29]
 8009632:	b2da      	uxtb	r2, r3
 8009634:	78fb      	ldrb	r3, [r7, #3]
 8009636:	4413      	add	r3, r2
 8009638:	70fb      	strb	r3, [r7, #3]
  y -= u8g->glyph_y;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	f993 301e 	ldrsb.w	r3, [r3, #30]
 8009640:	b2db      	uxtb	r3, r3
 8009642:	78ba      	ldrb	r2, [r7, #2]
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	70bb      	strb	r3, [r7, #2]
  y--;
 8009648:	78bb      	ldrb	r3, [r7, #2]
 800964a:	3b01      	subs	r3, #1
 800964c:	70bb      	strb	r3, [r7, #2]
  
  if ( u8g_IsBBXIntersection(u8g, x, y-h+1, w, h) == 0 )
 800964e:	78ba      	ldrb	r2, [r7, #2]
 8009650:	7abb      	ldrb	r3, [r7, #10]
 8009652:	1ad3      	subs	r3, r2, r3
 8009654:	b2db      	uxtb	r3, r3
 8009656:	3301      	adds	r3, #1
 8009658:	b2da      	uxtb	r2, r3
 800965a:	7af8      	ldrb	r0, [r7, #11]
 800965c:	78f9      	ldrb	r1, [r7, #3]
 800965e:	7abb      	ldrb	r3, [r7, #10]
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	4603      	mov	r3, r0
 8009664:	6878      	ldr	r0, [r7, #4]
 8009666:	f7ff fb74 	bl	8008d52 <u8g_IsBBXIntersection>
 800966a:	4603      	mov	r3, r0
 800966c:	2b00      	cmp	r3, #0
 800966e:	d103      	bne.n	8009678 <u8g_draw_glyph+0x98>
    return u8g->glyph_dx;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f993 301c 	ldrsb.w	r3, [r3, #28]
 8009676:	e039      	b.n	80096ec <u8g_draw_glyph+0x10c>

  /* now, w is reused as bytes per line */
  w += 7;
 8009678:	7afb      	ldrb	r3, [r7, #11]
 800967a:	3307      	adds	r3, #7
 800967c:	72fb      	strb	r3, [r7, #11]
  w /= 8;
 800967e:	7afb      	ldrb	r3, [r7, #11]
 8009680:	08db      	lsrs	r3, r3, #3
 8009682:	72fb      	strb	r3, [r7, #11]
  
  iy = y;
 8009684:	78bb      	ldrb	r3, [r7, #2]
 8009686:	743b      	strb	r3, [r7, #16]
  iy -= h;
 8009688:	7c3a      	ldrb	r2, [r7, #16]
 800968a:	7abb      	ldrb	r3, [r7, #10]
 800968c:	1ad3      	subs	r3, r2, r3
 800968e:	743b      	strb	r3, [r7, #16]
  iy++;
 8009690:	7c3b      	ldrb	r3, [r7, #16]
 8009692:	3301      	adds	r3, #1
 8009694:	743b      	strb	r3, [r7, #16]

  for( j = 0; j < h; j++ )
 8009696:	2300      	movs	r3, #0
 8009698:	74bb      	strb	r3, [r7, #18]
 800969a:	e020      	b.n	80096de <u8g_draw_glyph+0xfe>
  {
    ix = x;
 800969c:	78fb      	ldrb	r3, [r7, #3]
 800969e:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 80096a0:	2300      	movs	r3, #0
 80096a2:	74fb      	strb	r3, [r7, #19]
 80096a4:	e011      	b.n	80096ca <u8g_draw_glyph+0xea>
    {
      u8g_Draw8Pixel(u8g, ix, iy, 0, u8g_pgm_read(data));
 80096a6:	697b      	ldr	r3, [r7, #20]
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	7c3a      	ldrb	r2, [r7, #16]
 80096ac:	7c79      	ldrb	r1, [r7, #17]
 80096ae:	9300      	str	r3, [sp, #0]
 80096b0:	2300      	movs	r3, #0
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 fa8c 	bl	8009bd0 <u8g_Draw8Pixel>
      data++;
 80096b8:	697b      	ldr	r3, [r7, #20]
 80096ba:	3301      	adds	r3, #1
 80096bc:	617b      	str	r3, [r7, #20]
      ix+=8;
 80096be:	7c7b      	ldrb	r3, [r7, #17]
 80096c0:	3308      	adds	r3, #8
 80096c2:	747b      	strb	r3, [r7, #17]
    for( i = 0; i < w; i++ )
 80096c4:	7cfb      	ldrb	r3, [r7, #19]
 80096c6:	3301      	adds	r3, #1
 80096c8:	74fb      	strb	r3, [r7, #19]
 80096ca:	7cfa      	ldrb	r2, [r7, #19]
 80096cc:	7afb      	ldrb	r3, [r7, #11]
 80096ce:	429a      	cmp	r2, r3
 80096d0:	d3e9      	bcc.n	80096a6 <u8g_draw_glyph+0xc6>
    }
    iy++;
 80096d2:	7c3b      	ldrb	r3, [r7, #16]
 80096d4:	3301      	adds	r3, #1
 80096d6:	743b      	strb	r3, [r7, #16]
  for( j = 0; j < h; j++ )
 80096d8:	7cbb      	ldrb	r3, [r7, #18]
 80096da:	3301      	adds	r3, #1
 80096dc:	74bb      	strb	r3, [r7, #18]
 80096de:	7cba      	ldrb	r2, [r7, #18]
 80096e0:	7abb      	ldrb	r3, [r7, #10]
 80096e2:	429a      	cmp	r2, r3
 80096e4:	d3da      	bcc.n	800969c <u8g_draw_glyph+0xbc>
  }
  return u8g->glyph_dx;
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	f993 301c 	ldrsb.w	r3, [r3, #28]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3718      	adds	r7, #24
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <u8g_DrawStr>:
/*========================================================================*/
/* string drawing procedures */


u8g_uint_t u8g_DrawStr(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, const char *s)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b086      	sub	sp, #24
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	60f8      	str	r0, [r7, #12]
 80096fc:	607b      	str	r3, [r7, #4]
 80096fe:	460b      	mov	r3, r1
 8009700:	72fb      	strb	r3, [r7, #11]
 8009702:	4613      	mov	r3, r2
 8009704:	72bb      	strb	r3, [r7, #10]
  u8g_uint_t t = 0;
 8009706:	2300      	movs	r3, #0
 8009708:	75fb      	strb	r3, [r7, #23]
  int8_t d;
  
  //u8g_uint_t u8g_GetStrWidth(u8g, s);
  //u8g_font_GetFontAscent(u8g->font)-u8g_font_GetFontDescent(u8g->font);
  
  y += u8g->font_calc_vref(u8g);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800970e:	68f8      	ldr	r0, [r7, #12]
 8009710:	4798      	blx	r3
 8009712:	4603      	mov	r3, r0
 8009714:	461a      	mov	r2, r3
 8009716:	7abb      	ldrb	r3, [r7, #10]
 8009718:	4413      	add	r3, r2
 800971a:	72bb      	strb	r3, [r7, #10]
  
  while( *s != '\0' )
 800971c:	e013      	b.n	8009746 <u8g_DrawStr+0x52>
  {
    d = u8g_draw_glyph(u8g, x, y, *s);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	7aba      	ldrb	r2, [r7, #10]
 8009724:	7af9      	ldrb	r1, [r7, #11]
 8009726:	68f8      	ldr	r0, [r7, #12]
 8009728:	f7ff ff5a 	bl	80095e0 <u8g_draw_glyph>
 800972c:	4603      	mov	r3, r0
 800972e:	75bb      	strb	r3, [r7, #22]
    x += d;
 8009730:	7dba      	ldrb	r2, [r7, #22]
 8009732:	7afb      	ldrb	r3, [r7, #11]
 8009734:	4413      	add	r3, r2
 8009736:	72fb      	strb	r3, [r7, #11]
    t += d;
 8009738:	7dba      	ldrb	r2, [r7, #22]
 800973a:	7dfb      	ldrb	r3, [r7, #23]
 800973c:	4413      	add	r3, r2
 800973e:	75fb      	strb	r3, [r7, #23]
    s++;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	3301      	adds	r3, #1
 8009744:	607b      	str	r3, [r7, #4]
  while( *s != '\0' )
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	781b      	ldrb	r3, [r3, #0]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1e7      	bne.n	800971e <u8g_DrawStr+0x2a>
  }
  return t;
 800974e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009750:	4618      	mov	r0, r3
 8009752:	3718      	adds	r7, #24
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}

08009758 <u8g_UpdateRefHeight>:

/*========================================================================*/
/* set ascent/descent for reference point calculation */

void u8g_UpdateRefHeight(u8g_t *u8g)
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  uint16_t ls;
  if ( u8g->font == NULL )
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	689b      	ldr	r3, [r3, #8]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d06b      	beq.n	8009840 <u8g_UpdateRefHeight+0xe8>
    return;
  if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_TEXT )
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800976e:	2b00      	cmp	r3, #0
 8009770:	d114      	bne.n	800979c <u8g_UpdateRefHeight+0x44>
  {
    u8g->font_ref_ascent = u8g_font_GetCapitalAHeight(u8g->font);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	689b      	ldr	r3, [r3, #8]
 8009776:	4618      	mov	r0, r3
 8009778:	f7ff fd83 	bl	8009282 <u8g_font_GetCapitalAHeight>
 800977c:	4603      	mov	r3, r0
 800977e:	b25a      	sxtb	r2, r3
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetLowerGDescent(u8g->font);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	689b      	ldr	r3, [r3, #8]
 800978a:	4618      	mov	r0, r3
 800978c:	f7ff fdba 	bl	8009304 <u8g_font_GetLowerGDescent>
 8009790:	4603      	mov	r3, r0
 8009792:	461a      	mov	r2, r3
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 800979a:	e02d      	b.n	80097f8 <u8g_UpdateRefHeight+0xa0>
  }
  else if ( u8g->font_height_mode == U8G_FONT_HEIGHT_MODE_XTEXT )
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097a2:	2b01      	cmp	r3, #1
 80097a4:	d114      	bne.n	80097d0 <u8g_UpdateRefHeight+0x78>
  {
    u8g->font_ref_ascent = u8g_font_GetFontXAscent(u8g->font);
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	689b      	ldr	r3, [r3, #8]
 80097aa:	4618      	mov	r0, r3
 80097ac:	f7ff fdd4 	bl	8009358 <u8g_font_GetFontXAscent>
 80097b0:	4603      	mov	r3, r0
 80097b2:	461a      	mov	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontXDescent(u8g->font);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	4618      	mov	r0, r3
 80097c0:	f7ff fdd8 	bl	8009374 <u8g_font_GetFontXDescent>
 80097c4:	4603      	mov	r3, r0
 80097c6:	461a      	mov	r2, r3
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
 80097ce:	e013      	b.n	80097f8 <u8g_UpdateRefHeight+0xa0>
  }
  else
  {
    u8g->font_ref_ascent = u8g_font_GetFontAscent(u8g->font);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	4618      	mov	r0, r3
 80097d6:	f7ff fda3 	bl	8009320 <u8g_font_GetFontAscent>
 80097da:	4603      	mov	r3, r0
 80097dc:	461a      	mov	r2, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    u8g->font_ref_descent = u8g_font_GetFontDescent(u8g->font);
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	689b      	ldr	r3, [r3, #8]
 80097e8:	4618      	mov	r0, r3
 80097ea:	f7ff fda7 	bl	800933c <u8g_font_GetFontDescent>
 80097ee:	4603      	mov	r3, r0
 80097f0:	461a      	mov	r2, r3
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  }
  
  ls = u8g->font_ref_ascent - u8g->font_ref_descent;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	f993 3029 	ldrsb.w	r3, [r3, #41]	; 0x29
 80097fe:	b21a      	sxth	r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f993 302a 	ldrsb.w	r3, [r3, #42]	; 0x2a
 8009806:	b21b      	sxth	r3, r3
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	b21b      	sxth	r3, r3
 800980c:	81fb      	strh	r3, [r7, #14]
  if ( u8g->font_line_spacing_factor != 64 )
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009814:	2b40      	cmp	r3, #64	; 0x40
 8009816:	d00d      	beq.n	8009834 <u8g_UpdateRefHeight+0xdc>
  {
    ls &= 255;
 8009818:	89fb      	ldrh	r3, [r7, #14]
 800981a:	b2db      	uxtb	r3, r3
 800981c:	81fb      	strh	r3, [r7, #14]
    ls *= u8g->font_line_spacing_factor;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8009824:	b29b      	uxth	r3, r3
 8009826:	89fa      	ldrh	r2, [r7, #14]
 8009828:	fb12 f303 	smulbb	r3, r2, r3
 800982c:	81fb      	strh	r3, [r7, #14]
    ls >>= 6;
 800982e:	89fb      	ldrh	r3, [r7, #14]
 8009830:	099b      	lsrs	r3, r3, #6
 8009832:	81fb      	strh	r3, [r7, #14]
  }
  u8g->line_spacing = ls;
 8009834:	89fb      	ldrh	r3, [r7, #14]
 8009836:	b2da      	uxtb	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800983e:	e000      	b.n	8009842 <u8g_UpdateRefHeight+0xea>
    return;
 8009840:	bf00      	nop
}
 8009842:	3710      	adds	r7, #16
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}

08009848 <u8g_font_calc_vref_font>:

/*========================================================================*/
/* callback procedures to correct the y position */

u8g_uint_t u8g_font_calc_vref_font(u8g_t *u8g)
{
 8009848:	b480      	push	{r7}
 800984a:	b083      	sub	sp, #12
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  return 0;
 8009850:	2300      	movs	r3, #0
}
 8009852:	4618      	mov	r0, r3
 8009854:	370c      	adds	r7, #12
 8009856:	46bd      	mov	sp, r7
 8009858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985c:	4770      	bx	lr
	...

08009860 <u8g_SetFontPosBaseline>:

void u8g_SetFontPosBaseline(u8g_t *u8g)
{
 8009860:	b480      	push	{r7}
 8009862:	b083      	sub	sp, #12
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
  u8g->font_calc_vref = u8g_font_calc_vref_font;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	4a04      	ldr	r2, [pc, #16]	; (800987c <u8g_SetFontPosBaseline+0x1c>)
 800986c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800986e:	bf00      	nop
 8009870:	370c      	adds	r7, #12
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr
 800987a:	bf00      	nop
 800987c:	08009849 	.word	0x08009849

08009880 <u8g_SetFont>:
    buf.y_max = cap_a;
  u8g_font_get_str_box_fill_args(u8g, s, &buf, x, y, width, height);
}

void u8g_SetFont(u8g_t *u8g, const u8g_fntpgm_uint8_t  *font)
{
 8009880:	b580      	push	{r7, lr}
 8009882:	b082      	sub	sp, #8
 8009884:	af00      	add	r7, sp, #0
 8009886:	6078      	str	r0, [r7, #4]
 8009888:	6039      	str	r1, [r7, #0]
  if ( u8g->font != font )
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	689b      	ldr	r3, [r3, #8]
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	429a      	cmp	r2, r3
 8009892:	d008      	beq.n	80098a6 <u8g_SetFont+0x26>
  {
    u8g->font = font;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	683a      	ldr	r2, [r7, #0]
 8009898:	609a      	str	r2, [r3, #8]
    u8g_UpdateRefHeight(u8g);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7ff ff5c 	bl	8009758 <u8g_UpdateRefHeight>
    u8g_SetFontPosBaseline(u8g);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7ff ffdd 	bl	8009860 <u8g_SetFontPosBaseline>
  }
}
 80098a6:	bf00      	nop
 80098a8:	3708      	adds	r7, #8
 80098aa:	46bd      	mov	sp, r7
 80098ac:	bd80      	pop	{r7, pc}

080098ae <u8g_call_dev_fn>:

#include <stddef.h>
#include "u8g.h"

uint8_t u8g_call_dev_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 80098ae:	b590      	push	{r4, r7, lr}
 80098b0:	b085      	sub	sp, #20
 80098b2:	af00      	add	r7, sp, #0
 80098b4:	60f8      	str	r0, [r7, #12]
 80098b6:	60b9      	str	r1, [r7, #8]
 80098b8:	603b      	str	r3, [r7, #0]
 80098ba:	4613      	mov	r3, r2
 80098bc:	71fb      	strb	r3, [r7, #7]
  return dev->dev_fn(u8g, dev, msg, arg); 
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	681c      	ldr	r4, [r3, #0]
 80098c2:	79fa      	ldrb	r2, [r7, #7]
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	68b9      	ldr	r1, [r7, #8]
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	47a0      	blx	r4
 80098cc:	4603      	mov	r3, r0
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3714      	adds	r7, #20
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd90      	pop	{r4, r7, pc}

080098d6 <u8g_InitLL>:

/*====================================================================*/

uint8_t u8g_InitLL(u8g_t *u8g, u8g_dev_t *dev)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b084      	sub	sp, #16
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
 80098de:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098e4:	2002      	movs	r0, #2
 80098e6:	4798      	blx	r3
  r =  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_INIT, NULL);
 80098e8:	2300      	movs	r3, #0
 80098ea:	220a      	movs	r2, #10
 80098ec:	6839      	ldr	r1, [r7, #0]
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f7ff ffdd 	bl	80098ae <u8g_call_dev_fn>
 80098f4:	4603      	mov	r3, r0
 80098f6:	73fb      	strb	r3, [r7, #15]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_U8G);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fc:	2003      	movs	r0, #3
 80098fe:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009904:	2000      	movs	r0, #0
 8009906:	4798      	blx	r3
  return r;
 8009908:	7bfb      	ldrb	r3, [r7, #15]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <u8g_FirstPageLL>:

void u8g_FirstPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8009912:	b580      	push	{r7, lr}
 8009914:	b082      	sub	sp, #8
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	6039      	str	r1, [r7, #0]
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009920:	2002      	movs	r0, #2
 8009922:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009928:	2001      	movs	r0, #1
 800992a:	4798      	blx	r3
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_FIRST, NULL);
 800992c:	2300      	movs	r3, #0
 800992e:	2214      	movs	r2, #20
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f7ff ffbb 	bl	80098ae <u8g_call_dev_fn>
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	3338      	adds	r3, #56	; 0x38
 800993c:	2217      	movs	r2, #23
 800993e:	6839      	ldr	r1, [r7, #0]
 8009940:	6878      	ldr	r0, [r7, #4]
 8009942:	f7ff ffb4 	bl	80098ae <u8g_call_dev_fn>
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800994a:	2000      	movs	r0, #0
 800994c:	4798      	blx	r3
}
 800994e:	bf00      	nop
 8009950:	3708      	adds	r7, #8
 8009952:	46bd      	mov	sp, r7
 8009954:	bd80      	pop	{r7, pc}

08009956 <u8g_NextPageLL>:

uint8_t u8g_NextPageLL(u8g_t *u8g, u8g_dev_t *dev)
{  
 8009956:	b580      	push	{r7, lr}
 8009958:	b084      	sub	sp, #16
 800995a:	af00      	add	r7, sp, #0
 800995c:	6078      	str	r0, [r7, #4]
 800995e:	6039      	str	r1, [r7, #0]
  uint8_t r;
  u8g->state_cb(U8G_STATE_MSG_BACKUP_ENV);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009964:	2002      	movs	r0, #2
 8009966:	4798      	blx	r3
  u8g->state_cb(U8G_STATE_MSG_RESTORE_U8G);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800996c:	2001      	movs	r0, #1
 800996e:	4798      	blx	r3
  r = u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_PAGE_NEXT, NULL);
 8009970:	2300      	movs	r3, #0
 8009972:	2215      	movs	r2, #21
 8009974:	6839      	ldr	r1, [r7, #0]
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7ff ff99 	bl	80098ae <u8g_call_dev_fn>
 800997c:	4603      	mov	r3, r0
 800997e:	73fb      	strb	r3, [r7, #15]
  if ( r != 0 )
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d006      	beq.n	8009994 <u8g_NextPageLL+0x3e>
  {
    u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	3338      	adds	r3, #56	; 0x38
 800998a:	2217      	movs	r2, #23
 800998c:	6839      	ldr	r1, [r7, #0]
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f7ff ff8d 	bl	80098ae <u8g_call_dev_fn>
  }
  u8g->state_cb(U8G_STATE_MSG_RESTORE_ENV);
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009998:	2000      	movs	r0, #0
 800999a:	4798      	blx	r3
  return r;
 800999c:	7bfb      	ldrb	r3, [r7, #15]
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3710      	adds	r7, #16
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}

080099a6 <u8g_Draw8PixelLL>:
  arg->y = y;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_PIXEL, arg);
}

void u8g_Draw8PixelLL(u8g_t *u8g, u8g_dev_t *dev, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 80099a6:	b580      	push	{r7, lr}
 80099a8:	b086      	sub	sp, #24
 80099aa:	af00      	add	r7, sp, #0
 80099ac:	60f8      	str	r0, [r7, #12]
 80099ae:	60b9      	str	r1, [r7, #8]
 80099b0:	4611      	mov	r1, r2
 80099b2:	461a      	mov	r2, r3
 80099b4:	460b      	mov	r3, r1
 80099b6:	71fb      	strb	r3, [r7, #7]
 80099b8:	4613      	mov	r3, r2
 80099ba:	71bb      	strb	r3, [r7, #6]
  u8g_dev_arg_pixel_t *arg = &(u8g->arg_pixel);
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	332d      	adds	r3, #45	; 0x2d
 80099c0:	617b      	str	r3, [r7, #20]
  arg->x = x;
 80099c2:	697b      	ldr	r3, [r7, #20]
 80099c4:	79fa      	ldrb	r2, [r7, #7]
 80099c6:	701a      	strb	r2, [r3, #0]
  arg->y = y;
 80099c8:	697b      	ldr	r3, [r7, #20]
 80099ca:	79ba      	ldrb	r2, [r7, #6]
 80099cc:	705a      	strb	r2, [r3, #1]
  arg->dir = dir;
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80099d4:	70da      	strb	r2, [r3, #3]
  arg->pixel = pixel;
 80099d6:	697b      	ldr	r3, [r7, #20]
 80099d8:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80099dc:	709a      	strb	r2, [r3, #2]
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_SET_8PIXEL, arg);
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	223b      	movs	r2, #59	; 0x3b
 80099e2:	68b9      	ldr	r1, [r7, #8]
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f7ff ff62 	bl	80098ae <u8g_call_dev_fn>
}
 80099ea:	bf00      	nop
 80099ec:	3718      	adds	r7, #24
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <u8g_GetWidthLL>:
#endif



u8g_uint_t u8g_GetWidthLL(u8g_t *u8g, u8g_dev_t *dev)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
 80099fa:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_WIDTH, &r);
 80099fc:	f107 030f 	add.w	r3, r7, #15
 8009a00:	2246      	movs	r2, #70	; 0x46
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f7ff ff52 	bl	80098ae <u8g_call_dev_fn>
  return r;
 8009a0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0c:	4618      	mov	r0, r3
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <u8g_GetHeightLL>:

u8g_uint_t u8g_GetHeightLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
  u8g_uint_t r;
  u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_HEIGHT, &r);
 8009a1e:	f107 030f 	add.w	r3, r7, #15
 8009a22:	2247      	movs	r2, #71	; 0x47
 8009a24:	6839      	ldr	r1, [r7, #0]
 8009a26:	6878      	ldr	r0, [r7, #4]
 8009a28:	f7ff ff41 	bl	80098ae <u8g_call_dev_fn>
  return r;
 8009a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <u8g_GetModeLL>:

u8g_uint_t u8g_GetModeLL(u8g_t *u8g, u8g_dev_t *dev)
{       
 8009a36:	b580      	push	{r7, lr}
 8009a38:	b082      	sub	sp, #8
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
 8009a3e:	6039      	str	r1, [r7, #0]
  return u8g_call_dev_fn(u8g, dev, U8G_DEV_MSG_GET_MODE, NULL);
 8009a40:	2300      	movs	r3, #0
 8009a42:	2248      	movs	r2, #72	; 0x48
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7ff ff31 	bl	80098ae <u8g_call_dev_fn>
 8009a4c:	4603      	mov	r3, r0
}
 8009a4e:	4618      	mov	r0, r3
 8009a50:	3708      	adds	r7, #8
 8009a52:	46bd      	mov	sp, r7
 8009a54:	bd80      	pop	{r7, pc}

08009a56 <u8g_UpdateDimension>:


/*====================================================================*/

void u8g_UpdateDimension(u8g_t *u8g)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  u8g->width = u8g_GetWidthLL(u8g, u8g->dev);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	685b      	ldr	r3, [r3, #4]
 8009a62:	4619      	mov	r1, r3
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f7ff ffc4 	bl	80099f2 <u8g_GetWidthLL>
 8009a6a:	4603      	mov	r3, r0
 8009a6c:	461a      	mov	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	701a      	strb	r2, [r3, #0]
  u8g->height = u8g_GetHeightLL(u8g, u8g->dev);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f7ff ffcb 	bl	8009a14 <u8g_GetHeightLL>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	461a      	mov	r2, r3
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	705a      	strb	r2, [r3, #1]
  u8g->mode = u8g_GetModeLL(u8g, u8g->dev);
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	685b      	ldr	r3, [r3, #4]
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f7ff ffd2 	bl	8009a36 <u8g_GetModeLL>
 8009a92:	4603      	mov	r3, r0
 8009a94:	461a      	mov	r2, r3
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	74da      	strb	r2, [r3, #19]
  /* 9 Dec 2012: u8g_scale.c requires update of current page */
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_GET_PAGE_BOX, &(u8g->current_page));
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6859      	ldr	r1, [r3, #4]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	3338      	adds	r3, #56	; 0x38
 8009aa2:	2217      	movs	r2, #23
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	f7ff ff02 	bl	80098ae <u8g_call_dev_fn>
}
 8009aaa:	bf00      	nop
 8009aac:	3708      	adds	r7, #8
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	bd80      	pop	{r7, pc}
	...

08009ab4 <u8g_init_data>:

static void u8g_init_data(u8g_t *u8g)
{
 8009ab4:	b580      	push	{r7, lr}
 8009ab6:	b082      	sub	sp, #8
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
  u8g->font = NULL;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	609a      	str	r2, [r3, #8]
  u8g->cursor_font = NULL;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	60da      	str	r2, [r3, #12]
  u8g->cursor_bg_color = 0;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	745a      	strb	r2, [r3, #17]
  u8g->cursor_fg_color = 1;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2201      	movs	r2, #1
 8009ad2:	741a      	strb	r2, [r3, #16]
  u8g->cursor_encoding = 34;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2222      	movs	r2, #34	; 0x22
 8009ad8:	749a      	strb	r2, [r3, #18]
  u8g->cursor_fn = (u8g_draw_cursor_fn)0;
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	2200      	movs	r2, #0
 8009ade:	619a      	str	r2, [r3, #24]
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_NONE;
  }
#endif
  
  u8g_SetColorIndex(u8g, 1);
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	f000 f891 	bl	8009c0a <u8g_SetColorIndex>

  u8g_SetFontPosBaseline(u8g);
 8009ae8:	6878      	ldr	r0, [r7, #4]
 8009aea:	f7ff feb9 	bl	8009860 <u8g_SetFontPosBaseline>
  
  u8g->font_height_mode = U8G_FONT_HEIGHT_MODE_XTEXT;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2201      	movs	r2, #1
 8009af2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  u8g->font_ref_ascent = 0;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  u8g->font_ref_descent = 0;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  u8g->font_line_spacing_factor = 64;           /* 64 = 1.0, 77 = 1.2 line spacing factor */
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	2240      	movs	r2, #64	; 0x40
 8009b0a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  u8g->line_spacing = 0;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	2200      	movs	r2, #0
 8009b12:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  u8g->state_cb = u8g_state_dummy_cb;
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	4a02      	ldr	r2, [pc, #8]	; (8009b24 <u8g_init_data+0x70>)
 8009b1a:	635a      	str	r2, [r3, #52]	; 0x34

}
 8009b1c:	bf00      	nop
 8009b1e:	3708      	adds	r7, #8
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	0800a13d 	.word	0x0800a13d

08009b28 <u8g_Begin>:

uint8_t u8g_Begin(u8g_t *u8g)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b082      	sub	sp, #8
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* call and init low level driver and com device */
  if ( u8g_InitLL(u8g, u8g->dev) == 0 )
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	685b      	ldr	r3, [r3, #4]
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f7ff fecd 	bl	80098d6 <u8g_InitLL>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d101      	bne.n	8009b46 <u8g_Begin+0x1e>
    return 0;
 8009b42:	2300      	movs	r3, #0
 8009b44:	e003      	b.n	8009b4e <u8g_Begin+0x26>
  /* fetch width and height from the low level */
  u8g_UpdateDimension(u8g);
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f7ff ff85 	bl	8009a56 <u8g_UpdateDimension>
  return 1;
 8009b4c:	2301      	movs	r3, #1
}
 8009b4e:	4618      	mov	r0, r3
 8009b50:	3708      	adds	r7, #8
 8009b52:	46bd      	mov	sp, r7
 8009b54:	bd80      	pop	{r7, pc}

08009b56 <u8g_InitComFn>:
  return u8g_Begin(u8g);
}

/* special init for pure ARM systems */
uint8_t u8g_InitComFn(u8g_t *u8g, u8g_dev_t *dev, u8g_com_fnptr com_fn)
{
 8009b56:	b580      	push	{r7, lr}
 8009b58:	b084      	sub	sp, #16
 8009b5a:	af00      	add	r7, sp, #0
 8009b5c:	60f8      	str	r0, [r7, #12]
 8009b5e:	60b9      	str	r1, [r7, #8]
 8009b60:	607a      	str	r2, [r7, #4]
  u8g_init_data(u8g);
 8009b62:	68f8      	ldr	r0, [r7, #12]
 8009b64:	f7ff ffa6 	bl	8009ab4 <u8g_init_data>
    for( i = 0; i < U8G_PIN_LIST_LEN; i++ )
      u8g->pin_list[i] = U8G_PIN_DUMMY;
  }
#endif
  
  u8g->dev = dev;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	605a      	str	r2, [r3, #4]
  
  /* replace the device procedure with a custom communication procedure */
  u8g->dev->com_fn = com_fn;
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	685b      	ldr	r3, [r3, #4]
 8009b72:	687a      	ldr	r2, [r7, #4]
 8009b74:	609a      	str	r2, [r3, #8]
  
  /* On the Arduino Environment this will lead to two calls to u8g_Begin(), the following line will be called first (by U8glib constructors) */
  /* if - in future releases - this is removed, then still call u8g_UpdateDimension() */
  /* if Arduino call u8g_UpdateDimension else u8g_Begin */
  /* issue 146 */
  return u8g_Begin(u8g);
 8009b76:	68f8      	ldr	r0, [r7, #12]
 8009b78:	f7ff ffd6 	bl	8009b28 <u8g_Begin>
 8009b7c:	4603      	mov	r3, r0
}
 8009b7e:	4618      	mov	r0, r3
 8009b80:	3710      	adds	r7, #16
 8009b82:	46bd      	mov	sp, r7
 8009b84:	bd80      	pop	{r7, pc}

08009b86 <u8g_FirstPage>:
  return u8g_Begin(u8g);
}
#endif /* defined(U8G_WITH_PINLIST)  */

void u8g_FirstPage(u8g_t *u8g)
{
 8009b86:	b580      	push	{r7, lr}
 8009b88:	b082      	sub	sp, #8
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
  u8g_FirstPageLL(u8g, u8g->dev);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	4619      	mov	r1, r3
 8009b94:	6878      	ldr	r0, [r7, #4]
 8009b96:	f7ff febc 	bl	8009912 <u8g_FirstPageLL>
}
 8009b9a:	bf00      	nop
 8009b9c:	3708      	adds	r7, #8
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}

08009ba2 <u8g_NextPage>:

uint8_t u8g_NextPage(u8g_t *u8g)
{
 8009ba2:	b580      	push	{r7, lr}
 8009ba4:	b082      	sub	sp, #8
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]
  if  ( u8g->cursor_fn != (u8g_draw_cursor_fn)0 )
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	699b      	ldr	r3, [r3, #24]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d003      	beq.n	8009bba <u8g_NextPage+0x18>
  {
    u8g->cursor_fn(u8g);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	699b      	ldr	r3, [r3, #24]
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	4798      	blx	r3
  }
  return u8g_NextPageLL(u8g, u8g->dev);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	685b      	ldr	r3, [r3, #4]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f7ff fec8 	bl	8009956 <u8g_NextPageLL>
 8009bc6:	4603      	mov	r3, r0
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3708      	adds	r7, #8
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}

08009bd0 <u8g_Draw8Pixel>:
{
  u8g_DrawPixelLL(u8g, u8g->dev, x, y);
}

void u8g_Draw8Pixel(u8g_t *u8g, u8g_uint_t x, u8g_uint_t y, uint8_t dir, uint8_t pixel)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af02      	add	r7, sp, #8
 8009bd6:	6078      	str	r0, [r7, #4]
 8009bd8:	4608      	mov	r0, r1
 8009bda:	4611      	mov	r1, r2
 8009bdc:	461a      	mov	r2, r3
 8009bde:	4603      	mov	r3, r0
 8009be0:	70fb      	strb	r3, [r7, #3]
 8009be2:	460b      	mov	r3, r1
 8009be4:	70bb      	strb	r3, [r7, #2]
 8009be6:	4613      	mov	r3, r2
 8009be8:	707b      	strb	r3, [r7, #1]
  u8g_Draw8PixelLL(u8g, u8g->dev, x, y, dir, pixel);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	6859      	ldr	r1, [r3, #4]
 8009bee:	78b8      	ldrb	r0, [r7, #2]
 8009bf0:	78fa      	ldrb	r2, [r7, #3]
 8009bf2:	7c3b      	ldrb	r3, [r7, #16]
 8009bf4:	9301      	str	r3, [sp, #4]
 8009bf6:	787b      	ldrb	r3, [r7, #1]
 8009bf8:	9300      	str	r3, [sp, #0]
 8009bfa:	4603      	mov	r3, r0
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f7ff fed2 	bl	80099a6 <u8g_Draw8PixelLL>
}
 8009c02:	bf00      	nop
 8009c04:	3708      	adds	r7, #8
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <u8g_SetColorIndex>:
  irgb.b = b;  
  u8g_call_dev_fn(u8g, u8g->dev, U8G_DEV_MSG_SET_COLOR_ENTRY, &irgb);
}

void u8g_SetColorIndex(u8g_t *u8g, uint8_t idx)
{
 8009c0a:	b480      	push	{r7}
 8009c0c:	b083      	sub	sp, #12
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	460b      	mov	r3, r1
 8009c14:	70fb      	strb	r3, [r7, #3]
  u8g->arg_pixel.color = idx;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	78fa      	ldrb	r2, [r7, #3]
 8009c1a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  /*u8g->color_index = idx; */ /* must be removed */
}
 8009c1e:	bf00      	nop
 8009c20:	370c      	adds	r7, #12
 8009c22:	46bd      	mov	sp, r7
 8009c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c28:	4770      	bx	lr

08009c2a <u8g_page_First>:
  p->page = 0;
  u8g_page_First(p);
}

void u8g_page_First(u8g_page_t *p)
{
 8009c2a:	b480      	push	{r7}
 8009c2c:	b083      	sub	sp, #12
 8009c2e:	af00      	add	r7, sp, #0
 8009c30:	6078      	str	r0, [r7, #4]
  p->page_y0 = 0;
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	2200      	movs	r2, #0
 8009c36:	709a      	strb	r2, [r3, #2]
  p->page_y1 = p->page_height;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	781a      	ldrb	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	70da      	strb	r2, [r3, #3]
  p->page_y1--;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	78db      	ldrb	r3, [r3, #3]
 8009c44:	3b01      	subs	r3, #1
 8009c46:	b2da      	uxtb	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	70da      	strb	r2, [r3, #3]
  p->page = 0;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	711a      	strb	r2, [r3, #4]
}
 8009c52:	bf00      	nop
 8009c54:	370c      	adds	r7, #12
 8009c56:	46bd      	mov	sp, r7
 8009c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5c:	4770      	bx	lr

08009c5e <u8g_page_Next>:

uint8_t u8g_page_Next(u8g_page_t * p)
{
 8009c5e:	b490      	push	{r4, r7}
 8009c60:	b082      	sub	sp, #8
 8009c62:	af00      	add	r7, sp, #0
 8009c64:	6078      	str	r0, [r7, #4]
  register u8g_uint_t y1;
  p->page_y0 += p->page_height;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	789a      	ldrb	r2, [r3, #2]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	4413      	add	r3, r2
 8009c70:	b2da      	uxtb	r2, r3
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	709a      	strb	r2, [r3, #2]
  if ( p->page_y0 >= p->total_height )
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	789a      	ldrb	r2, [r3, #2]
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	785b      	ldrb	r3, [r3, #1]
 8009c7e:	429a      	cmp	r2, r3
 8009c80:	d301      	bcc.n	8009c86 <u8g_page_Next+0x28>
    return 0;
 8009c82:	2300      	movs	r3, #0
 8009c84:	e018      	b.n	8009cb8 <u8g_page_Next+0x5a>
  p->page++;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	791b      	ldrb	r3, [r3, #4]
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	b2da      	uxtb	r2, r3
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	711a      	strb	r2, [r3, #4]
  y1 = p->page_y1;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	78dc      	ldrb	r4, [r3, #3]
  y1 += p->page_height;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	4423      	add	r3, r4
 8009c9c:	b2dc      	uxtb	r4, r3
  if ( y1 >= p->total_height )
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	785b      	ldrb	r3, [r3, #1]
 8009ca2:	429c      	cmp	r4, r3
 8009ca4:	d304      	bcc.n	8009cb0 <u8g_page_Next+0x52>
  {
    y1 = p->total_height;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	785c      	ldrb	r4, [r3, #1]
    y1--;
 8009caa:	4623      	mov	r3, r4
 8009cac:	3b01      	subs	r3, #1
 8009cae:	b2dc      	uxtb	r4, r3
  }
  p->page_y1 = y1;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	4622      	mov	r2, r4
 8009cb4:	70da      	strb	r2, [r3, #3]
  
  return 1;
 8009cb6:	2301      	movs	r3, #1
}
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3708      	adds	r7, #8
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bc90      	pop	{r4, r7}
 8009cc0:	4770      	bx	lr

08009cc2 <u8g_pb_Clear>:
*/

#include "u8g.h"

void u8g_pb_Clear(u8g_pb_t *b)
{
 8009cc2:	b480      	push	{r7}
 8009cc4:	b085      	sub	sp, #20
 8009cc6:	af00      	add	r7, sp, #0
 8009cc8:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = (uint8_t *)b->buf;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	689b      	ldr	r3, [r3, #8]
 8009cce:	60fb      	str	r3, [r7, #12]
  uint8_t *end_ptr = ptr;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	60bb      	str	r3, [r7, #8]
  end_ptr += b->width;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	795b      	ldrb	r3, [r3, #5]
 8009cd8:	461a      	mov	r2, r3
 8009cda:	68bb      	ldr	r3, [r7, #8]
 8009cdc:	4413      	add	r3, r2
 8009cde:	60bb      	str	r3, [r7, #8]
  do
  {
    *ptr++ = 0;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	1c5a      	adds	r2, r3, #1
 8009ce4:	60fa      	str	r2, [r7, #12]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	701a      	strb	r2, [r3, #0]
  } while( ptr != end_ptr );
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d1f6      	bne.n	8009ce0 <u8g_pb_Clear+0x1e>
}
 8009cf2:	bf00      	nop
 8009cf4:	bf00      	nop
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <u8g_pb_IsYIntersection>:
  return 0;
}
*/

uint8_t u8g_pb_IsYIntersection(u8g_pb_t *pb, u8g_uint_t v0, u8g_uint_t v1)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	70fb      	strb	r3, [r7, #3]
 8009d0c:	4613      	mov	r3, r2
 8009d0e:	70bb      	strb	r3, [r7, #2]
  uint8_t c1, c2, c3, tmp;
  c1 = v0 <= pb->p.page_y1;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	78db      	ldrb	r3, [r3, #3]
 8009d14:	78fa      	ldrb	r2, [r7, #3]
 8009d16:	429a      	cmp	r2, r3
 8009d18:	bf94      	ite	ls
 8009d1a:	2301      	movls	r3, #1
 8009d1c:	2300      	movhi	r3, #0
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	73fb      	strb	r3, [r7, #15]
  c2 = v1 >= pb->p.page_y0;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	789b      	ldrb	r3, [r3, #2]
 8009d26:	78ba      	ldrb	r2, [r7, #2]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	bf2c      	ite	cs
 8009d2c:	2301      	movcs	r3, #1
 8009d2e:	2300      	movcc	r3, #0
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	73bb      	strb	r3, [r7, #14]
  c3 = v0 > v1;
 8009d34:	78fa      	ldrb	r2, [r7, #3]
 8009d36:	78bb      	ldrb	r3, [r7, #2]
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	bf8c      	ite	hi
 8009d3c:	2301      	movhi	r3, #1
 8009d3e:	2300      	movls	r3, #0
 8009d40:	b2db      	uxtb	r3, r3
 8009d42:	737b      	strb	r3, [r7, #13]
  if ( c2 && c3 )
    return 1;
  return 0;
  */
  
  tmp = c1;
 8009d44:	7bfb      	ldrb	r3, [r7, #15]
 8009d46:	733b      	strb	r3, [r7, #12]
  c1 &= c2;
 8009d48:	7bfa      	ldrb	r2, [r7, #15]
 8009d4a:	7bbb      	ldrb	r3, [r7, #14]
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	73fb      	strb	r3, [r7, #15]
  c2 &= c3;
 8009d50:	7bba      	ldrb	r2, [r7, #14]
 8009d52:	7b7b      	ldrb	r3, [r7, #13]
 8009d54:	4013      	ands	r3, r2
 8009d56:	73bb      	strb	r3, [r7, #14]
  c3 &= tmp;
 8009d58:	7b7a      	ldrb	r2, [r7, #13]
 8009d5a:	7b3b      	ldrb	r3, [r7, #12]
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	737b      	strb	r3, [r7, #13]
  c1 |= c2;
 8009d60:	7bfa      	ldrb	r2, [r7, #15]
 8009d62:	7bbb      	ldrb	r3, [r7, #14]
 8009d64:	4313      	orrs	r3, r2
 8009d66:	73fb      	strb	r3, [r7, #15]
  c1 |= c3;
 8009d68:	7bfa      	ldrb	r2, [r7, #15]
 8009d6a:	7b7b      	ldrb	r3, [r7, #13]
 8009d6c:	4313      	orrs	r3, r2
 8009d6e:	73fb      	strb	r3, [r7, #15]
  return c1 & 1;
 8009d70:	7bfb      	ldrb	r3, [r7, #15]
 8009d72:	f003 0301 	and.w	r3, r3, #1
 8009d76:	b2db      	uxtb	r3, r3
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <u8g_pb_GetPageBox>:
    
  return u8g_pb_IsXIntersection(pb, bbx->x, tmp);
}

void u8g_pb_GetPageBox(u8g_pb_t *pb, u8g_box_t *box)
{
 8009d84:	b480      	push	{r7}
 8009d86:	b083      	sub	sp, #12
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  box->x0 = 0;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2200      	movs	r2, #0
 8009d92:	701a      	strb	r2, [r3, #0]
  box->y0 = pb->p.page_y0;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	789a      	ldrb	r2, [r3, #2]
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	705a      	strb	r2, [r3, #1]
  box->x1 = pb->width;
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	795a      	ldrb	r2, [r3, #5]
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	709a      	strb	r2, [r3, #2]
  box->x1--;
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	789b      	ldrb	r3, [r3, #2]
 8009da8:	3b01      	subs	r3, #1
 8009daa:	b2da      	uxtb	r2, r3
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	709a      	strb	r2, [r3, #2]
  box->y1 = pb->p.page_y1;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	78da      	ldrb	r2, [r3, #3]
 8009db4:	683b      	ldr	r3, [r7, #0]
 8009db6:	70da      	strb	r2, [r3, #3]
}
 8009db8:	bf00      	nop
 8009dba:	370c      	adds	r7, #12
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dc2:	4770      	bx	lr

08009dc4 <u8g_pb_Is8PixelVisible>:


uint8_t u8g_pb_Is8PixelVisible(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  u8g_uint_t v0, v1;
  v0 = arg_pixel->y;
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	785b      	ldrb	r3, [r3, #1]
 8009dd2:	73fb      	strb	r3, [r7, #15]
  v1 = v0;
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
 8009dd6:	73bb      	strb	r3, [r7, #14]
  switch( arg_pixel->dir )
 8009dd8:	683b      	ldr	r3, [r7, #0]
 8009dda:	78db      	ldrb	r3, [r3, #3]
 8009ddc:	2b03      	cmp	r3, #3
 8009dde:	d813      	bhi.n	8009e08 <u8g_pb_Is8PixelVisible+0x44>
 8009de0:	a201      	add	r2, pc, #4	; (adr r2, 8009de8 <u8g_pb_Is8PixelVisible+0x24>)
 8009de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009de6:	bf00      	nop
 8009de8:	08009e09 	.word	0x08009e09
 8009dec:	08009df9 	.word	0x08009df9
 8009df0:	08009e09 	.word	0x08009e09
 8009df4:	08009e01 	.word	0x08009e01
  {
    case 0:
      break;
    case 1:  
      v1 += 8;          /* this is independent from the page height */
 8009df8:	7bbb      	ldrb	r3, [r7, #14]
 8009dfa:	3308      	adds	r3, #8
 8009dfc:	73bb      	strb	r3, [r7, #14]
      break;
 8009dfe:	e003      	b.n	8009e08 <u8g_pb_Is8PixelVisible+0x44>
    case 2:  
      break;
    case 3: 
      v0 -= 8;
 8009e00:	7bfb      	ldrb	r3, [r7, #15]
 8009e02:	3b08      	subs	r3, #8
 8009e04:	73fb      	strb	r3, [r7, #15]
      break;
 8009e06:	bf00      	nop
  }
  return u8g_pb_IsYIntersection(b, v0, v1);
 8009e08:	7bba      	ldrb	r2, [r7, #14]
 8009e0a:	7bfb      	ldrb	r3, [r7, #15]
 8009e0c:	4619      	mov	r1, r3
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f7ff ff76 	bl	8009d00 <u8g_pb_IsYIntersection>
 8009e14:	4603      	mov	r3, r0
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}
 8009e1e:	bf00      	nop

08009e20 <u8g_pb_WriteBuffer>:



uint8_t u8g_pb_WriteBuffer(u8g_pb_t *b, u8g_t *u8g, u8g_dev_t *dev)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	60f8      	str	r0, [r7, #12]
 8009e28:	60b9      	str	r1, [r7, #8]
 8009e2a:	607a      	str	r2, [r7, #4]
  return u8g_WriteSequence(u8g, dev, b->width, b->buf);  
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	795a      	ldrb	r2, [r3, #5]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	689b      	ldr	r3, [r3, #8]
 8009e34:	6879      	ldr	r1, [r7, #4]
 8009e36:	68b8      	ldr	r0, [r7, #8]
 8009e38:	f7ff f870 	bl	8008f1c <u8g_WriteSequence>
 8009e3c:	4603      	mov	r3, r0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <u8g_pb8v1_set_pixel>:
  b->width = width;
  u8g_pb_Clear(b);
}

void u8g_pb8v1_set_pixel(u8g_pb_t *b, u8g_uint_t x, u8g_uint_t y, uint8_t color_index)
{
 8009e46:	b490      	push	{r4, r7}
 8009e48:	b084      	sub	sp, #16
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
 8009e4e:	4608      	mov	r0, r1
 8009e50:	4611      	mov	r1, r2
 8009e52:	461a      	mov	r2, r3
 8009e54:	4603      	mov	r3, r0
 8009e56:	70fb      	strb	r3, [r7, #3]
 8009e58:	460b      	mov	r3, r1
 8009e5a:	70bb      	strb	r3, [r7, #2]
 8009e5c:	4613      	mov	r3, r2
 8009e5e:	707b      	strb	r3, [r7, #1]
  register uint8_t mask;
  uint8_t *ptr = b->buf;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	60fb      	str	r3, [r7, #12]
  
  y -= b->p.page_y0;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	789b      	ldrb	r3, [r3, #2]
 8009e6a:	78ba      	ldrb	r2, [r7, #2]
 8009e6c:	1ad3      	subs	r3, r2, r3
 8009e6e:	70bb      	strb	r3, [r7, #2]
  mask = 1;
 8009e70:	2401      	movs	r4, #1
  y &= 0x07;
 8009e72:	78bb      	ldrb	r3, [r7, #2]
 8009e74:	f003 0307 	and.w	r3, r3, #7
 8009e78:	70bb      	strb	r3, [r7, #2]
  mask <<= y;
 8009e7a:	4622      	mov	r2, r4
 8009e7c:	78bb      	ldrb	r3, [r7, #2]
 8009e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8009e82:	b2dc      	uxtb	r4, r3
  ptr += x;
 8009e84:	78fb      	ldrb	r3, [r7, #3]
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	4413      	add	r3, r2
 8009e8a:	60fb      	str	r3, [r7, #12]
  if ( color_index )
 8009e8c:	787b      	ldrb	r3, [r7, #1]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d006      	beq.n	8009ea0 <u8g_pb8v1_set_pixel+0x5a>
  {
    *ptr |= mask;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	781b      	ldrb	r3, [r3, #0]
 8009e96:	4323      	orrs	r3, r4
 8009e98:	b2da      	uxtb	r2, r3
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	701a      	strb	r2, [r3, #0]
  else
  {
    mask ^=0xff;
    *ptr &= mask;
  }
}
 8009e9e:	e007      	b.n	8009eb0 <u8g_pb8v1_set_pixel+0x6a>
    mask ^=0xff;
 8009ea0:	43e3      	mvns	r3, r4
 8009ea2:	b2dc      	uxtb	r4, r3
    *ptr &= mask;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	781b      	ldrb	r3, [r3, #0]
 8009ea8:	4023      	ands	r3, r4
 8009eaa:	b2da      	uxtb	r2, r3
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	701a      	strb	r2, [r3, #0]
}
 8009eb0:	bf00      	nop
 8009eb2:	3710      	adds	r7, #16
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	bc90      	pop	{r4, r7}
 8009eb8:	4770      	bx	lr

08009eba <u8g_pb8v1_SetPixel>:


void u8g_pb8v1_SetPixel(u8g_pb_t *b, const u8g_dev_arg_pixel_t * const arg_pixel)
{
 8009eba:	b580      	push	{r7, lr}
 8009ebc:	b082      	sub	sp, #8
 8009ebe:	af00      	add	r7, sp, #0
 8009ec0:	6078      	str	r0, [r7, #4]
 8009ec2:	6039      	str	r1, [r7, #0]
  if ( arg_pixel->y < b->p.page_y0 )
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	785a      	ldrb	r2, [r3, #1]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	789b      	ldrb	r3, [r3, #2]
 8009ecc:	429a      	cmp	r2, r3
 8009ece:	d315      	bcc.n	8009efc <u8g_pb8v1_SetPixel+0x42>
    return;
  if ( arg_pixel->y > b->p.page_y1 )
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	785a      	ldrb	r2, [r3, #1]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	78db      	ldrb	r3, [r3, #3]
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d811      	bhi.n	8009f00 <u8g_pb8v1_SetPixel+0x46>
    return;
  if ( arg_pixel->x >= b->width )
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	781a      	ldrb	r2, [r3, #0]
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	795b      	ldrb	r3, [r3, #5]
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d20d      	bcs.n	8009f04 <u8g_pb8v1_SetPixel+0x4a>
    return;
  u8g_pb8v1_set_pixel(b, arg_pixel->x, arg_pixel->y, arg_pixel->color);
 8009ee8:	683b      	ldr	r3, [r7, #0]
 8009eea:	7819      	ldrb	r1, [r3, #0]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	785a      	ldrb	r2, [r3, #1]
 8009ef0:	683b      	ldr	r3, [r7, #0]
 8009ef2:	791b      	ldrb	r3, [r3, #4]
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f7ff ffa6 	bl	8009e46 <u8g_pb8v1_set_pixel>
 8009efa:	e004      	b.n	8009f06 <u8g_pb8v1_SetPixel+0x4c>
    return;
 8009efc:	bf00      	nop
 8009efe:	e002      	b.n	8009f06 <u8g_pb8v1_SetPixel+0x4c>
    return;
 8009f00:	bf00      	nop
 8009f02:	e000      	b.n	8009f06 <u8g_pb8v1_SetPixel+0x4c>
    return;
 8009f04:	bf00      	nop
}
 8009f06:	3708      	adds	r7, #8
 8009f08:	46bd      	mov	sp, r7
 8009f0a:	bd80      	pop	{r7, pc}

08009f0c <u8g_pb8v1_Set8PixelOpt2>:
  } while( pixel != 0  );
}


void u8g_pb8v1_Set8PixelOpt2(u8g_pb_t *b, u8g_dev_arg_pixel_t *arg_pixel)
{
 8009f0c:	b590      	push	{r4, r7, lr}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
 8009f14:	6039      	str	r1, [r7, #0]
  register uint8_t pixel = arg_pixel->pixel;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	789c      	ldrb	r4, [r3, #2]
  u8g_uint_t dx = 0;
 8009f1a:	2300      	movs	r3, #0
 8009f1c:	73fb      	strb	r3, [r7, #15]
  u8g_uint_t dy = 0;
 8009f1e:	2300      	movs	r3, #0
 8009f20:	73bb      	strb	r3, [r7, #14]
  
  switch( arg_pixel->dir )
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	78db      	ldrb	r3, [r3, #3]
 8009f26:	2b03      	cmp	r3, #3
 8009f28:	d81a      	bhi.n	8009f60 <u8g_pb8v1_Set8PixelOpt2+0x54>
 8009f2a:	a201      	add	r2, pc, #4	; (adr r2, 8009f30 <u8g_pb8v1_Set8PixelOpt2+0x24>)
 8009f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f30:	08009f41 	.word	0x08009f41
 8009f34:	08009f49 	.word	0x08009f49
 8009f38:	08009f51 	.word	0x08009f51
 8009f3c:	08009f59 	.word	0x08009f59
  {
    case 0: dx++; break;
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
 8009f42:	3301      	adds	r3, #1
 8009f44:	73fb      	strb	r3, [r7, #15]
 8009f46:	e00b      	b.n	8009f60 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 1: dy++; break;
 8009f48:	7bbb      	ldrb	r3, [r7, #14]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	73bb      	strb	r3, [r7, #14]
 8009f4e:	e007      	b.n	8009f60 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 2: dx--; break;
 8009f50:	7bfb      	ldrb	r3, [r7, #15]
 8009f52:	3b01      	subs	r3, #1
 8009f54:	73fb      	strb	r3, [r7, #15]
 8009f56:	e003      	b.n	8009f60 <u8g_pb8v1_Set8PixelOpt2+0x54>
    case 3: dy--; break;
 8009f58:	7bbb      	ldrb	r3, [r7, #14]
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	73bb      	strb	r3, [r7, #14]
 8009f5e:	bf00      	nop
  }
  
  do
  {
    if ( pixel & 128 )
 8009f60:	b263      	sxtb	r3, r4
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	da03      	bge.n	8009f6e <u8g_pb8v1_Set8PixelOpt2+0x62>
      u8g_pb8v1_SetPixel(b, arg_pixel);
 8009f66:	6839      	ldr	r1, [r7, #0]
 8009f68:	6878      	ldr	r0, [r7, #4]
 8009f6a:	f7ff ffa6 	bl	8009eba <u8g_pb8v1_SetPixel>
    arg_pixel->x += dx;
 8009f6e:	683b      	ldr	r3, [r7, #0]
 8009f70:	781a      	ldrb	r2, [r3, #0]
 8009f72:	7bfb      	ldrb	r3, [r7, #15]
 8009f74:	4413      	add	r3, r2
 8009f76:	b2da      	uxtb	r2, r3
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	701a      	strb	r2, [r3, #0]
    arg_pixel->y += dy;
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	785a      	ldrb	r2, [r3, #1]
 8009f80:	7bbb      	ldrb	r3, [r7, #14]
 8009f82:	4413      	add	r3, r2
 8009f84:	b2da      	uxtb	r2, r3
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	705a      	strb	r2, [r3, #1]
    pixel <<= 1;
 8009f8a:	0063      	lsls	r3, r4, #1
 8009f8c:	b2dc      	uxtb	r4, r3
  } while( pixel != 0  );
 8009f8e:	2c00      	cmp	r4, #0
 8009f90:	d1e6      	bne.n	8009f60 <u8g_pb8v1_Set8PixelOpt2+0x54>
  
}
 8009f92:	bf00      	nop
 8009f94:	bf00      	nop
 8009f96:	3714      	adds	r7, #20
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	bd90      	pop	{r4, r7, pc}

08009f9c <u8g_dev_pb8v1_base_fn>:

uint8_t u8g_dev_pb8v1_base_fn(u8g_t *u8g, u8g_dev_t *dev, uint8_t msg, void *arg)
{
 8009f9c:	b580      	push	{r7, lr}
 8009f9e:	b086      	sub	sp, #24
 8009fa0:	af00      	add	r7, sp, #0
 8009fa2:	60f8      	str	r0, [r7, #12]
 8009fa4:	60b9      	str	r1, [r7, #8]
 8009fa6:	603b      	str	r3, [r7, #0]
 8009fa8:	4613      	mov	r3, r2
 8009faa:	71fb      	strb	r3, [r7, #7]
  u8g_pb_t *pb = (u8g_pb_t *)(dev->dev_mem);
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	617b      	str	r3, [r7, #20]
  switch(msg)
 8009fb2:	79fb      	ldrb	r3, [r7, #7]
 8009fb4:	3b0a      	subs	r3, #10
 8009fb6:	2b3e      	cmp	r3, #62	; 0x3e
 8009fb8:	f200 80ba 	bhi.w	800a130 <u8g_dev_pb8v1_base_fn+0x194>
 8009fbc:	a201      	add	r2, pc, #4	; (adr r2, 8009fc4 <u8g_dev_pb8v1_base_fn+0x28>)
 8009fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc2:	bf00      	nop
 8009fc4:	0800a131 	.word	0x0800a131
 8009fc8:	0800a131 	.word	0x0800a131
 8009fcc:	0800a131 	.word	0x0800a131
 8009fd0:	0800a131 	.word	0x0800a131
 8009fd4:	0800a131 	.word	0x0800a131
 8009fd8:	0800a131 	.word	0x0800a131
 8009fdc:	0800a131 	.word	0x0800a131
 8009fe0:	0800a131 	.word	0x0800a131
 8009fe4:	0800a131 	.word	0x0800a131
 8009fe8:	0800a131 	.word	0x0800a131
 8009fec:	0800a0e3 	.word	0x0800a0e3
 8009ff0:	0800a0f3 	.word	0x0800a0f3
 8009ff4:	0800a131 	.word	0x0800a131
 8009ff8:	0800a10d 	.word	0x0800a10d
 8009ffc:	0800a131 	.word	0x0800a131
 800a000:	0800a131 	.word	0x0800a131
 800a004:	0800a131 	.word	0x0800a131
 800a008:	0800a131 	.word	0x0800a131
 800a00c:	0800a131 	.word	0x0800a131
 800a010:	0800a131 	.word	0x0800a131
 800a014:	0800a131 	.word	0x0800a131
 800a018:	0800a131 	.word	0x0800a131
 800a01c:	0800a131 	.word	0x0800a131
 800a020:	0800a131 	.word	0x0800a131
 800a024:	0800a131 	.word	0x0800a131
 800a028:	0800a131 	.word	0x0800a131
 800a02c:	0800a131 	.word	0x0800a131
 800a030:	0800a131 	.word	0x0800a131
 800a034:	0800a131 	.word	0x0800a131
 800a038:	0800a131 	.word	0x0800a131
 800a03c:	0800a131 	.word	0x0800a131
 800a040:	0800a131 	.word	0x0800a131
 800a044:	0800a131 	.word	0x0800a131
 800a048:	0800a131 	.word	0x0800a131
 800a04c:	0800a131 	.word	0x0800a131
 800a050:	0800a131 	.word	0x0800a131
 800a054:	0800a131 	.word	0x0800a131
 800a058:	0800a131 	.word	0x0800a131
 800a05c:	0800a131 	.word	0x0800a131
 800a060:	0800a131 	.word	0x0800a131
 800a064:	0800a0d9 	.word	0x0800a0d9
 800a068:	0800a131 	.word	0x0800a131
 800a06c:	0800a131 	.word	0x0800a131
 800a070:	0800a131 	.word	0x0800a131
 800a074:	0800a131 	.word	0x0800a131
 800a078:	0800a131 	.word	0x0800a131
 800a07c:	0800a131 	.word	0x0800a131
 800a080:	0800a131 	.word	0x0800a131
 800a084:	0800a131 	.word	0x0800a131
 800a088:	0800a0c1 	.word	0x0800a0c1
 800a08c:	0800a131 	.word	0x0800a131
 800a090:	0800a131 	.word	0x0800a131
 800a094:	0800a131 	.word	0x0800a131
 800a098:	0800a131 	.word	0x0800a131
 800a09c:	0800a131 	.word	0x0800a131
 800a0a0:	0800a131 	.word	0x0800a131
 800a0a4:	0800a131 	.word	0x0800a131
 800a0a8:	0800a131 	.word	0x0800a131
 800a0ac:	0800a131 	.word	0x0800a131
 800a0b0:	0800a131 	.word	0x0800a131
 800a0b4:	0800a117 	.word	0x0800a117
 800a0b8:	0800a121 	.word	0x0800a121
 800a0bc:	0800a12b 	.word	0x0800a12b
  {
    case U8G_DEV_MSG_SET_8PIXEL:
      if ( u8g_pb_Is8PixelVisible(pb, (u8g_dev_arg_pixel_t *)arg) )
 800a0c0:	6839      	ldr	r1, [r7, #0]
 800a0c2:	6978      	ldr	r0, [r7, #20]
 800a0c4:	f7ff fe7e 	bl	8009dc4 <u8g_pb_Is8PixelVisible>
 800a0c8:	4603      	mov	r3, r0
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d02f      	beq.n	800a12e <u8g_dev_pb8v1_base_fn+0x192>
        u8g_pb8v1_Set8PixelOpt2(pb, (u8g_dev_arg_pixel_t *)arg);
 800a0ce:	6839      	ldr	r1, [r7, #0]
 800a0d0:	6978      	ldr	r0, [r7, #20]
 800a0d2:	f7ff ff1b 	bl	8009f0c <u8g_pb8v1_Set8PixelOpt2>
      break;
 800a0d6:	e02a      	b.n	800a12e <u8g_dev_pb8v1_base_fn+0x192>
    case U8G_DEV_MSG_SET_PIXEL:
        u8g_pb8v1_SetPixel(pb, (u8g_dev_arg_pixel_t *)arg);
 800a0d8:	6839      	ldr	r1, [r7, #0]
 800a0da:	6978      	ldr	r0, [r7, #20]
 800a0dc:	f7ff feed 	bl	8009eba <u8g_pb8v1_SetPixel>
      break;
 800a0e0:	e026      	b.n	800a130 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_INIT:
      break;
    case U8G_DEV_MSG_STOP:
      break;
    case U8G_DEV_MSG_PAGE_FIRST:
      u8g_pb_Clear(pb);
 800a0e2:	6978      	ldr	r0, [r7, #20]
 800a0e4:	f7ff fded 	bl	8009cc2 <u8g_pb_Clear>
      u8g_page_First(&(pb->p));
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f7ff fd9d 	bl	8009c2a <u8g_page_First>
      break;
 800a0f0:	e01e      	b.n	800a130 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_PAGE_NEXT:
      if ( u8g_page_Next(&(pb->p)) == 0 )
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	f7ff fdb2 	bl	8009c5e <u8g_page_Next>
 800a0fa:	4603      	mov	r3, r0
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d101      	bne.n	800a104 <u8g_dev_pb8v1_base_fn+0x168>
        return 0;
 800a100:	2300      	movs	r3, #0
 800a102:	e016      	b.n	800a132 <u8g_dev_pb8v1_base_fn+0x196>
      u8g_pb_Clear(pb);
 800a104:	6978      	ldr	r0, [r7, #20]
 800a106:	f7ff fddc 	bl	8009cc2 <u8g_pb_Clear>
      break;
 800a10a:	e011      	b.n	800a130 <u8g_dev_pb8v1_base_fn+0x194>
#ifdef U8G_DEV_MSG_IS_BBX_INTERSECTION
    case U8G_DEV_MSG_IS_BBX_INTERSECTION:
      return u8g_pb_IsIntersection(pb, (u8g_dev_arg_bbx_t *)arg);
#endif
    case U8G_DEV_MSG_GET_PAGE_BOX:
      u8g_pb_GetPageBox(pb, (u8g_box_t *)arg);
 800a10c:	6839      	ldr	r1, [r7, #0]
 800a10e:	6978      	ldr	r0, [r7, #20]
 800a110:	f7ff fe38 	bl	8009d84 <u8g_pb_GetPageBox>
      break;
 800a114:	e00c      	b.n	800a130 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_WIDTH:
      *((u8g_uint_t *)arg) = pb->width;
 800a116:	697b      	ldr	r3, [r7, #20]
 800a118:	795a      	ldrb	r2, [r3, #5]
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	701a      	strb	r2, [r3, #0]
      break;
 800a11e:	e007      	b.n	800a130 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_GET_HEIGHT:
      *((u8g_uint_t *)arg) = pb->p.total_height;
 800a120:	697b      	ldr	r3, [r7, #20]
 800a122:	785a      	ldrb	r2, [r3, #1]
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	701a      	strb	r2, [r3, #0]
      break;
 800a128:	e002      	b.n	800a130 <u8g_dev_pb8v1_base_fn+0x194>
    case U8G_DEV_MSG_SET_COLOR_ENTRY:
      break;
    case U8G_DEV_MSG_SET_XY_CB:
      break;
    case U8G_DEV_MSG_GET_MODE:
      return U8G_MODE_BW;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e001      	b.n	800a132 <u8g_dev_pb8v1_base_fn+0x196>
      break;
 800a12e:	bf00      	nop
  }
  return 1;
 800a130:	2301      	movs	r3, #1
}
 800a132:	4618      	mov	r0, r3
 800a134:	3718      	adds	r7, #24
 800a136:	46bd      	mov	sp, r7
 800a138:	bd80      	pop	{r7, pc}
 800a13a:	bf00      	nop

0800a13c <u8g_state_dummy_cb>:

#include <stddef.h>
#include "u8g.h"

void u8g_state_dummy_cb(uint8_t msg)
{
 800a13c:	b480      	push	{r7}
 800a13e:	b083      	sub	sp, #12
 800a140:	af00      	add	r7, sp, #0
 800a142:	4603      	mov	r3, r0
 800a144:	71fb      	strb	r3, [r7, #7]
  /* the dummy procedure does nothing */
}
 800a146:	bf00      	nop
 800a148:	370c      	adds	r7, #12
 800a14a:	46bd      	mov	sp, r7
 800a14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a150:	4770      	bx	lr
	...

0800a154 <siprintf>:
 800a154:	b40e      	push	{r1, r2, r3}
 800a156:	b500      	push	{lr}
 800a158:	b09c      	sub	sp, #112	; 0x70
 800a15a:	ab1d      	add	r3, sp, #116	; 0x74
 800a15c:	9002      	str	r0, [sp, #8]
 800a15e:	9006      	str	r0, [sp, #24]
 800a160:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a164:	4809      	ldr	r0, [pc, #36]	; (800a18c <siprintf+0x38>)
 800a166:	9107      	str	r1, [sp, #28]
 800a168:	9104      	str	r1, [sp, #16]
 800a16a:	4909      	ldr	r1, [pc, #36]	; (800a190 <siprintf+0x3c>)
 800a16c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a170:	9105      	str	r1, [sp, #20]
 800a172:	6800      	ldr	r0, [r0, #0]
 800a174:	9301      	str	r3, [sp, #4]
 800a176:	a902      	add	r1, sp, #8
 800a178:	f000 f970 	bl	800a45c <_svfiprintf_r>
 800a17c:	9b02      	ldr	r3, [sp, #8]
 800a17e:	2200      	movs	r2, #0
 800a180:	701a      	strb	r2, [r3, #0]
 800a182:	b01c      	add	sp, #112	; 0x70
 800a184:	f85d eb04 	ldr.w	lr, [sp], #4
 800a188:	b003      	add	sp, #12
 800a18a:	4770      	bx	lr
 800a18c:	20000080 	.word	0x20000080
 800a190:	ffff0208 	.word	0xffff0208

0800a194 <std>:
 800a194:	2300      	movs	r3, #0
 800a196:	b510      	push	{r4, lr}
 800a198:	4604      	mov	r4, r0
 800a19a:	e9c0 3300 	strd	r3, r3, [r0]
 800a19e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a1a2:	6083      	str	r3, [r0, #8]
 800a1a4:	8181      	strh	r1, [r0, #12]
 800a1a6:	6643      	str	r3, [r0, #100]	; 0x64
 800a1a8:	81c2      	strh	r2, [r0, #14]
 800a1aa:	6183      	str	r3, [r0, #24]
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	2208      	movs	r2, #8
 800a1b0:	305c      	adds	r0, #92	; 0x5c
 800a1b2:	f000 f8c3 	bl	800a33c <memset>
 800a1b6:	4b0d      	ldr	r3, [pc, #52]	; (800a1ec <std+0x58>)
 800a1b8:	6263      	str	r3, [r4, #36]	; 0x24
 800a1ba:	4b0d      	ldr	r3, [pc, #52]	; (800a1f0 <std+0x5c>)
 800a1bc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a1be:	4b0d      	ldr	r3, [pc, #52]	; (800a1f4 <std+0x60>)
 800a1c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a1c2:	4b0d      	ldr	r3, [pc, #52]	; (800a1f8 <std+0x64>)
 800a1c4:	6323      	str	r3, [r4, #48]	; 0x30
 800a1c6:	4b0d      	ldr	r3, [pc, #52]	; (800a1fc <std+0x68>)
 800a1c8:	6224      	str	r4, [r4, #32]
 800a1ca:	429c      	cmp	r4, r3
 800a1cc:	d006      	beq.n	800a1dc <std+0x48>
 800a1ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800a1d2:	4294      	cmp	r4, r2
 800a1d4:	d002      	beq.n	800a1dc <std+0x48>
 800a1d6:	33d0      	adds	r3, #208	; 0xd0
 800a1d8:	429c      	cmp	r4, r3
 800a1da:	d105      	bne.n	800a1e8 <std+0x54>
 800a1dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a1e4:	f000 b8dc 	b.w	800a3a0 <__retarget_lock_init_recursive>
 800a1e8:	bd10      	pop	{r4, pc}
 800a1ea:	bf00      	nop
 800a1ec:	0800aeb5 	.word	0x0800aeb5
 800a1f0:	0800aed7 	.word	0x0800aed7
 800a1f4:	0800af0f 	.word	0x0800af0f
 800a1f8:	0800af33 	.word	0x0800af33
 800a1fc:	20000564 	.word	0x20000564

0800a200 <stdio_exit_handler>:
 800a200:	4a02      	ldr	r2, [pc, #8]	; (800a20c <stdio_exit_handler+0xc>)
 800a202:	4903      	ldr	r1, [pc, #12]	; (800a210 <stdio_exit_handler+0x10>)
 800a204:	4803      	ldr	r0, [pc, #12]	; (800a214 <stdio_exit_handler+0x14>)
 800a206:	f000 b869 	b.w	800a2dc <_fwalk_sglue>
 800a20a:	bf00      	nop
 800a20c:	20000028 	.word	0x20000028
 800a210:	0800ae4d 	.word	0x0800ae4d
 800a214:	20000034 	.word	0x20000034

0800a218 <cleanup_stdio>:
 800a218:	6841      	ldr	r1, [r0, #4]
 800a21a:	4b0c      	ldr	r3, [pc, #48]	; (800a24c <cleanup_stdio+0x34>)
 800a21c:	4299      	cmp	r1, r3
 800a21e:	b510      	push	{r4, lr}
 800a220:	4604      	mov	r4, r0
 800a222:	d001      	beq.n	800a228 <cleanup_stdio+0x10>
 800a224:	f000 fe12 	bl	800ae4c <_fflush_r>
 800a228:	68a1      	ldr	r1, [r4, #8]
 800a22a:	4b09      	ldr	r3, [pc, #36]	; (800a250 <cleanup_stdio+0x38>)
 800a22c:	4299      	cmp	r1, r3
 800a22e:	d002      	beq.n	800a236 <cleanup_stdio+0x1e>
 800a230:	4620      	mov	r0, r4
 800a232:	f000 fe0b 	bl	800ae4c <_fflush_r>
 800a236:	68e1      	ldr	r1, [r4, #12]
 800a238:	4b06      	ldr	r3, [pc, #24]	; (800a254 <cleanup_stdio+0x3c>)
 800a23a:	4299      	cmp	r1, r3
 800a23c:	d004      	beq.n	800a248 <cleanup_stdio+0x30>
 800a23e:	4620      	mov	r0, r4
 800a240:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a244:	f000 be02 	b.w	800ae4c <_fflush_r>
 800a248:	bd10      	pop	{r4, pc}
 800a24a:	bf00      	nop
 800a24c:	20000564 	.word	0x20000564
 800a250:	200005cc 	.word	0x200005cc
 800a254:	20000634 	.word	0x20000634

0800a258 <global_stdio_init.part.0>:
 800a258:	b510      	push	{r4, lr}
 800a25a:	4b0b      	ldr	r3, [pc, #44]	; (800a288 <global_stdio_init.part.0+0x30>)
 800a25c:	4c0b      	ldr	r4, [pc, #44]	; (800a28c <global_stdio_init.part.0+0x34>)
 800a25e:	4a0c      	ldr	r2, [pc, #48]	; (800a290 <global_stdio_init.part.0+0x38>)
 800a260:	601a      	str	r2, [r3, #0]
 800a262:	4620      	mov	r0, r4
 800a264:	2200      	movs	r2, #0
 800a266:	2104      	movs	r1, #4
 800a268:	f7ff ff94 	bl	800a194 <std>
 800a26c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a270:	2201      	movs	r2, #1
 800a272:	2109      	movs	r1, #9
 800a274:	f7ff ff8e 	bl	800a194 <std>
 800a278:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a27c:	2202      	movs	r2, #2
 800a27e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a282:	2112      	movs	r1, #18
 800a284:	f7ff bf86 	b.w	800a194 <std>
 800a288:	2000069c 	.word	0x2000069c
 800a28c:	20000564 	.word	0x20000564
 800a290:	0800a201 	.word	0x0800a201

0800a294 <__sfp_lock_acquire>:
 800a294:	4801      	ldr	r0, [pc, #4]	; (800a29c <__sfp_lock_acquire+0x8>)
 800a296:	f000 b884 	b.w	800a3a2 <__retarget_lock_acquire_recursive>
 800a29a:	bf00      	nop
 800a29c:	200006a1 	.word	0x200006a1

0800a2a0 <__sfp_lock_release>:
 800a2a0:	4801      	ldr	r0, [pc, #4]	; (800a2a8 <__sfp_lock_release+0x8>)
 800a2a2:	f000 b87f 	b.w	800a3a4 <__retarget_lock_release_recursive>
 800a2a6:	bf00      	nop
 800a2a8:	200006a1 	.word	0x200006a1

0800a2ac <__sinit>:
 800a2ac:	b510      	push	{r4, lr}
 800a2ae:	4604      	mov	r4, r0
 800a2b0:	f7ff fff0 	bl	800a294 <__sfp_lock_acquire>
 800a2b4:	6a23      	ldr	r3, [r4, #32]
 800a2b6:	b11b      	cbz	r3, 800a2c0 <__sinit+0x14>
 800a2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2bc:	f7ff bff0 	b.w	800a2a0 <__sfp_lock_release>
 800a2c0:	4b04      	ldr	r3, [pc, #16]	; (800a2d4 <__sinit+0x28>)
 800a2c2:	6223      	str	r3, [r4, #32]
 800a2c4:	4b04      	ldr	r3, [pc, #16]	; (800a2d8 <__sinit+0x2c>)
 800a2c6:	681b      	ldr	r3, [r3, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1f5      	bne.n	800a2b8 <__sinit+0xc>
 800a2cc:	f7ff ffc4 	bl	800a258 <global_stdio_init.part.0>
 800a2d0:	e7f2      	b.n	800a2b8 <__sinit+0xc>
 800a2d2:	bf00      	nop
 800a2d4:	0800a219 	.word	0x0800a219
 800a2d8:	2000069c 	.word	0x2000069c

0800a2dc <_fwalk_sglue>:
 800a2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2e0:	4607      	mov	r7, r0
 800a2e2:	4688      	mov	r8, r1
 800a2e4:	4614      	mov	r4, r2
 800a2e6:	2600      	movs	r6, #0
 800a2e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a2ec:	f1b9 0901 	subs.w	r9, r9, #1
 800a2f0:	d505      	bpl.n	800a2fe <_fwalk_sglue+0x22>
 800a2f2:	6824      	ldr	r4, [r4, #0]
 800a2f4:	2c00      	cmp	r4, #0
 800a2f6:	d1f7      	bne.n	800a2e8 <_fwalk_sglue+0xc>
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2fe:	89ab      	ldrh	r3, [r5, #12]
 800a300:	2b01      	cmp	r3, #1
 800a302:	d907      	bls.n	800a314 <_fwalk_sglue+0x38>
 800a304:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a308:	3301      	adds	r3, #1
 800a30a:	d003      	beq.n	800a314 <_fwalk_sglue+0x38>
 800a30c:	4629      	mov	r1, r5
 800a30e:	4638      	mov	r0, r7
 800a310:	47c0      	blx	r8
 800a312:	4306      	orrs	r6, r0
 800a314:	3568      	adds	r5, #104	; 0x68
 800a316:	e7e9      	b.n	800a2ec <_fwalk_sglue+0x10>

0800a318 <iprintf>:
 800a318:	b40f      	push	{r0, r1, r2, r3}
 800a31a:	b507      	push	{r0, r1, r2, lr}
 800a31c:	4906      	ldr	r1, [pc, #24]	; (800a338 <iprintf+0x20>)
 800a31e:	ab04      	add	r3, sp, #16
 800a320:	6808      	ldr	r0, [r1, #0]
 800a322:	f853 2b04 	ldr.w	r2, [r3], #4
 800a326:	6881      	ldr	r1, [r0, #8]
 800a328:	9301      	str	r3, [sp, #4]
 800a32a:	f000 f9bf 	bl	800a6ac <_vfiprintf_r>
 800a32e:	b003      	add	sp, #12
 800a330:	f85d eb04 	ldr.w	lr, [sp], #4
 800a334:	b004      	add	sp, #16
 800a336:	4770      	bx	lr
 800a338:	20000080 	.word	0x20000080

0800a33c <memset>:
 800a33c:	4402      	add	r2, r0
 800a33e:	4603      	mov	r3, r0
 800a340:	4293      	cmp	r3, r2
 800a342:	d100      	bne.n	800a346 <memset+0xa>
 800a344:	4770      	bx	lr
 800a346:	f803 1b01 	strb.w	r1, [r3], #1
 800a34a:	e7f9      	b.n	800a340 <memset+0x4>

0800a34c <__errno>:
 800a34c:	4b01      	ldr	r3, [pc, #4]	; (800a354 <__errno+0x8>)
 800a34e:	6818      	ldr	r0, [r3, #0]
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	20000080 	.word	0x20000080

0800a358 <__libc_init_array>:
 800a358:	b570      	push	{r4, r5, r6, lr}
 800a35a:	4d0d      	ldr	r5, [pc, #52]	; (800a390 <__libc_init_array+0x38>)
 800a35c:	4c0d      	ldr	r4, [pc, #52]	; (800a394 <__libc_init_array+0x3c>)
 800a35e:	1b64      	subs	r4, r4, r5
 800a360:	10a4      	asrs	r4, r4, #2
 800a362:	2600      	movs	r6, #0
 800a364:	42a6      	cmp	r6, r4
 800a366:	d109      	bne.n	800a37c <__libc_init_array+0x24>
 800a368:	4d0b      	ldr	r5, [pc, #44]	; (800a398 <__libc_init_array+0x40>)
 800a36a:	4c0c      	ldr	r4, [pc, #48]	; (800a39c <__libc_init_array+0x44>)
 800a36c:	f001 f800 	bl	800b370 <_init>
 800a370:	1b64      	subs	r4, r4, r5
 800a372:	10a4      	asrs	r4, r4, #2
 800a374:	2600      	movs	r6, #0
 800a376:	42a6      	cmp	r6, r4
 800a378:	d105      	bne.n	800a386 <__libc_init_array+0x2e>
 800a37a:	bd70      	pop	{r4, r5, r6, pc}
 800a37c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a380:	4798      	blx	r3
 800a382:	3601      	adds	r6, #1
 800a384:	e7ee      	b.n	800a364 <__libc_init_array+0xc>
 800a386:	f855 3b04 	ldr.w	r3, [r5], #4
 800a38a:	4798      	blx	r3
 800a38c:	3601      	adds	r6, #1
 800a38e:	e7f2      	b.n	800a376 <__libc_init_array+0x1e>
 800a390:	0800c040 	.word	0x0800c040
 800a394:	0800c040 	.word	0x0800c040
 800a398:	0800c040 	.word	0x0800c040
 800a39c:	0800c044 	.word	0x0800c044

0800a3a0 <__retarget_lock_init_recursive>:
 800a3a0:	4770      	bx	lr

0800a3a2 <__retarget_lock_acquire_recursive>:
 800a3a2:	4770      	bx	lr

0800a3a4 <__retarget_lock_release_recursive>:
 800a3a4:	4770      	bx	lr

0800a3a6 <__ssputs_r>:
 800a3a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3aa:	688e      	ldr	r6, [r1, #8]
 800a3ac:	461f      	mov	r7, r3
 800a3ae:	42be      	cmp	r6, r7
 800a3b0:	680b      	ldr	r3, [r1, #0]
 800a3b2:	4682      	mov	sl, r0
 800a3b4:	460c      	mov	r4, r1
 800a3b6:	4690      	mov	r8, r2
 800a3b8:	d82c      	bhi.n	800a414 <__ssputs_r+0x6e>
 800a3ba:	898a      	ldrh	r2, [r1, #12]
 800a3bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a3c0:	d026      	beq.n	800a410 <__ssputs_r+0x6a>
 800a3c2:	6965      	ldr	r5, [r4, #20]
 800a3c4:	6909      	ldr	r1, [r1, #16]
 800a3c6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a3ca:	eba3 0901 	sub.w	r9, r3, r1
 800a3ce:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a3d2:	1c7b      	adds	r3, r7, #1
 800a3d4:	444b      	add	r3, r9
 800a3d6:	106d      	asrs	r5, r5, #1
 800a3d8:	429d      	cmp	r5, r3
 800a3da:	bf38      	it	cc
 800a3dc:	461d      	movcc	r5, r3
 800a3de:	0553      	lsls	r3, r2, #21
 800a3e0:	d527      	bpl.n	800a432 <__ssputs_r+0x8c>
 800a3e2:	4629      	mov	r1, r5
 800a3e4:	f000 fa9c 	bl	800a920 <_malloc_r>
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	b360      	cbz	r0, 800a446 <__ssputs_r+0xa0>
 800a3ec:	6921      	ldr	r1, [r4, #16]
 800a3ee:	464a      	mov	r2, r9
 800a3f0:	f000 ff5c 	bl	800b2ac <memcpy>
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a3fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a3fe:	81a3      	strh	r3, [r4, #12]
 800a400:	6126      	str	r6, [r4, #16]
 800a402:	6165      	str	r5, [r4, #20]
 800a404:	444e      	add	r6, r9
 800a406:	eba5 0509 	sub.w	r5, r5, r9
 800a40a:	6026      	str	r6, [r4, #0]
 800a40c:	60a5      	str	r5, [r4, #8]
 800a40e:	463e      	mov	r6, r7
 800a410:	42be      	cmp	r6, r7
 800a412:	d900      	bls.n	800a416 <__ssputs_r+0x70>
 800a414:	463e      	mov	r6, r7
 800a416:	6820      	ldr	r0, [r4, #0]
 800a418:	4632      	mov	r2, r6
 800a41a:	4641      	mov	r1, r8
 800a41c:	f000 feb4 	bl	800b188 <memmove>
 800a420:	68a3      	ldr	r3, [r4, #8]
 800a422:	1b9b      	subs	r3, r3, r6
 800a424:	60a3      	str	r3, [r4, #8]
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	4433      	add	r3, r6
 800a42a:	6023      	str	r3, [r4, #0]
 800a42c:	2000      	movs	r0, #0
 800a42e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a432:	462a      	mov	r2, r5
 800a434:	f000 fd81 	bl	800af3a <_realloc_r>
 800a438:	4606      	mov	r6, r0
 800a43a:	2800      	cmp	r0, #0
 800a43c:	d1e0      	bne.n	800a400 <__ssputs_r+0x5a>
 800a43e:	6921      	ldr	r1, [r4, #16]
 800a440:	4650      	mov	r0, sl
 800a442:	f000 ff41 	bl	800b2c8 <_free_r>
 800a446:	230c      	movs	r3, #12
 800a448:	f8ca 3000 	str.w	r3, [sl]
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a452:	81a3      	strh	r3, [r4, #12]
 800a454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a458:	e7e9      	b.n	800a42e <__ssputs_r+0x88>
	...

0800a45c <_svfiprintf_r>:
 800a45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a460:	4698      	mov	r8, r3
 800a462:	898b      	ldrh	r3, [r1, #12]
 800a464:	061b      	lsls	r3, r3, #24
 800a466:	b09d      	sub	sp, #116	; 0x74
 800a468:	4607      	mov	r7, r0
 800a46a:	460d      	mov	r5, r1
 800a46c:	4614      	mov	r4, r2
 800a46e:	d50e      	bpl.n	800a48e <_svfiprintf_r+0x32>
 800a470:	690b      	ldr	r3, [r1, #16]
 800a472:	b963      	cbnz	r3, 800a48e <_svfiprintf_r+0x32>
 800a474:	2140      	movs	r1, #64	; 0x40
 800a476:	f000 fa53 	bl	800a920 <_malloc_r>
 800a47a:	6028      	str	r0, [r5, #0]
 800a47c:	6128      	str	r0, [r5, #16]
 800a47e:	b920      	cbnz	r0, 800a48a <_svfiprintf_r+0x2e>
 800a480:	230c      	movs	r3, #12
 800a482:	603b      	str	r3, [r7, #0]
 800a484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a488:	e0d0      	b.n	800a62c <_svfiprintf_r+0x1d0>
 800a48a:	2340      	movs	r3, #64	; 0x40
 800a48c:	616b      	str	r3, [r5, #20]
 800a48e:	2300      	movs	r3, #0
 800a490:	9309      	str	r3, [sp, #36]	; 0x24
 800a492:	2320      	movs	r3, #32
 800a494:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a498:	f8cd 800c 	str.w	r8, [sp, #12]
 800a49c:	2330      	movs	r3, #48	; 0x30
 800a49e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a644 <_svfiprintf_r+0x1e8>
 800a4a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a4a6:	f04f 0901 	mov.w	r9, #1
 800a4aa:	4623      	mov	r3, r4
 800a4ac:	469a      	mov	sl, r3
 800a4ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4b2:	b10a      	cbz	r2, 800a4b8 <_svfiprintf_r+0x5c>
 800a4b4:	2a25      	cmp	r2, #37	; 0x25
 800a4b6:	d1f9      	bne.n	800a4ac <_svfiprintf_r+0x50>
 800a4b8:	ebba 0b04 	subs.w	fp, sl, r4
 800a4bc:	d00b      	beq.n	800a4d6 <_svfiprintf_r+0x7a>
 800a4be:	465b      	mov	r3, fp
 800a4c0:	4622      	mov	r2, r4
 800a4c2:	4629      	mov	r1, r5
 800a4c4:	4638      	mov	r0, r7
 800a4c6:	f7ff ff6e 	bl	800a3a6 <__ssputs_r>
 800a4ca:	3001      	adds	r0, #1
 800a4cc:	f000 80a9 	beq.w	800a622 <_svfiprintf_r+0x1c6>
 800a4d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4d2:	445a      	add	r2, fp
 800a4d4:	9209      	str	r2, [sp, #36]	; 0x24
 800a4d6:	f89a 3000 	ldrb.w	r3, [sl]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	f000 80a1 	beq.w	800a622 <_svfiprintf_r+0x1c6>
 800a4e0:	2300      	movs	r3, #0
 800a4e2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a4e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a4ea:	f10a 0a01 	add.w	sl, sl, #1
 800a4ee:	9304      	str	r3, [sp, #16]
 800a4f0:	9307      	str	r3, [sp, #28]
 800a4f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a4f6:	931a      	str	r3, [sp, #104]	; 0x68
 800a4f8:	4654      	mov	r4, sl
 800a4fa:	2205      	movs	r2, #5
 800a4fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a500:	4850      	ldr	r0, [pc, #320]	; (800a644 <_svfiprintf_r+0x1e8>)
 800a502:	f7f5 fe65 	bl	80001d0 <memchr>
 800a506:	9a04      	ldr	r2, [sp, #16]
 800a508:	b9d8      	cbnz	r0, 800a542 <_svfiprintf_r+0xe6>
 800a50a:	06d0      	lsls	r0, r2, #27
 800a50c:	bf44      	itt	mi
 800a50e:	2320      	movmi	r3, #32
 800a510:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a514:	0711      	lsls	r1, r2, #28
 800a516:	bf44      	itt	mi
 800a518:	232b      	movmi	r3, #43	; 0x2b
 800a51a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a51e:	f89a 3000 	ldrb.w	r3, [sl]
 800a522:	2b2a      	cmp	r3, #42	; 0x2a
 800a524:	d015      	beq.n	800a552 <_svfiprintf_r+0xf6>
 800a526:	9a07      	ldr	r2, [sp, #28]
 800a528:	4654      	mov	r4, sl
 800a52a:	2000      	movs	r0, #0
 800a52c:	f04f 0c0a 	mov.w	ip, #10
 800a530:	4621      	mov	r1, r4
 800a532:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a536:	3b30      	subs	r3, #48	; 0x30
 800a538:	2b09      	cmp	r3, #9
 800a53a:	d94d      	bls.n	800a5d8 <_svfiprintf_r+0x17c>
 800a53c:	b1b0      	cbz	r0, 800a56c <_svfiprintf_r+0x110>
 800a53e:	9207      	str	r2, [sp, #28]
 800a540:	e014      	b.n	800a56c <_svfiprintf_r+0x110>
 800a542:	eba0 0308 	sub.w	r3, r0, r8
 800a546:	fa09 f303 	lsl.w	r3, r9, r3
 800a54a:	4313      	orrs	r3, r2
 800a54c:	9304      	str	r3, [sp, #16]
 800a54e:	46a2      	mov	sl, r4
 800a550:	e7d2      	b.n	800a4f8 <_svfiprintf_r+0x9c>
 800a552:	9b03      	ldr	r3, [sp, #12]
 800a554:	1d19      	adds	r1, r3, #4
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	9103      	str	r1, [sp, #12]
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	bfbb      	ittet	lt
 800a55e:	425b      	neglt	r3, r3
 800a560:	f042 0202 	orrlt.w	r2, r2, #2
 800a564:	9307      	strge	r3, [sp, #28]
 800a566:	9307      	strlt	r3, [sp, #28]
 800a568:	bfb8      	it	lt
 800a56a:	9204      	strlt	r2, [sp, #16]
 800a56c:	7823      	ldrb	r3, [r4, #0]
 800a56e:	2b2e      	cmp	r3, #46	; 0x2e
 800a570:	d10c      	bne.n	800a58c <_svfiprintf_r+0x130>
 800a572:	7863      	ldrb	r3, [r4, #1]
 800a574:	2b2a      	cmp	r3, #42	; 0x2a
 800a576:	d134      	bne.n	800a5e2 <_svfiprintf_r+0x186>
 800a578:	9b03      	ldr	r3, [sp, #12]
 800a57a:	1d1a      	adds	r2, r3, #4
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	9203      	str	r2, [sp, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	bfb8      	it	lt
 800a584:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a588:	3402      	adds	r4, #2
 800a58a:	9305      	str	r3, [sp, #20]
 800a58c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a654 <_svfiprintf_r+0x1f8>
 800a590:	7821      	ldrb	r1, [r4, #0]
 800a592:	2203      	movs	r2, #3
 800a594:	4650      	mov	r0, sl
 800a596:	f7f5 fe1b 	bl	80001d0 <memchr>
 800a59a:	b138      	cbz	r0, 800a5ac <_svfiprintf_r+0x150>
 800a59c:	9b04      	ldr	r3, [sp, #16]
 800a59e:	eba0 000a 	sub.w	r0, r0, sl
 800a5a2:	2240      	movs	r2, #64	; 0x40
 800a5a4:	4082      	lsls	r2, r0
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	3401      	adds	r4, #1
 800a5aa:	9304      	str	r3, [sp, #16]
 800a5ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5b0:	4825      	ldr	r0, [pc, #148]	; (800a648 <_svfiprintf_r+0x1ec>)
 800a5b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a5b6:	2206      	movs	r2, #6
 800a5b8:	f7f5 fe0a 	bl	80001d0 <memchr>
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d038      	beq.n	800a632 <_svfiprintf_r+0x1d6>
 800a5c0:	4b22      	ldr	r3, [pc, #136]	; (800a64c <_svfiprintf_r+0x1f0>)
 800a5c2:	bb1b      	cbnz	r3, 800a60c <_svfiprintf_r+0x1b0>
 800a5c4:	9b03      	ldr	r3, [sp, #12]
 800a5c6:	3307      	adds	r3, #7
 800a5c8:	f023 0307 	bic.w	r3, r3, #7
 800a5cc:	3308      	adds	r3, #8
 800a5ce:	9303      	str	r3, [sp, #12]
 800a5d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5d2:	4433      	add	r3, r6
 800a5d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a5d6:	e768      	b.n	800a4aa <_svfiprintf_r+0x4e>
 800a5d8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a5dc:	460c      	mov	r4, r1
 800a5de:	2001      	movs	r0, #1
 800a5e0:	e7a6      	b.n	800a530 <_svfiprintf_r+0xd4>
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	3401      	adds	r4, #1
 800a5e6:	9305      	str	r3, [sp, #20]
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	f04f 0c0a 	mov.w	ip, #10
 800a5ee:	4620      	mov	r0, r4
 800a5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a5f4:	3a30      	subs	r2, #48	; 0x30
 800a5f6:	2a09      	cmp	r2, #9
 800a5f8:	d903      	bls.n	800a602 <_svfiprintf_r+0x1a6>
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d0c6      	beq.n	800a58c <_svfiprintf_r+0x130>
 800a5fe:	9105      	str	r1, [sp, #20]
 800a600:	e7c4      	b.n	800a58c <_svfiprintf_r+0x130>
 800a602:	fb0c 2101 	mla	r1, ip, r1, r2
 800a606:	4604      	mov	r4, r0
 800a608:	2301      	movs	r3, #1
 800a60a:	e7f0      	b.n	800a5ee <_svfiprintf_r+0x192>
 800a60c:	ab03      	add	r3, sp, #12
 800a60e:	9300      	str	r3, [sp, #0]
 800a610:	462a      	mov	r2, r5
 800a612:	4b0f      	ldr	r3, [pc, #60]	; (800a650 <_svfiprintf_r+0x1f4>)
 800a614:	a904      	add	r1, sp, #16
 800a616:	4638      	mov	r0, r7
 800a618:	f3af 8000 	nop.w
 800a61c:	1c42      	adds	r2, r0, #1
 800a61e:	4606      	mov	r6, r0
 800a620:	d1d6      	bne.n	800a5d0 <_svfiprintf_r+0x174>
 800a622:	89ab      	ldrh	r3, [r5, #12]
 800a624:	065b      	lsls	r3, r3, #25
 800a626:	f53f af2d 	bmi.w	800a484 <_svfiprintf_r+0x28>
 800a62a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a62c:	b01d      	add	sp, #116	; 0x74
 800a62e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a632:	ab03      	add	r3, sp, #12
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	462a      	mov	r2, r5
 800a638:	4b05      	ldr	r3, [pc, #20]	; (800a650 <_svfiprintf_r+0x1f4>)
 800a63a:	a904      	add	r1, sp, #16
 800a63c:	4638      	mov	r0, r7
 800a63e:	f000 fa5d 	bl	800aafc <_printf_i>
 800a642:	e7eb      	b.n	800a61c <_svfiprintf_r+0x1c0>
 800a644:	0800c003 	.word	0x0800c003
 800a648:	0800c00d 	.word	0x0800c00d
 800a64c:	00000000 	.word	0x00000000
 800a650:	0800a3a7 	.word	0x0800a3a7
 800a654:	0800c009 	.word	0x0800c009

0800a658 <__sfputc_r>:
 800a658:	6893      	ldr	r3, [r2, #8]
 800a65a:	3b01      	subs	r3, #1
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	b410      	push	{r4}
 800a660:	6093      	str	r3, [r2, #8]
 800a662:	da08      	bge.n	800a676 <__sfputc_r+0x1e>
 800a664:	6994      	ldr	r4, [r2, #24]
 800a666:	42a3      	cmp	r3, r4
 800a668:	db01      	blt.n	800a66e <__sfputc_r+0x16>
 800a66a:	290a      	cmp	r1, #10
 800a66c:	d103      	bne.n	800a676 <__sfputc_r+0x1e>
 800a66e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a672:	f000 bc91 	b.w	800af98 <__swbuf_r>
 800a676:	6813      	ldr	r3, [r2, #0]
 800a678:	1c58      	adds	r0, r3, #1
 800a67a:	6010      	str	r0, [r2, #0]
 800a67c:	7019      	strb	r1, [r3, #0]
 800a67e:	4608      	mov	r0, r1
 800a680:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <__sfputs_r>:
 800a686:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a688:	4606      	mov	r6, r0
 800a68a:	460f      	mov	r7, r1
 800a68c:	4614      	mov	r4, r2
 800a68e:	18d5      	adds	r5, r2, r3
 800a690:	42ac      	cmp	r4, r5
 800a692:	d101      	bne.n	800a698 <__sfputs_r+0x12>
 800a694:	2000      	movs	r0, #0
 800a696:	e007      	b.n	800a6a8 <__sfputs_r+0x22>
 800a698:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a69c:	463a      	mov	r2, r7
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f7ff ffda 	bl	800a658 <__sfputc_r>
 800a6a4:	1c43      	adds	r3, r0, #1
 800a6a6:	d1f3      	bne.n	800a690 <__sfputs_r+0xa>
 800a6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a6ac <_vfiprintf_r>:
 800a6ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6b0:	460d      	mov	r5, r1
 800a6b2:	b09d      	sub	sp, #116	; 0x74
 800a6b4:	4614      	mov	r4, r2
 800a6b6:	4698      	mov	r8, r3
 800a6b8:	4606      	mov	r6, r0
 800a6ba:	b118      	cbz	r0, 800a6c4 <_vfiprintf_r+0x18>
 800a6bc:	6a03      	ldr	r3, [r0, #32]
 800a6be:	b90b      	cbnz	r3, 800a6c4 <_vfiprintf_r+0x18>
 800a6c0:	f7ff fdf4 	bl	800a2ac <__sinit>
 800a6c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6c6:	07d9      	lsls	r1, r3, #31
 800a6c8:	d405      	bmi.n	800a6d6 <_vfiprintf_r+0x2a>
 800a6ca:	89ab      	ldrh	r3, [r5, #12]
 800a6cc:	059a      	lsls	r2, r3, #22
 800a6ce:	d402      	bmi.n	800a6d6 <_vfiprintf_r+0x2a>
 800a6d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6d2:	f7ff fe66 	bl	800a3a2 <__retarget_lock_acquire_recursive>
 800a6d6:	89ab      	ldrh	r3, [r5, #12]
 800a6d8:	071b      	lsls	r3, r3, #28
 800a6da:	d501      	bpl.n	800a6e0 <_vfiprintf_r+0x34>
 800a6dc:	692b      	ldr	r3, [r5, #16]
 800a6de:	b99b      	cbnz	r3, 800a708 <_vfiprintf_r+0x5c>
 800a6e0:	4629      	mov	r1, r5
 800a6e2:	4630      	mov	r0, r6
 800a6e4:	f000 fc96 	bl	800b014 <__swsetup_r>
 800a6e8:	b170      	cbz	r0, 800a708 <_vfiprintf_r+0x5c>
 800a6ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6ec:	07dc      	lsls	r4, r3, #31
 800a6ee:	d504      	bpl.n	800a6fa <_vfiprintf_r+0x4e>
 800a6f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a6f4:	b01d      	add	sp, #116	; 0x74
 800a6f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6fa:	89ab      	ldrh	r3, [r5, #12]
 800a6fc:	0598      	lsls	r0, r3, #22
 800a6fe:	d4f7      	bmi.n	800a6f0 <_vfiprintf_r+0x44>
 800a700:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a702:	f7ff fe4f 	bl	800a3a4 <__retarget_lock_release_recursive>
 800a706:	e7f3      	b.n	800a6f0 <_vfiprintf_r+0x44>
 800a708:	2300      	movs	r3, #0
 800a70a:	9309      	str	r3, [sp, #36]	; 0x24
 800a70c:	2320      	movs	r3, #32
 800a70e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a712:	f8cd 800c 	str.w	r8, [sp, #12]
 800a716:	2330      	movs	r3, #48	; 0x30
 800a718:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a8cc <_vfiprintf_r+0x220>
 800a71c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a720:	f04f 0901 	mov.w	r9, #1
 800a724:	4623      	mov	r3, r4
 800a726:	469a      	mov	sl, r3
 800a728:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a72c:	b10a      	cbz	r2, 800a732 <_vfiprintf_r+0x86>
 800a72e:	2a25      	cmp	r2, #37	; 0x25
 800a730:	d1f9      	bne.n	800a726 <_vfiprintf_r+0x7a>
 800a732:	ebba 0b04 	subs.w	fp, sl, r4
 800a736:	d00b      	beq.n	800a750 <_vfiprintf_r+0xa4>
 800a738:	465b      	mov	r3, fp
 800a73a:	4622      	mov	r2, r4
 800a73c:	4629      	mov	r1, r5
 800a73e:	4630      	mov	r0, r6
 800a740:	f7ff ffa1 	bl	800a686 <__sfputs_r>
 800a744:	3001      	adds	r0, #1
 800a746:	f000 80a9 	beq.w	800a89c <_vfiprintf_r+0x1f0>
 800a74a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a74c:	445a      	add	r2, fp
 800a74e:	9209      	str	r2, [sp, #36]	; 0x24
 800a750:	f89a 3000 	ldrb.w	r3, [sl]
 800a754:	2b00      	cmp	r3, #0
 800a756:	f000 80a1 	beq.w	800a89c <_vfiprintf_r+0x1f0>
 800a75a:	2300      	movs	r3, #0
 800a75c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a760:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a764:	f10a 0a01 	add.w	sl, sl, #1
 800a768:	9304      	str	r3, [sp, #16]
 800a76a:	9307      	str	r3, [sp, #28]
 800a76c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a770:	931a      	str	r3, [sp, #104]	; 0x68
 800a772:	4654      	mov	r4, sl
 800a774:	2205      	movs	r2, #5
 800a776:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a77a:	4854      	ldr	r0, [pc, #336]	; (800a8cc <_vfiprintf_r+0x220>)
 800a77c:	f7f5 fd28 	bl	80001d0 <memchr>
 800a780:	9a04      	ldr	r2, [sp, #16]
 800a782:	b9d8      	cbnz	r0, 800a7bc <_vfiprintf_r+0x110>
 800a784:	06d1      	lsls	r1, r2, #27
 800a786:	bf44      	itt	mi
 800a788:	2320      	movmi	r3, #32
 800a78a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a78e:	0713      	lsls	r3, r2, #28
 800a790:	bf44      	itt	mi
 800a792:	232b      	movmi	r3, #43	; 0x2b
 800a794:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a798:	f89a 3000 	ldrb.w	r3, [sl]
 800a79c:	2b2a      	cmp	r3, #42	; 0x2a
 800a79e:	d015      	beq.n	800a7cc <_vfiprintf_r+0x120>
 800a7a0:	9a07      	ldr	r2, [sp, #28]
 800a7a2:	4654      	mov	r4, sl
 800a7a4:	2000      	movs	r0, #0
 800a7a6:	f04f 0c0a 	mov.w	ip, #10
 800a7aa:	4621      	mov	r1, r4
 800a7ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a7b0:	3b30      	subs	r3, #48	; 0x30
 800a7b2:	2b09      	cmp	r3, #9
 800a7b4:	d94d      	bls.n	800a852 <_vfiprintf_r+0x1a6>
 800a7b6:	b1b0      	cbz	r0, 800a7e6 <_vfiprintf_r+0x13a>
 800a7b8:	9207      	str	r2, [sp, #28]
 800a7ba:	e014      	b.n	800a7e6 <_vfiprintf_r+0x13a>
 800a7bc:	eba0 0308 	sub.w	r3, r0, r8
 800a7c0:	fa09 f303 	lsl.w	r3, r9, r3
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	9304      	str	r3, [sp, #16]
 800a7c8:	46a2      	mov	sl, r4
 800a7ca:	e7d2      	b.n	800a772 <_vfiprintf_r+0xc6>
 800a7cc:	9b03      	ldr	r3, [sp, #12]
 800a7ce:	1d19      	adds	r1, r3, #4
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	9103      	str	r1, [sp, #12]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	bfbb      	ittet	lt
 800a7d8:	425b      	neglt	r3, r3
 800a7da:	f042 0202 	orrlt.w	r2, r2, #2
 800a7de:	9307      	strge	r3, [sp, #28]
 800a7e0:	9307      	strlt	r3, [sp, #28]
 800a7e2:	bfb8      	it	lt
 800a7e4:	9204      	strlt	r2, [sp, #16]
 800a7e6:	7823      	ldrb	r3, [r4, #0]
 800a7e8:	2b2e      	cmp	r3, #46	; 0x2e
 800a7ea:	d10c      	bne.n	800a806 <_vfiprintf_r+0x15a>
 800a7ec:	7863      	ldrb	r3, [r4, #1]
 800a7ee:	2b2a      	cmp	r3, #42	; 0x2a
 800a7f0:	d134      	bne.n	800a85c <_vfiprintf_r+0x1b0>
 800a7f2:	9b03      	ldr	r3, [sp, #12]
 800a7f4:	1d1a      	adds	r2, r3, #4
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	9203      	str	r2, [sp, #12]
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	bfb8      	it	lt
 800a7fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800a802:	3402      	adds	r4, #2
 800a804:	9305      	str	r3, [sp, #20]
 800a806:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a8dc <_vfiprintf_r+0x230>
 800a80a:	7821      	ldrb	r1, [r4, #0]
 800a80c:	2203      	movs	r2, #3
 800a80e:	4650      	mov	r0, sl
 800a810:	f7f5 fcde 	bl	80001d0 <memchr>
 800a814:	b138      	cbz	r0, 800a826 <_vfiprintf_r+0x17a>
 800a816:	9b04      	ldr	r3, [sp, #16]
 800a818:	eba0 000a 	sub.w	r0, r0, sl
 800a81c:	2240      	movs	r2, #64	; 0x40
 800a81e:	4082      	lsls	r2, r0
 800a820:	4313      	orrs	r3, r2
 800a822:	3401      	adds	r4, #1
 800a824:	9304      	str	r3, [sp, #16]
 800a826:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a82a:	4829      	ldr	r0, [pc, #164]	; (800a8d0 <_vfiprintf_r+0x224>)
 800a82c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a830:	2206      	movs	r2, #6
 800a832:	f7f5 fccd 	bl	80001d0 <memchr>
 800a836:	2800      	cmp	r0, #0
 800a838:	d03f      	beq.n	800a8ba <_vfiprintf_r+0x20e>
 800a83a:	4b26      	ldr	r3, [pc, #152]	; (800a8d4 <_vfiprintf_r+0x228>)
 800a83c:	bb1b      	cbnz	r3, 800a886 <_vfiprintf_r+0x1da>
 800a83e:	9b03      	ldr	r3, [sp, #12]
 800a840:	3307      	adds	r3, #7
 800a842:	f023 0307 	bic.w	r3, r3, #7
 800a846:	3308      	adds	r3, #8
 800a848:	9303      	str	r3, [sp, #12]
 800a84a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a84c:	443b      	add	r3, r7
 800a84e:	9309      	str	r3, [sp, #36]	; 0x24
 800a850:	e768      	b.n	800a724 <_vfiprintf_r+0x78>
 800a852:	fb0c 3202 	mla	r2, ip, r2, r3
 800a856:	460c      	mov	r4, r1
 800a858:	2001      	movs	r0, #1
 800a85a:	e7a6      	b.n	800a7aa <_vfiprintf_r+0xfe>
 800a85c:	2300      	movs	r3, #0
 800a85e:	3401      	adds	r4, #1
 800a860:	9305      	str	r3, [sp, #20]
 800a862:	4619      	mov	r1, r3
 800a864:	f04f 0c0a 	mov.w	ip, #10
 800a868:	4620      	mov	r0, r4
 800a86a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a86e:	3a30      	subs	r2, #48	; 0x30
 800a870:	2a09      	cmp	r2, #9
 800a872:	d903      	bls.n	800a87c <_vfiprintf_r+0x1d0>
 800a874:	2b00      	cmp	r3, #0
 800a876:	d0c6      	beq.n	800a806 <_vfiprintf_r+0x15a>
 800a878:	9105      	str	r1, [sp, #20]
 800a87a:	e7c4      	b.n	800a806 <_vfiprintf_r+0x15a>
 800a87c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a880:	4604      	mov	r4, r0
 800a882:	2301      	movs	r3, #1
 800a884:	e7f0      	b.n	800a868 <_vfiprintf_r+0x1bc>
 800a886:	ab03      	add	r3, sp, #12
 800a888:	9300      	str	r3, [sp, #0]
 800a88a:	462a      	mov	r2, r5
 800a88c:	4b12      	ldr	r3, [pc, #72]	; (800a8d8 <_vfiprintf_r+0x22c>)
 800a88e:	a904      	add	r1, sp, #16
 800a890:	4630      	mov	r0, r6
 800a892:	f3af 8000 	nop.w
 800a896:	4607      	mov	r7, r0
 800a898:	1c78      	adds	r0, r7, #1
 800a89a:	d1d6      	bne.n	800a84a <_vfiprintf_r+0x19e>
 800a89c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a89e:	07d9      	lsls	r1, r3, #31
 800a8a0:	d405      	bmi.n	800a8ae <_vfiprintf_r+0x202>
 800a8a2:	89ab      	ldrh	r3, [r5, #12]
 800a8a4:	059a      	lsls	r2, r3, #22
 800a8a6:	d402      	bmi.n	800a8ae <_vfiprintf_r+0x202>
 800a8a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a8aa:	f7ff fd7b 	bl	800a3a4 <__retarget_lock_release_recursive>
 800a8ae:	89ab      	ldrh	r3, [r5, #12]
 800a8b0:	065b      	lsls	r3, r3, #25
 800a8b2:	f53f af1d 	bmi.w	800a6f0 <_vfiprintf_r+0x44>
 800a8b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a8b8:	e71c      	b.n	800a6f4 <_vfiprintf_r+0x48>
 800a8ba:	ab03      	add	r3, sp, #12
 800a8bc:	9300      	str	r3, [sp, #0]
 800a8be:	462a      	mov	r2, r5
 800a8c0:	4b05      	ldr	r3, [pc, #20]	; (800a8d8 <_vfiprintf_r+0x22c>)
 800a8c2:	a904      	add	r1, sp, #16
 800a8c4:	4630      	mov	r0, r6
 800a8c6:	f000 f919 	bl	800aafc <_printf_i>
 800a8ca:	e7e4      	b.n	800a896 <_vfiprintf_r+0x1ea>
 800a8cc:	0800c003 	.word	0x0800c003
 800a8d0:	0800c00d 	.word	0x0800c00d
 800a8d4:	00000000 	.word	0x00000000
 800a8d8:	0800a687 	.word	0x0800a687
 800a8dc:	0800c009 	.word	0x0800c009

0800a8e0 <sbrk_aligned>:
 800a8e0:	b570      	push	{r4, r5, r6, lr}
 800a8e2:	4e0e      	ldr	r6, [pc, #56]	; (800a91c <sbrk_aligned+0x3c>)
 800a8e4:	460c      	mov	r4, r1
 800a8e6:	6831      	ldr	r1, [r6, #0]
 800a8e8:	4605      	mov	r5, r0
 800a8ea:	b911      	cbnz	r1, 800a8f2 <sbrk_aligned+0x12>
 800a8ec:	f000 fcbc 	bl	800b268 <_sbrk_r>
 800a8f0:	6030      	str	r0, [r6, #0]
 800a8f2:	4621      	mov	r1, r4
 800a8f4:	4628      	mov	r0, r5
 800a8f6:	f000 fcb7 	bl	800b268 <_sbrk_r>
 800a8fa:	1c43      	adds	r3, r0, #1
 800a8fc:	d00a      	beq.n	800a914 <sbrk_aligned+0x34>
 800a8fe:	1cc4      	adds	r4, r0, #3
 800a900:	f024 0403 	bic.w	r4, r4, #3
 800a904:	42a0      	cmp	r0, r4
 800a906:	d007      	beq.n	800a918 <sbrk_aligned+0x38>
 800a908:	1a21      	subs	r1, r4, r0
 800a90a:	4628      	mov	r0, r5
 800a90c:	f000 fcac 	bl	800b268 <_sbrk_r>
 800a910:	3001      	adds	r0, #1
 800a912:	d101      	bne.n	800a918 <sbrk_aligned+0x38>
 800a914:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800a918:	4620      	mov	r0, r4
 800a91a:	bd70      	pop	{r4, r5, r6, pc}
 800a91c:	200006a8 	.word	0x200006a8

0800a920 <_malloc_r>:
 800a920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a924:	1ccd      	adds	r5, r1, #3
 800a926:	f025 0503 	bic.w	r5, r5, #3
 800a92a:	3508      	adds	r5, #8
 800a92c:	2d0c      	cmp	r5, #12
 800a92e:	bf38      	it	cc
 800a930:	250c      	movcc	r5, #12
 800a932:	2d00      	cmp	r5, #0
 800a934:	4607      	mov	r7, r0
 800a936:	db01      	blt.n	800a93c <_malloc_r+0x1c>
 800a938:	42a9      	cmp	r1, r5
 800a93a:	d905      	bls.n	800a948 <_malloc_r+0x28>
 800a93c:	230c      	movs	r3, #12
 800a93e:	603b      	str	r3, [r7, #0]
 800a940:	2600      	movs	r6, #0
 800a942:	4630      	mov	r0, r6
 800a944:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a948:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aa1c <_malloc_r+0xfc>
 800a94c:	f000 faa6 	bl	800ae9c <__malloc_lock>
 800a950:	f8d8 3000 	ldr.w	r3, [r8]
 800a954:	461c      	mov	r4, r3
 800a956:	bb5c      	cbnz	r4, 800a9b0 <_malloc_r+0x90>
 800a958:	4629      	mov	r1, r5
 800a95a:	4638      	mov	r0, r7
 800a95c:	f7ff ffc0 	bl	800a8e0 <sbrk_aligned>
 800a960:	1c43      	adds	r3, r0, #1
 800a962:	4604      	mov	r4, r0
 800a964:	d155      	bne.n	800aa12 <_malloc_r+0xf2>
 800a966:	f8d8 4000 	ldr.w	r4, [r8]
 800a96a:	4626      	mov	r6, r4
 800a96c:	2e00      	cmp	r6, #0
 800a96e:	d145      	bne.n	800a9fc <_malloc_r+0xdc>
 800a970:	2c00      	cmp	r4, #0
 800a972:	d048      	beq.n	800aa06 <_malloc_r+0xe6>
 800a974:	6823      	ldr	r3, [r4, #0]
 800a976:	4631      	mov	r1, r6
 800a978:	4638      	mov	r0, r7
 800a97a:	eb04 0903 	add.w	r9, r4, r3
 800a97e:	f000 fc73 	bl	800b268 <_sbrk_r>
 800a982:	4581      	cmp	r9, r0
 800a984:	d13f      	bne.n	800aa06 <_malloc_r+0xe6>
 800a986:	6821      	ldr	r1, [r4, #0]
 800a988:	1a6d      	subs	r5, r5, r1
 800a98a:	4629      	mov	r1, r5
 800a98c:	4638      	mov	r0, r7
 800a98e:	f7ff ffa7 	bl	800a8e0 <sbrk_aligned>
 800a992:	3001      	adds	r0, #1
 800a994:	d037      	beq.n	800aa06 <_malloc_r+0xe6>
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	442b      	add	r3, r5
 800a99a:	6023      	str	r3, [r4, #0]
 800a99c:	f8d8 3000 	ldr.w	r3, [r8]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d038      	beq.n	800aa16 <_malloc_r+0xf6>
 800a9a4:	685a      	ldr	r2, [r3, #4]
 800a9a6:	42a2      	cmp	r2, r4
 800a9a8:	d12b      	bne.n	800aa02 <_malloc_r+0xe2>
 800a9aa:	2200      	movs	r2, #0
 800a9ac:	605a      	str	r2, [r3, #4]
 800a9ae:	e00f      	b.n	800a9d0 <_malloc_r+0xb0>
 800a9b0:	6822      	ldr	r2, [r4, #0]
 800a9b2:	1b52      	subs	r2, r2, r5
 800a9b4:	d41f      	bmi.n	800a9f6 <_malloc_r+0xd6>
 800a9b6:	2a0b      	cmp	r2, #11
 800a9b8:	d917      	bls.n	800a9ea <_malloc_r+0xca>
 800a9ba:	1961      	adds	r1, r4, r5
 800a9bc:	42a3      	cmp	r3, r4
 800a9be:	6025      	str	r5, [r4, #0]
 800a9c0:	bf18      	it	ne
 800a9c2:	6059      	strne	r1, [r3, #4]
 800a9c4:	6863      	ldr	r3, [r4, #4]
 800a9c6:	bf08      	it	eq
 800a9c8:	f8c8 1000 	streq.w	r1, [r8]
 800a9cc:	5162      	str	r2, [r4, r5]
 800a9ce:	604b      	str	r3, [r1, #4]
 800a9d0:	4638      	mov	r0, r7
 800a9d2:	f104 060b 	add.w	r6, r4, #11
 800a9d6:	f000 fa67 	bl	800aea8 <__malloc_unlock>
 800a9da:	f026 0607 	bic.w	r6, r6, #7
 800a9de:	1d23      	adds	r3, r4, #4
 800a9e0:	1af2      	subs	r2, r6, r3
 800a9e2:	d0ae      	beq.n	800a942 <_malloc_r+0x22>
 800a9e4:	1b9b      	subs	r3, r3, r6
 800a9e6:	50a3      	str	r3, [r4, r2]
 800a9e8:	e7ab      	b.n	800a942 <_malloc_r+0x22>
 800a9ea:	42a3      	cmp	r3, r4
 800a9ec:	6862      	ldr	r2, [r4, #4]
 800a9ee:	d1dd      	bne.n	800a9ac <_malloc_r+0x8c>
 800a9f0:	f8c8 2000 	str.w	r2, [r8]
 800a9f4:	e7ec      	b.n	800a9d0 <_malloc_r+0xb0>
 800a9f6:	4623      	mov	r3, r4
 800a9f8:	6864      	ldr	r4, [r4, #4]
 800a9fa:	e7ac      	b.n	800a956 <_malloc_r+0x36>
 800a9fc:	4634      	mov	r4, r6
 800a9fe:	6876      	ldr	r6, [r6, #4]
 800aa00:	e7b4      	b.n	800a96c <_malloc_r+0x4c>
 800aa02:	4613      	mov	r3, r2
 800aa04:	e7cc      	b.n	800a9a0 <_malloc_r+0x80>
 800aa06:	230c      	movs	r3, #12
 800aa08:	603b      	str	r3, [r7, #0]
 800aa0a:	4638      	mov	r0, r7
 800aa0c:	f000 fa4c 	bl	800aea8 <__malloc_unlock>
 800aa10:	e797      	b.n	800a942 <_malloc_r+0x22>
 800aa12:	6025      	str	r5, [r4, #0]
 800aa14:	e7dc      	b.n	800a9d0 <_malloc_r+0xb0>
 800aa16:	605b      	str	r3, [r3, #4]
 800aa18:	deff      	udf	#255	; 0xff
 800aa1a:	bf00      	nop
 800aa1c:	200006a4 	.word	0x200006a4

0800aa20 <_printf_common>:
 800aa20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa24:	4616      	mov	r6, r2
 800aa26:	4699      	mov	r9, r3
 800aa28:	688a      	ldr	r2, [r1, #8]
 800aa2a:	690b      	ldr	r3, [r1, #16]
 800aa2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aa30:	4293      	cmp	r3, r2
 800aa32:	bfb8      	it	lt
 800aa34:	4613      	movlt	r3, r2
 800aa36:	6033      	str	r3, [r6, #0]
 800aa38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aa3c:	4607      	mov	r7, r0
 800aa3e:	460c      	mov	r4, r1
 800aa40:	b10a      	cbz	r2, 800aa46 <_printf_common+0x26>
 800aa42:	3301      	adds	r3, #1
 800aa44:	6033      	str	r3, [r6, #0]
 800aa46:	6823      	ldr	r3, [r4, #0]
 800aa48:	0699      	lsls	r1, r3, #26
 800aa4a:	bf42      	ittt	mi
 800aa4c:	6833      	ldrmi	r3, [r6, #0]
 800aa4e:	3302      	addmi	r3, #2
 800aa50:	6033      	strmi	r3, [r6, #0]
 800aa52:	6825      	ldr	r5, [r4, #0]
 800aa54:	f015 0506 	ands.w	r5, r5, #6
 800aa58:	d106      	bne.n	800aa68 <_printf_common+0x48>
 800aa5a:	f104 0a19 	add.w	sl, r4, #25
 800aa5e:	68e3      	ldr	r3, [r4, #12]
 800aa60:	6832      	ldr	r2, [r6, #0]
 800aa62:	1a9b      	subs	r3, r3, r2
 800aa64:	42ab      	cmp	r3, r5
 800aa66:	dc26      	bgt.n	800aab6 <_printf_common+0x96>
 800aa68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aa6c:	1e13      	subs	r3, r2, #0
 800aa6e:	6822      	ldr	r2, [r4, #0]
 800aa70:	bf18      	it	ne
 800aa72:	2301      	movne	r3, #1
 800aa74:	0692      	lsls	r2, r2, #26
 800aa76:	d42b      	bmi.n	800aad0 <_printf_common+0xb0>
 800aa78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aa7c:	4649      	mov	r1, r9
 800aa7e:	4638      	mov	r0, r7
 800aa80:	47c0      	blx	r8
 800aa82:	3001      	adds	r0, #1
 800aa84:	d01e      	beq.n	800aac4 <_printf_common+0xa4>
 800aa86:	6823      	ldr	r3, [r4, #0]
 800aa88:	6922      	ldr	r2, [r4, #16]
 800aa8a:	f003 0306 	and.w	r3, r3, #6
 800aa8e:	2b04      	cmp	r3, #4
 800aa90:	bf02      	ittt	eq
 800aa92:	68e5      	ldreq	r5, [r4, #12]
 800aa94:	6833      	ldreq	r3, [r6, #0]
 800aa96:	1aed      	subeq	r5, r5, r3
 800aa98:	68a3      	ldr	r3, [r4, #8]
 800aa9a:	bf0c      	ite	eq
 800aa9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aaa0:	2500      	movne	r5, #0
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	bfc4      	itt	gt
 800aaa6:	1a9b      	subgt	r3, r3, r2
 800aaa8:	18ed      	addgt	r5, r5, r3
 800aaaa:	2600      	movs	r6, #0
 800aaac:	341a      	adds	r4, #26
 800aaae:	42b5      	cmp	r5, r6
 800aab0:	d11a      	bne.n	800aae8 <_printf_common+0xc8>
 800aab2:	2000      	movs	r0, #0
 800aab4:	e008      	b.n	800aac8 <_printf_common+0xa8>
 800aab6:	2301      	movs	r3, #1
 800aab8:	4652      	mov	r2, sl
 800aaba:	4649      	mov	r1, r9
 800aabc:	4638      	mov	r0, r7
 800aabe:	47c0      	blx	r8
 800aac0:	3001      	adds	r0, #1
 800aac2:	d103      	bne.n	800aacc <_printf_common+0xac>
 800aac4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aacc:	3501      	adds	r5, #1
 800aace:	e7c6      	b.n	800aa5e <_printf_common+0x3e>
 800aad0:	18e1      	adds	r1, r4, r3
 800aad2:	1c5a      	adds	r2, r3, #1
 800aad4:	2030      	movs	r0, #48	; 0x30
 800aad6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aada:	4422      	add	r2, r4
 800aadc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800aae0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800aae4:	3302      	adds	r3, #2
 800aae6:	e7c7      	b.n	800aa78 <_printf_common+0x58>
 800aae8:	2301      	movs	r3, #1
 800aaea:	4622      	mov	r2, r4
 800aaec:	4649      	mov	r1, r9
 800aaee:	4638      	mov	r0, r7
 800aaf0:	47c0      	blx	r8
 800aaf2:	3001      	adds	r0, #1
 800aaf4:	d0e6      	beq.n	800aac4 <_printf_common+0xa4>
 800aaf6:	3601      	adds	r6, #1
 800aaf8:	e7d9      	b.n	800aaae <_printf_common+0x8e>
	...

0800aafc <_printf_i>:
 800aafc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab00:	7e0f      	ldrb	r7, [r1, #24]
 800ab02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab04:	2f78      	cmp	r7, #120	; 0x78
 800ab06:	4691      	mov	r9, r2
 800ab08:	4680      	mov	r8, r0
 800ab0a:	460c      	mov	r4, r1
 800ab0c:	469a      	mov	sl, r3
 800ab0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab12:	d807      	bhi.n	800ab24 <_printf_i+0x28>
 800ab14:	2f62      	cmp	r7, #98	; 0x62
 800ab16:	d80a      	bhi.n	800ab2e <_printf_i+0x32>
 800ab18:	2f00      	cmp	r7, #0
 800ab1a:	f000 80d4 	beq.w	800acc6 <_printf_i+0x1ca>
 800ab1e:	2f58      	cmp	r7, #88	; 0x58
 800ab20:	f000 80c0 	beq.w	800aca4 <_printf_i+0x1a8>
 800ab24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ab28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ab2c:	e03a      	b.n	800aba4 <_printf_i+0xa8>
 800ab2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ab32:	2b15      	cmp	r3, #21
 800ab34:	d8f6      	bhi.n	800ab24 <_printf_i+0x28>
 800ab36:	a101      	add	r1, pc, #4	; (adr r1, 800ab3c <_printf_i+0x40>)
 800ab38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ab3c:	0800ab95 	.word	0x0800ab95
 800ab40:	0800aba9 	.word	0x0800aba9
 800ab44:	0800ab25 	.word	0x0800ab25
 800ab48:	0800ab25 	.word	0x0800ab25
 800ab4c:	0800ab25 	.word	0x0800ab25
 800ab50:	0800ab25 	.word	0x0800ab25
 800ab54:	0800aba9 	.word	0x0800aba9
 800ab58:	0800ab25 	.word	0x0800ab25
 800ab5c:	0800ab25 	.word	0x0800ab25
 800ab60:	0800ab25 	.word	0x0800ab25
 800ab64:	0800ab25 	.word	0x0800ab25
 800ab68:	0800acad 	.word	0x0800acad
 800ab6c:	0800abd5 	.word	0x0800abd5
 800ab70:	0800ac67 	.word	0x0800ac67
 800ab74:	0800ab25 	.word	0x0800ab25
 800ab78:	0800ab25 	.word	0x0800ab25
 800ab7c:	0800accf 	.word	0x0800accf
 800ab80:	0800ab25 	.word	0x0800ab25
 800ab84:	0800abd5 	.word	0x0800abd5
 800ab88:	0800ab25 	.word	0x0800ab25
 800ab8c:	0800ab25 	.word	0x0800ab25
 800ab90:	0800ac6f 	.word	0x0800ac6f
 800ab94:	682b      	ldr	r3, [r5, #0]
 800ab96:	1d1a      	adds	r2, r3, #4
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	602a      	str	r2, [r5, #0]
 800ab9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aba0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aba4:	2301      	movs	r3, #1
 800aba6:	e09f      	b.n	800ace8 <_printf_i+0x1ec>
 800aba8:	6820      	ldr	r0, [r4, #0]
 800abaa:	682b      	ldr	r3, [r5, #0]
 800abac:	0607      	lsls	r7, r0, #24
 800abae:	f103 0104 	add.w	r1, r3, #4
 800abb2:	6029      	str	r1, [r5, #0]
 800abb4:	d501      	bpl.n	800abba <_printf_i+0xbe>
 800abb6:	681e      	ldr	r6, [r3, #0]
 800abb8:	e003      	b.n	800abc2 <_printf_i+0xc6>
 800abba:	0646      	lsls	r6, r0, #25
 800abbc:	d5fb      	bpl.n	800abb6 <_printf_i+0xba>
 800abbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 800abc2:	2e00      	cmp	r6, #0
 800abc4:	da03      	bge.n	800abce <_printf_i+0xd2>
 800abc6:	232d      	movs	r3, #45	; 0x2d
 800abc8:	4276      	negs	r6, r6
 800abca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800abce:	485a      	ldr	r0, [pc, #360]	; (800ad38 <_printf_i+0x23c>)
 800abd0:	230a      	movs	r3, #10
 800abd2:	e012      	b.n	800abfa <_printf_i+0xfe>
 800abd4:	682b      	ldr	r3, [r5, #0]
 800abd6:	6820      	ldr	r0, [r4, #0]
 800abd8:	1d19      	adds	r1, r3, #4
 800abda:	6029      	str	r1, [r5, #0]
 800abdc:	0605      	lsls	r5, r0, #24
 800abde:	d501      	bpl.n	800abe4 <_printf_i+0xe8>
 800abe0:	681e      	ldr	r6, [r3, #0]
 800abe2:	e002      	b.n	800abea <_printf_i+0xee>
 800abe4:	0641      	lsls	r1, r0, #25
 800abe6:	d5fb      	bpl.n	800abe0 <_printf_i+0xe4>
 800abe8:	881e      	ldrh	r6, [r3, #0]
 800abea:	4853      	ldr	r0, [pc, #332]	; (800ad38 <_printf_i+0x23c>)
 800abec:	2f6f      	cmp	r7, #111	; 0x6f
 800abee:	bf0c      	ite	eq
 800abf0:	2308      	moveq	r3, #8
 800abf2:	230a      	movne	r3, #10
 800abf4:	2100      	movs	r1, #0
 800abf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800abfa:	6865      	ldr	r5, [r4, #4]
 800abfc:	60a5      	str	r5, [r4, #8]
 800abfe:	2d00      	cmp	r5, #0
 800ac00:	bfa2      	ittt	ge
 800ac02:	6821      	ldrge	r1, [r4, #0]
 800ac04:	f021 0104 	bicge.w	r1, r1, #4
 800ac08:	6021      	strge	r1, [r4, #0]
 800ac0a:	b90e      	cbnz	r6, 800ac10 <_printf_i+0x114>
 800ac0c:	2d00      	cmp	r5, #0
 800ac0e:	d04b      	beq.n	800aca8 <_printf_i+0x1ac>
 800ac10:	4615      	mov	r5, r2
 800ac12:	fbb6 f1f3 	udiv	r1, r6, r3
 800ac16:	fb03 6711 	mls	r7, r3, r1, r6
 800ac1a:	5dc7      	ldrb	r7, [r0, r7]
 800ac1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ac20:	4637      	mov	r7, r6
 800ac22:	42bb      	cmp	r3, r7
 800ac24:	460e      	mov	r6, r1
 800ac26:	d9f4      	bls.n	800ac12 <_printf_i+0x116>
 800ac28:	2b08      	cmp	r3, #8
 800ac2a:	d10b      	bne.n	800ac44 <_printf_i+0x148>
 800ac2c:	6823      	ldr	r3, [r4, #0]
 800ac2e:	07de      	lsls	r6, r3, #31
 800ac30:	d508      	bpl.n	800ac44 <_printf_i+0x148>
 800ac32:	6923      	ldr	r3, [r4, #16]
 800ac34:	6861      	ldr	r1, [r4, #4]
 800ac36:	4299      	cmp	r1, r3
 800ac38:	bfde      	ittt	le
 800ac3a:	2330      	movle	r3, #48	; 0x30
 800ac3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ac40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ac44:	1b52      	subs	r2, r2, r5
 800ac46:	6122      	str	r2, [r4, #16]
 800ac48:	f8cd a000 	str.w	sl, [sp]
 800ac4c:	464b      	mov	r3, r9
 800ac4e:	aa03      	add	r2, sp, #12
 800ac50:	4621      	mov	r1, r4
 800ac52:	4640      	mov	r0, r8
 800ac54:	f7ff fee4 	bl	800aa20 <_printf_common>
 800ac58:	3001      	adds	r0, #1
 800ac5a:	d14a      	bne.n	800acf2 <_printf_i+0x1f6>
 800ac5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ac60:	b004      	add	sp, #16
 800ac62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac66:	6823      	ldr	r3, [r4, #0]
 800ac68:	f043 0320 	orr.w	r3, r3, #32
 800ac6c:	6023      	str	r3, [r4, #0]
 800ac6e:	4833      	ldr	r0, [pc, #204]	; (800ad3c <_printf_i+0x240>)
 800ac70:	2778      	movs	r7, #120	; 0x78
 800ac72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ac76:	6823      	ldr	r3, [r4, #0]
 800ac78:	6829      	ldr	r1, [r5, #0]
 800ac7a:	061f      	lsls	r7, r3, #24
 800ac7c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ac80:	d402      	bmi.n	800ac88 <_printf_i+0x18c>
 800ac82:	065f      	lsls	r7, r3, #25
 800ac84:	bf48      	it	mi
 800ac86:	b2b6      	uxthmi	r6, r6
 800ac88:	07df      	lsls	r7, r3, #31
 800ac8a:	bf48      	it	mi
 800ac8c:	f043 0320 	orrmi.w	r3, r3, #32
 800ac90:	6029      	str	r1, [r5, #0]
 800ac92:	bf48      	it	mi
 800ac94:	6023      	strmi	r3, [r4, #0]
 800ac96:	b91e      	cbnz	r6, 800aca0 <_printf_i+0x1a4>
 800ac98:	6823      	ldr	r3, [r4, #0]
 800ac9a:	f023 0320 	bic.w	r3, r3, #32
 800ac9e:	6023      	str	r3, [r4, #0]
 800aca0:	2310      	movs	r3, #16
 800aca2:	e7a7      	b.n	800abf4 <_printf_i+0xf8>
 800aca4:	4824      	ldr	r0, [pc, #144]	; (800ad38 <_printf_i+0x23c>)
 800aca6:	e7e4      	b.n	800ac72 <_printf_i+0x176>
 800aca8:	4615      	mov	r5, r2
 800acaa:	e7bd      	b.n	800ac28 <_printf_i+0x12c>
 800acac:	682b      	ldr	r3, [r5, #0]
 800acae:	6826      	ldr	r6, [r4, #0]
 800acb0:	6961      	ldr	r1, [r4, #20]
 800acb2:	1d18      	adds	r0, r3, #4
 800acb4:	6028      	str	r0, [r5, #0]
 800acb6:	0635      	lsls	r5, r6, #24
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	d501      	bpl.n	800acc0 <_printf_i+0x1c4>
 800acbc:	6019      	str	r1, [r3, #0]
 800acbe:	e002      	b.n	800acc6 <_printf_i+0x1ca>
 800acc0:	0670      	lsls	r0, r6, #25
 800acc2:	d5fb      	bpl.n	800acbc <_printf_i+0x1c0>
 800acc4:	8019      	strh	r1, [r3, #0]
 800acc6:	2300      	movs	r3, #0
 800acc8:	6123      	str	r3, [r4, #16]
 800acca:	4615      	mov	r5, r2
 800accc:	e7bc      	b.n	800ac48 <_printf_i+0x14c>
 800acce:	682b      	ldr	r3, [r5, #0]
 800acd0:	1d1a      	adds	r2, r3, #4
 800acd2:	602a      	str	r2, [r5, #0]
 800acd4:	681d      	ldr	r5, [r3, #0]
 800acd6:	6862      	ldr	r2, [r4, #4]
 800acd8:	2100      	movs	r1, #0
 800acda:	4628      	mov	r0, r5
 800acdc:	f7f5 fa78 	bl	80001d0 <memchr>
 800ace0:	b108      	cbz	r0, 800ace6 <_printf_i+0x1ea>
 800ace2:	1b40      	subs	r0, r0, r5
 800ace4:	6060      	str	r0, [r4, #4]
 800ace6:	6863      	ldr	r3, [r4, #4]
 800ace8:	6123      	str	r3, [r4, #16]
 800acea:	2300      	movs	r3, #0
 800acec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800acf0:	e7aa      	b.n	800ac48 <_printf_i+0x14c>
 800acf2:	6923      	ldr	r3, [r4, #16]
 800acf4:	462a      	mov	r2, r5
 800acf6:	4649      	mov	r1, r9
 800acf8:	4640      	mov	r0, r8
 800acfa:	47d0      	blx	sl
 800acfc:	3001      	adds	r0, #1
 800acfe:	d0ad      	beq.n	800ac5c <_printf_i+0x160>
 800ad00:	6823      	ldr	r3, [r4, #0]
 800ad02:	079b      	lsls	r3, r3, #30
 800ad04:	d413      	bmi.n	800ad2e <_printf_i+0x232>
 800ad06:	68e0      	ldr	r0, [r4, #12]
 800ad08:	9b03      	ldr	r3, [sp, #12]
 800ad0a:	4298      	cmp	r0, r3
 800ad0c:	bfb8      	it	lt
 800ad0e:	4618      	movlt	r0, r3
 800ad10:	e7a6      	b.n	800ac60 <_printf_i+0x164>
 800ad12:	2301      	movs	r3, #1
 800ad14:	4632      	mov	r2, r6
 800ad16:	4649      	mov	r1, r9
 800ad18:	4640      	mov	r0, r8
 800ad1a:	47d0      	blx	sl
 800ad1c:	3001      	adds	r0, #1
 800ad1e:	d09d      	beq.n	800ac5c <_printf_i+0x160>
 800ad20:	3501      	adds	r5, #1
 800ad22:	68e3      	ldr	r3, [r4, #12]
 800ad24:	9903      	ldr	r1, [sp, #12]
 800ad26:	1a5b      	subs	r3, r3, r1
 800ad28:	42ab      	cmp	r3, r5
 800ad2a:	dcf2      	bgt.n	800ad12 <_printf_i+0x216>
 800ad2c:	e7eb      	b.n	800ad06 <_printf_i+0x20a>
 800ad2e:	2500      	movs	r5, #0
 800ad30:	f104 0619 	add.w	r6, r4, #25
 800ad34:	e7f5      	b.n	800ad22 <_printf_i+0x226>
 800ad36:	bf00      	nop
 800ad38:	0800c014 	.word	0x0800c014
 800ad3c:	0800c025 	.word	0x0800c025

0800ad40 <__sflush_r>:
 800ad40:	898a      	ldrh	r2, [r1, #12]
 800ad42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad46:	4605      	mov	r5, r0
 800ad48:	0710      	lsls	r0, r2, #28
 800ad4a:	460c      	mov	r4, r1
 800ad4c:	d458      	bmi.n	800ae00 <__sflush_r+0xc0>
 800ad4e:	684b      	ldr	r3, [r1, #4]
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	dc05      	bgt.n	800ad60 <__sflush_r+0x20>
 800ad54:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	dc02      	bgt.n	800ad60 <__sflush_r+0x20>
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad60:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad62:	2e00      	cmp	r6, #0
 800ad64:	d0f9      	beq.n	800ad5a <__sflush_r+0x1a>
 800ad66:	2300      	movs	r3, #0
 800ad68:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ad6c:	682f      	ldr	r7, [r5, #0]
 800ad6e:	6a21      	ldr	r1, [r4, #32]
 800ad70:	602b      	str	r3, [r5, #0]
 800ad72:	d032      	beq.n	800adda <__sflush_r+0x9a>
 800ad74:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad76:	89a3      	ldrh	r3, [r4, #12]
 800ad78:	075a      	lsls	r2, r3, #29
 800ad7a:	d505      	bpl.n	800ad88 <__sflush_r+0x48>
 800ad7c:	6863      	ldr	r3, [r4, #4]
 800ad7e:	1ac0      	subs	r0, r0, r3
 800ad80:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad82:	b10b      	cbz	r3, 800ad88 <__sflush_r+0x48>
 800ad84:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad86:	1ac0      	subs	r0, r0, r3
 800ad88:	2300      	movs	r3, #0
 800ad8a:	4602      	mov	r2, r0
 800ad8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ad8e:	6a21      	ldr	r1, [r4, #32]
 800ad90:	4628      	mov	r0, r5
 800ad92:	47b0      	blx	r6
 800ad94:	1c43      	adds	r3, r0, #1
 800ad96:	89a3      	ldrh	r3, [r4, #12]
 800ad98:	d106      	bne.n	800ada8 <__sflush_r+0x68>
 800ad9a:	6829      	ldr	r1, [r5, #0]
 800ad9c:	291d      	cmp	r1, #29
 800ad9e:	d82b      	bhi.n	800adf8 <__sflush_r+0xb8>
 800ada0:	4a29      	ldr	r2, [pc, #164]	; (800ae48 <__sflush_r+0x108>)
 800ada2:	410a      	asrs	r2, r1
 800ada4:	07d6      	lsls	r6, r2, #31
 800ada6:	d427      	bmi.n	800adf8 <__sflush_r+0xb8>
 800ada8:	2200      	movs	r2, #0
 800adaa:	6062      	str	r2, [r4, #4]
 800adac:	04d9      	lsls	r1, r3, #19
 800adae:	6922      	ldr	r2, [r4, #16]
 800adb0:	6022      	str	r2, [r4, #0]
 800adb2:	d504      	bpl.n	800adbe <__sflush_r+0x7e>
 800adb4:	1c42      	adds	r2, r0, #1
 800adb6:	d101      	bne.n	800adbc <__sflush_r+0x7c>
 800adb8:	682b      	ldr	r3, [r5, #0]
 800adba:	b903      	cbnz	r3, 800adbe <__sflush_r+0x7e>
 800adbc:	6560      	str	r0, [r4, #84]	; 0x54
 800adbe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adc0:	602f      	str	r7, [r5, #0]
 800adc2:	2900      	cmp	r1, #0
 800adc4:	d0c9      	beq.n	800ad5a <__sflush_r+0x1a>
 800adc6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800adca:	4299      	cmp	r1, r3
 800adcc:	d002      	beq.n	800add4 <__sflush_r+0x94>
 800adce:	4628      	mov	r0, r5
 800add0:	f000 fa7a 	bl	800b2c8 <_free_r>
 800add4:	2000      	movs	r0, #0
 800add6:	6360      	str	r0, [r4, #52]	; 0x34
 800add8:	e7c0      	b.n	800ad5c <__sflush_r+0x1c>
 800adda:	2301      	movs	r3, #1
 800addc:	4628      	mov	r0, r5
 800adde:	47b0      	blx	r6
 800ade0:	1c41      	adds	r1, r0, #1
 800ade2:	d1c8      	bne.n	800ad76 <__sflush_r+0x36>
 800ade4:	682b      	ldr	r3, [r5, #0]
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d0c5      	beq.n	800ad76 <__sflush_r+0x36>
 800adea:	2b1d      	cmp	r3, #29
 800adec:	d001      	beq.n	800adf2 <__sflush_r+0xb2>
 800adee:	2b16      	cmp	r3, #22
 800adf0:	d101      	bne.n	800adf6 <__sflush_r+0xb6>
 800adf2:	602f      	str	r7, [r5, #0]
 800adf4:	e7b1      	b.n	800ad5a <__sflush_r+0x1a>
 800adf6:	89a3      	ldrh	r3, [r4, #12]
 800adf8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adfc:	81a3      	strh	r3, [r4, #12]
 800adfe:	e7ad      	b.n	800ad5c <__sflush_r+0x1c>
 800ae00:	690f      	ldr	r7, [r1, #16]
 800ae02:	2f00      	cmp	r7, #0
 800ae04:	d0a9      	beq.n	800ad5a <__sflush_r+0x1a>
 800ae06:	0793      	lsls	r3, r2, #30
 800ae08:	680e      	ldr	r6, [r1, #0]
 800ae0a:	bf08      	it	eq
 800ae0c:	694b      	ldreq	r3, [r1, #20]
 800ae0e:	600f      	str	r7, [r1, #0]
 800ae10:	bf18      	it	ne
 800ae12:	2300      	movne	r3, #0
 800ae14:	eba6 0807 	sub.w	r8, r6, r7
 800ae18:	608b      	str	r3, [r1, #8]
 800ae1a:	f1b8 0f00 	cmp.w	r8, #0
 800ae1e:	dd9c      	ble.n	800ad5a <__sflush_r+0x1a>
 800ae20:	6a21      	ldr	r1, [r4, #32]
 800ae22:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ae24:	4643      	mov	r3, r8
 800ae26:	463a      	mov	r2, r7
 800ae28:	4628      	mov	r0, r5
 800ae2a:	47b0      	blx	r6
 800ae2c:	2800      	cmp	r0, #0
 800ae2e:	dc06      	bgt.n	800ae3e <__sflush_r+0xfe>
 800ae30:	89a3      	ldrh	r3, [r4, #12]
 800ae32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae36:	81a3      	strh	r3, [r4, #12]
 800ae38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae3c:	e78e      	b.n	800ad5c <__sflush_r+0x1c>
 800ae3e:	4407      	add	r7, r0
 800ae40:	eba8 0800 	sub.w	r8, r8, r0
 800ae44:	e7e9      	b.n	800ae1a <__sflush_r+0xda>
 800ae46:	bf00      	nop
 800ae48:	dfbffffe 	.word	0xdfbffffe

0800ae4c <_fflush_r>:
 800ae4c:	b538      	push	{r3, r4, r5, lr}
 800ae4e:	690b      	ldr	r3, [r1, #16]
 800ae50:	4605      	mov	r5, r0
 800ae52:	460c      	mov	r4, r1
 800ae54:	b913      	cbnz	r3, 800ae5c <_fflush_r+0x10>
 800ae56:	2500      	movs	r5, #0
 800ae58:	4628      	mov	r0, r5
 800ae5a:	bd38      	pop	{r3, r4, r5, pc}
 800ae5c:	b118      	cbz	r0, 800ae66 <_fflush_r+0x1a>
 800ae5e:	6a03      	ldr	r3, [r0, #32]
 800ae60:	b90b      	cbnz	r3, 800ae66 <_fflush_r+0x1a>
 800ae62:	f7ff fa23 	bl	800a2ac <__sinit>
 800ae66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d0f3      	beq.n	800ae56 <_fflush_r+0xa>
 800ae6e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae70:	07d0      	lsls	r0, r2, #31
 800ae72:	d404      	bmi.n	800ae7e <_fflush_r+0x32>
 800ae74:	0599      	lsls	r1, r3, #22
 800ae76:	d402      	bmi.n	800ae7e <_fflush_r+0x32>
 800ae78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae7a:	f7ff fa92 	bl	800a3a2 <__retarget_lock_acquire_recursive>
 800ae7e:	4628      	mov	r0, r5
 800ae80:	4621      	mov	r1, r4
 800ae82:	f7ff ff5d 	bl	800ad40 <__sflush_r>
 800ae86:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae88:	07da      	lsls	r2, r3, #31
 800ae8a:	4605      	mov	r5, r0
 800ae8c:	d4e4      	bmi.n	800ae58 <_fflush_r+0xc>
 800ae8e:	89a3      	ldrh	r3, [r4, #12]
 800ae90:	059b      	lsls	r3, r3, #22
 800ae92:	d4e1      	bmi.n	800ae58 <_fflush_r+0xc>
 800ae94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae96:	f7ff fa85 	bl	800a3a4 <__retarget_lock_release_recursive>
 800ae9a:	e7dd      	b.n	800ae58 <_fflush_r+0xc>

0800ae9c <__malloc_lock>:
 800ae9c:	4801      	ldr	r0, [pc, #4]	; (800aea4 <__malloc_lock+0x8>)
 800ae9e:	f7ff ba80 	b.w	800a3a2 <__retarget_lock_acquire_recursive>
 800aea2:	bf00      	nop
 800aea4:	200006a0 	.word	0x200006a0

0800aea8 <__malloc_unlock>:
 800aea8:	4801      	ldr	r0, [pc, #4]	; (800aeb0 <__malloc_unlock+0x8>)
 800aeaa:	f7ff ba7b 	b.w	800a3a4 <__retarget_lock_release_recursive>
 800aeae:	bf00      	nop
 800aeb0:	200006a0 	.word	0x200006a0

0800aeb4 <__sread>:
 800aeb4:	b510      	push	{r4, lr}
 800aeb6:	460c      	mov	r4, r1
 800aeb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aebc:	f000 f9c2 	bl	800b244 <_read_r>
 800aec0:	2800      	cmp	r0, #0
 800aec2:	bfab      	itete	ge
 800aec4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800aec6:	89a3      	ldrhlt	r3, [r4, #12]
 800aec8:	181b      	addge	r3, r3, r0
 800aeca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800aece:	bfac      	ite	ge
 800aed0:	6563      	strge	r3, [r4, #84]	; 0x54
 800aed2:	81a3      	strhlt	r3, [r4, #12]
 800aed4:	bd10      	pop	{r4, pc}

0800aed6 <__swrite>:
 800aed6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aeda:	461f      	mov	r7, r3
 800aedc:	898b      	ldrh	r3, [r1, #12]
 800aede:	05db      	lsls	r3, r3, #23
 800aee0:	4605      	mov	r5, r0
 800aee2:	460c      	mov	r4, r1
 800aee4:	4616      	mov	r6, r2
 800aee6:	d505      	bpl.n	800aef4 <__swrite+0x1e>
 800aee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aeec:	2302      	movs	r3, #2
 800aeee:	2200      	movs	r2, #0
 800aef0:	f000 f996 	bl	800b220 <_lseek_r>
 800aef4:	89a3      	ldrh	r3, [r4, #12]
 800aef6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aefa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aefe:	81a3      	strh	r3, [r4, #12]
 800af00:	4632      	mov	r2, r6
 800af02:	463b      	mov	r3, r7
 800af04:	4628      	mov	r0, r5
 800af06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af0a:	f000 b9bd 	b.w	800b288 <_write_r>

0800af0e <__sseek>:
 800af0e:	b510      	push	{r4, lr}
 800af10:	460c      	mov	r4, r1
 800af12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af16:	f000 f983 	bl	800b220 <_lseek_r>
 800af1a:	1c43      	adds	r3, r0, #1
 800af1c:	89a3      	ldrh	r3, [r4, #12]
 800af1e:	bf15      	itete	ne
 800af20:	6560      	strne	r0, [r4, #84]	; 0x54
 800af22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800af26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800af2a:	81a3      	strheq	r3, [r4, #12]
 800af2c:	bf18      	it	ne
 800af2e:	81a3      	strhne	r3, [r4, #12]
 800af30:	bd10      	pop	{r4, pc}

0800af32 <__sclose>:
 800af32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af36:	f000 b941 	b.w	800b1bc <_close_r>

0800af3a <_realloc_r>:
 800af3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af3e:	4680      	mov	r8, r0
 800af40:	4614      	mov	r4, r2
 800af42:	460e      	mov	r6, r1
 800af44:	b921      	cbnz	r1, 800af50 <_realloc_r+0x16>
 800af46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af4a:	4611      	mov	r1, r2
 800af4c:	f7ff bce8 	b.w	800a920 <_malloc_r>
 800af50:	b92a      	cbnz	r2, 800af5e <_realloc_r+0x24>
 800af52:	f000 f9b9 	bl	800b2c8 <_free_r>
 800af56:	4625      	mov	r5, r4
 800af58:	4628      	mov	r0, r5
 800af5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af5e:	f000 f9ff 	bl	800b360 <_malloc_usable_size_r>
 800af62:	4284      	cmp	r4, r0
 800af64:	4607      	mov	r7, r0
 800af66:	d802      	bhi.n	800af6e <_realloc_r+0x34>
 800af68:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800af6c:	d812      	bhi.n	800af94 <_realloc_r+0x5a>
 800af6e:	4621      	mov	r1, r4
 800af70:	4640      	mov	r0, r8
 800af72:	f7ff fcd5 	bl	800a920 <_malloc_r>
 800af76:	4605      	mov	r5, r0
 800af78:	2800      	cmp	r0, #0
 800af7a:	d0ed      	beq.n	800af58 <_realloc_r+0x1e>
 800af7c:	42bc      	cmp	r4, r7
 800af7e:	4622      	mov	r2, r4
 800af80:	4631      	mov	r1, r6
 800af82:	bf28      	it	cs
 800af84:	463a      	movcs	r2, r7
 800af86:	f000 f991 	bl	800b2ac <memcpy>
 800af8a:	4631      	mov	r1, r6
 800af8c:	4640      	mov	r0, r8
 800af8e:	f000 f99b 	bl	800b2c8 <_free_r>
 800af92:	e7e1      	b.n	800af58 <_realloc_r+0x1e>
 800af94:	4635      	mov	r5, r6
 800af96:	e7df      	b.n	800af58 <_realloc_r+0x1e>

0800af98 <__swbuf_r>:
 800af98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af9a:	460e      	mov	r6, r1
 800af9c:	4614      	mov	r4, r2
 800af9e:	4605      	mov	r5, r0
 800afa0:	b118      	cbz	r0, 800afaa <__swbuf_r+0x12>
 800afa2:	6a03      	ldr	r3, [r0, #32]
 800afa4:	b90b      	cbnz	r3, 800afaa <__swbuf_r+0x12>
 800afa6:	f7ff f981 	bl	800a2ac <__sinit>
 800afaa:	69a3      	ldr	r3, [r4, #24]
 800afac:	60a3      	str	r3, [r4, #8]
 800afae:	89a3      	ldrh	r3, [r4, #12]
 800afb0:	071a      	lsls	r2, r3, #28
 800afb2:	d525      	bpl.n	800b000 <__swbuf_r+0x68>
 800afb4:	6923      	ldr	r3, [r4, #16]
 800afb6:	b31b      	cbz	r3, 800b000 <__swbuf_r+0x68>
 800afb8:	6823      	ldr	r3, [r4, #0]
 800afba:	6922      	ldr	r2, [r4, #16]
 800afbc:	1a98      	subs	r0, r3, r2
 800afbe:	6963      	ldr	r3, [r4, #20]
 800afc0:	b2f6      	uxtb	r6, r6
 800afc2:	4283      	cmp	r3, r0
 800afc4:	4637      	mov	r7, r6
 800afc6:	dc04      	bgt.n	800afd2 <__swbuf_r+0x3a>
 800afc8:	4621      	mov	r1, r4
 800afca:	4628      	mov	r0, r5
 800afcc:	f7ff ff3e 	bl	800ae4c <_fflush_r>
 800afd0:	b9e0      	cbnz	r0, 800b00c <__swbuf_r+0x74>
 800afd2:	68a3      	ldr	r3, [r4, #8]
 800afd4:	3b01      	subs	r3, #1
 800afd6:	60a3      	str	r3, [r4, #8]
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	1c5a      	adds	r2, r3, #1
 800afdc:	6022      	str	r2, [r4, #0]
 800afde:	701e      	strb	r6, [r3, #0]
 800afe0:	6962      	ldr	r2, [r4, #20]
 800afe2:	1c43      	adds	r3, r0, #1
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d004      	beq.n	800aff2 <__swbuf_r+0x5a>
 800afe8:	89a3      	ldrh	r3, [r4, #12]
 800afea:	07db      	lsls	r3, r3, #31
 800afec:	d506      	bpl.n	800affc <__swbuf_r+0x64>
 800afee:	2e0a      	cmp	r6, #10
 800aff0:	d104      	bne.n	800affc <__swbuf_r+0x64>
 800aff2:	4621      	mov	r1, r4
 800aff4:	4628      	mov	r0, r5
 800aff6:	f7ff ff29 	bl	800ae4c <_fflush_r>
 800affa:	b938      	cbnz	r0, 800b00c <__swbuf_r+0x74>
 800affc:	4638      	mov	r0, r7
 800affe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b000:	4621      	mov	r1, r4
 800b002:	4628      	mov	r0, r5
 800b004:	f000 f806 	bl	800b014 <__swsetup_r>
 800b008:	2800      	cmp	r0, #0
 800b00a:	d0d5      	beq.n	800afb8 <__swbuf_r+0x20>
 800b00c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800b010:	e7f4      	b.n	800affc <__swbuf_r+0x64>
	...

0800b014 <__swsetup_r>:
 800b014:	b538      	push	{r3, r4, r5, lr}
 800b016:	4b2a      	ldr	r3, [pc, #168]	; (800b0c0 <__swsetup_r+0xac>)
 800b018:	4605      	mov	r5, r0
 800b01a:	6818      	ldr	r0, [r3, #0]
 800b01c:	460c      	mov	r4, r1
 800b01e:	b118      	cbz	r0, 800b028 <__swsetup_r+0x14>
 800b020:	6a03      	ldr	r3, [r0, #32]
 800b022:	b90b      	cbnz	r3, 800b028 <__swsetup_r+0x14>
 800b024:	f7ff f942 	bl	800a2ac <__sinit>
 800b028:	89a3      	ldrh	r3, [r4, #12]
 800b02a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b02e:	0718      	lsls	r0, r3, #28
 800b030:	d422      	bmi.n	800b078 <__swsetup_r+0x64>
 800b032:	06d9      	lsls	r1, r3, #27
 800b034:	d407      	bmi.n	800b046 <__swsetup_r+0x32>
 800b036:	2309      	movs	r3, #9
 800b038:	602b      	str	r3, [r5, #0]
 800b03a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b03e:	81a3      	strh	r3, [r4, #12]
 800b040:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b044:	e034      	b.n	800b0b0 <__swsetup_r+0x9c>
 800b046:	0758      	lsls	r0, r3, #29
 800b048:	d512      	bpl.n	800b070 <__swsetup_r+0x5c>
 800b04a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b04c:	b141      	cbz	r1, 800b060 <__swsetup_r+0x4c>
 800b04e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b052:	4299      	cmp	r1, r3
 800b054:	d002      	beq.n	800b05c <__swsetup_r+0x48>
 800b056:	4628      	mov	r0, r5
 800b058:	f000 f936 	bl	800b2c8 <_free_r>
 800b05c:	2300      	movs	r3, #0
 800b05e:	6363      	str	r3, [r4, #52]	; 0x34
 800b060:	89a3      	ldrh	r3, [r4, #12]
 800b062:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b066:	81a3      	strh	r3, [r4, #12]
 800b068:	2300      	movs	r3, #0
 800b06a:	6063      	str	r3, [r4, #4]
 800b06c:	6923      	ldr	r3, [r4, #16]
 800b06e:	6023      	str	r3, [r4, #0]
 800b070:	89a3      	ldrh	r3, [r4, #12]
 800b072:	f043 0308 	orr.w	r3, r3, #8
 800b076:	81a3      	strh	r3, [r4, #12]
 800b078:	6923      	ldr	r3, [r4, #16]
 800b07a:	b94b      	cbnz	r3, 800b090 <__swsetup_r+0x7c>
 800b07c:	89a3      	ldrh	r3, [r4, #12]
 800b07e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b086:	d003      	beq.n	800b090 <__swsetup_r+0x7c>
 800b088:	4621      	mov	r1, r4
 800b08a:	4628      	mov	r0, r5
 800b08c:	f000 f840 	bl	800b110 <__smakebuf_r>
 800b090:	89a0      	ldrh	r0, [r4, #12]
 800b092:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b096:	f010 0301 	ands.w	r3, r0, #1
 800b09a:	d00a      	beq.n	800b0b2 <__swsetup_r+0x9e>
 800b09c:	2300      	movs	r3, #0
 800b09e:	60a3      	str	r3, [r4, #8]
 800b0a0:	6963      	ldr	r3, [r4, #20]
 800b0a2:	425b      	negs	r3, r3
 800b0a4:	61a3      	str	r3, [r4, #24]
 800b0a6:	6923      	ldr	r3, [r4, #16]
 800b0a8:	b943      	cbnz	r3, 800b0bc <__swsetup_r+0xa8>
 800b0aa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b0ae:	d1c4      	bne.n	800b03a <__swsetup_r+0x26>
 800b0b0:	bd38      	pop	{r3, r4, r5, pc}
 800b0b2:	0781      	lsls	r1, r0, #30
 800b0b4:	bf58      	it	pl
 800b0b6:	6963      	ldrpl	r3, [r4, #20]
 800b0b8:	60a3      	str	r3, [r4, #8]
 800b0ba:	e7f4      	b.n	800b0a6 <__swsetup_r+0x92>
 800b0bc:	2000      	movs	r0, #0
 800b0be:	e7f7      	b.n	800b0b0 <__swsetup_r+0x9c>
 800b0c0:	20000080 	.word	0x20000080

0800b0c4 <__swhatbuf_r>:
 800b0c4:	b570      	push	{r4, r5, r6, lr}
 800b0c6:	460c      	mov	r4, r1
 800b0c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0cc:	2900      	cmp	r1, #0
 800b0ce:	b096      	sub	sp, #88	; 0x58
 800b0d0:	4615      	mov	r5, r2
 800b0d2:	461e      	mov	r6, r3
 800b0d4:	da0d      	bge.n	800b0f2 <__swhatbuf_r+0x2e>
 800b0d6:	89a3      	ldrh	r3, [r4, #12]
 800b0d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800b0dc:	f04f 0100 	mov.w	r1, #0
 800b0e0:	bf0c      	ite	eq
 800b0e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800b0e6:	2340      	movne	r3, #64	; 0x40
 800b0e8:	2000      	movs	r0, #0
 800b0ea:	6031      	str	r1, [r6, #0]
 800b0ec:	602b      	str	r3, [r5, #0]
 800b0ee:	b016      	add	sp, #88	; 0x58
 800b0f0:	bd70      	pop	{r4, r5, r6, pc}
 800b0f2:	466a      	mov	r2, sp
 800b0f4:	f000 f872 	bl	800b1dc <_fstat_r>
 800b0f8:	2800      	cmp	r0, #0
 800b0fa:	dbec      	blt.n	800b0d6 <__swhatbuf_r+0x12>
 800b0fc:	9901      	ldr	r1, [sp, #4]
 800b0fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800b102:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800b106:	4259      	negs	r1, r3
 800b108:	4159      	adcs	r1, r3
 800b10a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b10e:	e7eb      	b.n	800b0e8 <__swhatbuf_r+0x24>

0800b110 <__smakebuf_r>:
 800b110:	898b      	ldrh	r3, [r1, #12]
 800b112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b114:	079d      	lsls	r5, r3, #30
 800b116:	4606      	mov	r6, r0
 800b118:	460c      	mov	r4, r1
 800b11a:	d507      	bpl.n	800b12c <__smakebuf_r+0x1c>
 800b11c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b120:	6023      	str	r3, [r4, #0]
 800b122:	6123      	str	r3, [r4, #16]
 800b124:	2301      	movs	r3, #1
 800b126:	6163      	str	r3, [r4, #20]
 800b128:	b002      	add	sp, #8
 800b12a:	bd70      	pop	{r4, r5, r6, pc}
 800b12c:	ab01      	add	r3, sp, #4
 800b12e:	466a      	mov	r2, sp
 800b130:	f7ff ffc8 	bl	800b0c4 <__swhatbuf_r>
 800b134:	9900      	ldr	r1, [sp, #0]
 800b136:	4605      	mov	r5, r0
 800b138:	4630      	mov	r0, r6
 800b13a:	f7ff fbf1 	bl	800a920 <_malloc_r>
 800b13e:	b948      	cbnz	r0, 800b154 <__smakebuf_r+0x44>
 800b140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b144:	059a      	lsls	r2, r3, #22
 800b146:	d4ef      	bmi.n	800b128 <__smakebuf_r+0x18>
 800b148:	f023 0303 	bic.w	r3, r3, #3
 800b14c:	f043 0302 	orr.w	r3, r3, #2
 800b150:	81a3      	strh	r3, [r4, #12]
 800b152:	e7e3      	b.n	800b11c <__smakebuf_r+0xc>
 800b154:	89a3      	ldrh	r3, [r4, #12]
 800b156:	6020      	str	r0, [r4, #0]
 800b158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b15c:	81a3      	strh	r3, [r4, #12]
 800b15e:	9b00      	ldr	r3, [sp, #0]
 800b160:	6163      	str	r3, [r4, #20]
 800b162:	9b01      	ldr	r3, [sp, #4]
 800b164:	6120      	str	r0, [r4, #16]
 800b166:	b15b      	cbz	r3, 800b180 <__smakebuf_r+0x70>
 800b168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b16c:	4630      	mov	r0, r6
 800b16e:	f000 f847 	bl	800b200 <_isatty_r>
 800b172:	b128      	cbz	r0, 800b180 <__smakebuf_r+0x70>
 800b174:	89a3      	ldrh	r3, [r4, #12]
 800b176:	f023 0303 	bic.w	r3, r3, #3
 800b17a:	f043 0301 	orr.w	r3, r3, #1
 800b17e:	81a3      	strh	r3, [r4, #12]
 800b180:	89a3      	ldrh	r3, [r4, #12]
 800b182:	431d      	orrs	r5, r3
 800b184:	81a5      	strh	r5, [r4, #12]
 800b186:	e7cf      	b.n	800b128 <__smakebuf_r+0x18>

0800b188 <memmove>:
 800b188:	4288      	cmp	r0, r1
 800b18a:	b510      	push	{r4, lr}
 800b18c:	eb01 0402 	add.w	r4, r1, r2
 800b190:	d902      	bls.n	800b198 <memmove+0x10>
 800b192:	4284      	cmp	r4, r0
 800b194:	4623      	mov	r3, r4
 800b196:	d807      	bhi.n	800b1a8 <memmove+0x20>
 800b198:	1e43      	subs	r3, r0, #1
 800b19a:	42a1      	cmp	r1, r4
 800b19c:	d008      	beq.n	800b1b0 <memmove+0x28>
 800b19e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b1a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b1a6:	e7f8      	b.n	800b19a <memmove+0x12>
 800b1a8:	4402      	add	r2, r0
 800b1aa:	4601      	mov	r1, r0
 800b1ac:	428a      	cmp	r2, r1
 800b1ae:	d100      	bne.n	800b1b2 <memmove+0x2a>
 800b1b0:	bd10      	pop	{r4, pc}
 800b1b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b1b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b1ba:	e7f7      	b.n	800b1ac <memmove+0x24>

0800b1bc <_close_r>:
 800b1bc:	b538      	push	{r3, r4, r5, lr}
 800b1be:	4d06      	ldr	r5, [pc, #24]	; (800b1d8 <_close_r+0x1c>)
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	4604      	mov	r4, r0
 800b1c4:	4608      	mov	r0, r1
 800b1c6:	602b      	str	r3, [r5, #0]
 800b1c8:	f7f6 fc69 	bl	8001a9e <_close>
 800b1cc:	1c43      	adds	r3, r0, #1
 800b1ce:	d102      	bne.n	800b1d6 <_close_r+0x1a>
 800b1d0:	682b      	ldr	r3, [r5, #0]
 800b1d2:	b103      	cbz	r3, 800b1d6 <_close_r+0x1a>
 800b1d4:	6023      	str	r3, [r4, #0]
 800b1d6:	bd38      	pop	{r3, r4, r5, pc}
 800b1d8:	200006ac 	.word	0x200006ac

0800b1dc <_fstat_r>:
 800b1dc:	b538      	push	{r3, r4, r5, lr}
 800b1de:	4d07      	ldr	r5, [pc, #28]	; (800b1fc <_fstat_r+0x20>)
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	4604      	mov	r4, r0
 800b1e4:	4608      	mov	r0, r1
 800b1e6:	4611      	mov	r1, r2
 800b1e8:	602b      	str	r3, [r5, #0]
 800b1ea:	f7f6 fc64 	bl	8001ab6 <_fstat>
 800b1ee:	1c43      	adds	r3, r0, #1
 800b1f0:	d102      	bne.n	800b1f8 <_fstat_r+0x1c>
 800b1f2:	682b      	ldr	r3, [r5, #0]
 800b1f4:	b103      	cbz	r3, 800b1f8 <_fstat_r+0x1c>
 800b1f6:	6023      	str	r3, [r4, #0]
 800b1f8:	bd38      	pop	{r3, r4, r5, pc}
 800b1fa:	bf00      	nop
 800b1fc:	200006ac 	.word	0x200006ac

0800b200 <_isatty_r>:
 800b200:	b538      	push	{r3, r4, r5, lr}
 800b202:	4d06      	ldr	r5, [pc, #24]	; (800b21c <_isatty_r+0x1c>)
 800b204:	2300      	movs	r3, #0
 800b206:	4604      	mov	r4, r0
 800b208:	4608      	mov	r0, r1
 800b20a:	602b      	str	r3, [r5, #0]
 800b20c:	f7f6 fc63 	bl	8001ad6 <_isatty>
 800b210:	1c43      	adds	r3, r0, #1
 800b212:	d102      	bne.n	800b21a <_isatty_r+0x1a>
 800b214:	682b      	ldr	r3, [r5, #0]
 800b216:	b103      	cbz	r3, 800b21a <_isatty_r+0x1a>
 800b218:	6023      	str	r3, [r4, #0]
 800b21a:	bd38      	pop	{r3, r4, r5, pc}
 800b21c:	200006ac 	.word	0x200006ac

0800b220 <_lseek_r>:
 800b220:	b538      	push	{r3, r4, r5, lr}
 800b222:	4d07      	ldr	r5, [pc, #28]	; (800b240 <_lseek_r+0x20>)
 800b224:	4604      	mov	r4, r0
 800b226:	4608      	mov	r0, r1
 800b228:	4611      	mov	r1, r2
 800b22a:	2200      	movs	r2, #0
 800b22c:	602a      	str	r2, [r5, #0]
 800b22e:	461a      	mov	r2, r3
 800b230:	f7f6 fc5c 	bl	8001aec <_lseek>
 800b234:	1c43      	adds	r3, r0, #1
 800b236:	d102      	bne.n	800b23e <_lseek_r+0x1e>
 800b238:	682b      	ldr	r3, [r5, #0]
 800b23a:	b103      	cbz	r3, 800b23e <_lseek_r+0x1e>
 800b23c:	6023      	str	r3, [r4, #0]
 800b23e:	bd38      	pop	{r3, r4, r5, pc}
 800b240:	200006ac 	.word	0x200006ac

0800b244 <_read_r>:
 800b244:	b538      	push	{r3, r4, r5, lr}
 800b246:	4d07      	ldr	r5, [pc, #28]	; (800b264 <_read_r+0x20>)
 800b248:	4604      	mov	r4, r0
 800b24a:	4608      	mov	r0, r1
 800b24c:	4611      	mov	r1, r2
 800b24e:	2200      	movs	r2, #0
 800b250:	602a      	str	r2, [r5, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	f7f6 fbea 	bl	8001a2c <_read>
 800b258:	1c43      	adds	r3, r0, #1
 800b25a:	d102      	bne.n	800b262 <_read_r+0x1e>
 800b25c:	682b      	ldr	r3, [r5, #0]
 800b25e:	b103      	cbz	r3, 800b262 <_read_r+0x1e>
 800b260:	6023      	str	r3, [r4, #0]
 800b262:	bd38      	pop	{r3, r4, r5, pc}
 800b264:	200006ac 	.word	0x200006ac

0800b268 <_sbrk_r>:
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	4d06      	ldr	r5, [pc, #24]	; (800b284 <_sbrk_r+0x1c>)
 800b26c:	2300      	movs	r3, #0
 800b26e:	4604      	mov	r4, r0
 800b270:	4608      	mov	r0, r1
 800b272:	602b      	str	r3, [r5, #0]
 800b274:	f7f6 fc48 	bl	8001b08 <_sbrk>
 800b278:	1c43      	adds	r3, r0, #1
 800b27a:	d102      	bne.n	800b282 <_sbrk_r+0x1a>
 800b27c:	682b      	ldr	r3, [r5, #0]
 800b27e:	b103      	cbz	r3, 800b282 <_sbrk_r+0x1a>
 800b280:	6023      	str	r3, [r4, #0]
 800b282:	bd38      	pop	{r3, r4, r5, pc}
 800b284:	200006ac 	.word	0x200006ac

0800b288 <_write_r>:
 800b288:	b538      	push	{r3, r4, r5, lr}
 800b28a:	4d07      	ldr	r5, [pc, #28]	; (800b2a8 <_write_r+0x20>)
 800b28c:	4604      	mov	r4, r0
 800b28e:	4608      	mov	r0, r1
 800b290:	4611      	mov	r1, r2
 800b292:	2200      	movs	r2, #0
 800b294:	602a      	str	r2, [r5, #0]
 800b296:	461a      	mov	r2, r3
 800b298:	f7f6 fbe5 	bl	8001a66 <_write>
 800b29c:	1c43      	adds	r3, r0, #1
 800b29e:	d102      	bne.n	800b2a6 <_write_r+0x1e>
 800b2a0:	682b      	ldr	r3, [r5, #0]
 800b2a2:	b103      	cbz	r3, 800b2a6 <_write_r+0x1e>
 800b2a4:	6023      	str	r3, [r4, #0]
 800b2a6:	bd38      	pop	{r3, r4, r5, pc}
 800b2a8:	200006ac 	.word	0x200006ac

0800b2ac <memcpy>:
 800b2ac:	440a      	add	r2, r1
 800b2ae:	4291      	cmp	r1, r2
 800b2b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800b2b4:	d100      	bne.n	800b2b8 <memcpy+0xc>
 800b2b6:	4770      	bx	lr
 800b2b8:	b510      	push	{r4, lr}
 800b2ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b2be:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b2c2:	4291      	cmp	r1, r2
 800b2c4:	d1f9      	bne.n	800b2ba <memcpy+0xe>
 800b2c6:	bd10      	pop	{r4, pc}

0800b2c8 <_free_r>:
 800b2c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2ca:	2900      	cmp	r1, #0
 800b2cc:	d044      	beq.n	800b358 <_free_r+0x90>
 800b2ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2d2:	9001      	str	r0, [sp, #4]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	f1a1 0404 	sub.w	r4, r1, #4
 800b2da:	bfb8      	it	lt
 800b2dc:	18e4      	addlt	r4, r4, r3
 800b2de:	f7ff fddd 	bl	800ae9c <__malloc_lock>
 800b2e2:	4a1e      	ldr	r2, [pc, #120]	; (800b35c <_free_r+0x94>)
 800b2e4:	9801      	ldr	r0, [sp, #4]
 800b2e6:	6813      	ldr	r3, [r2, #0]
 800b2e8:	b933      	cbnz	r3, 800b2f8 <_free_r+0x30>
 800b2ea:	6063      	str	r3, [r4, #4]
 800b2ec:	6014      	str	r4, [r2, #0]
 800b2ee:	b003      	add	sp, #12
 800b2f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2f4:	f7ff bdd8 	b.w	800aea8 <__malloc_unlock>
 800b2f8:	42a3      	cmp	r3, r4
 800b2fa:	d908      	bls.n	800b30e <_free_r+0x46>
 800b2fc:	6825      	ldr	r5, [r4, #0]
 800b2fe:	1961      	adds	r1, r4, r5
 800b300:	428b      	cmp	r3, r1
 800b302:	bf01      	itttt	eq
 800b304:	6819      	ldreq	r1, [r3, #0]
 800b306:	685b      	ldreq	r3, [r3, #4]
 800b308:	1949      	addeq	r1, r1, r5
 800b30a:	6021      	streq	r1, [r4, #0]
 800b30c:	e7ed      	b.n	800b2ea <_free_r+0x22>
 800b30e:	461a      	mov	r2, r3
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	b10b      	cbz	r3, 800b318 <_free_r+0x50>
 800b314:	42a3      	cmp	r3, r4
 800b316:	d9fa      	bls.n	800b30e <_free_r+0x46>
 800b318:	6811      	ldr	r1, [r2, #0]
 800b31a:	1855      	adds	r5, r2, r1
 800b31c:	42a5      	cmp	r5, r4
 800b31e:	d10b      	bne.n	800b338 <_free_r+0x70>
 800b320:	6824      	ldr	r4, [r4, #0]
 800b322:	4421      	add	r1, r4
 800b324:	1854      	adds	r4, r2, r1
 800b326:	42a3      	cmp	r3, r4
 800b328:	6011      	str	r1, [r2, #0]
 800b32a:	d1e0      	bne.n	800b2ee <_free_r+0x26>
 800b32c:	681c      	ldr	r4, [r3, #0]
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	6053      	str	r3, [r2, #4]
 800b332:	440c      	add	r4, r1
 800b334:	6014      	str	r4, [r2, #0]
 800b336:	e7da      	b.n	800b2ee <_free_r+0x26>
 800b338:	d902      	bls.n	800b340 <_free_r+0x78>
 800b33a:	230c      	movs	r3, #12
 800b33c:	6003      	str	r3, [r0, #0]
 800b33e:	e7d6      	b.n	800b2ee <_free_r+0x26>
 800b340:	6825      	ldr	r5, [r4, #0]
 800b342:	1961      	adds	r1, r4, r5
 800b344:	428b      	cmp	r3, r1
 800b346:	bf04      	itt	eq
 800b348:	6819      	ldreq	r1, [r3, #0]
 800b34a:	685b      	ldreq	r3, [r3, #4]
 800b34c:	6063      	str	r3, [r4, #4]
 800b34e:	bf04      	itt	eq
 800b350:	1949      	addeq	r1, r1, r5
 800b352:	6021      	streq	r1, [r4, #0]
 800b354:	6054      	str	r4, [r2, #4]
 800b356:	e7ca      	b.n	800b2ee <_free_r+0x26>
 800b358:	b003      	add	sp, #12
 800b35a:	bd30      	pop	{r4, r5, pc}
 800b35c:	200006a4 	.word	0x200006a4

0800b360 <_malloc_usable_size_r>:
 800b360:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b364:	1f18      	subs	r0, r3, #4
 800b366:	2b00      	cmp	r3, #0
 800b368:	bfbc      	itt	lt
 800b36a:	580b      	ldrlt	r3, [r1, r0]
 800b36c:	18c0      	addlt	r0, r0, r3
 800b36e:	4770      	bx	lr

0800b370 <_init>:
 800b370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b372:	bf00      	nop
 800b374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b376:	bc08      	pop	{r3}
 800b378:	469e      	mov	lr, r3
 800b37a:	4770      	bx	lr

0800b37c <_fini>:
 800b37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b37e:	bf00      	nop
 800b380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b382:	bc08      	pop	{r3}
 800b384:	469e      	mov	lr, r3
 800b386:	4770      	bx	lr
